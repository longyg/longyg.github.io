<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MapReduce程序运行模式</title>
      <link href="/posts/bigdata/mapreduce-execution-mode.html"/>
      <url>/posts/bigdata/mapreduce-execution-mode.html</url>
      
        <content type="html"><![CDATA[<p>MR程序运行方式</p><p>1、在集群上运行</p><p>使用maven打包jar，拷贝jar包到集群上，运行<code>hadoop jar</code>或<code>yarn jar</code>命令执行。</p><p>如：</p><pre class=" language-shell"><code class="language-shell">$ hadoop jar hadoop-test-0.0.1-SNAPSHOT.jar com.yglong.hadoop.mapred.wordcount.WordCount /data/wc/input /data/wc/output</code></pre><pre class=" language-shell"><code class="language-shell">$ yarn jar hadoop-test-0.0.1-SNAPSHOT.jar com.yglong.hadoop.mapred.wordcount.WordCount /data/wc/input /data/wc/output</code></pre><p>运行后查看结果：</p><pre class=" language-shell"><code class="language-shell">$ hadoop fs -ls /data/wc/outputFound 2 items-rw-r--r--   2 bigdata supergroup          0 2020-08-03 05:25 /data/wc/output/_SUCCESS-rw-r--r--   2 bigdata supergroup         36 2020-08-03 05:25 /data/wc/output/part-r-00000</code></pre><p>2、在windows本地运行</p><p>在windows上可以有两种运行方式：</p><ul><li>在windows本地运行</li><li>从windows上提交到集群上运行</li></ul><p>2.1 在windows本地运行</p><p>在windows本地运行MR程序，主要方便在开发Map和Reduce方法时调试代码，因为可以直接在本地如IDEA上运行程序，验证程序的正确性，也可以在IDEA中debug程序的运行情况。</p><p>2.1.1 安装并配置本地hadoop环境</p><p>在windows上安装hadoop，与在linux上类似，从官网下载hadoop压缩包，解压到某个本地目录。</p><p>设置HADOOP_HOME，JAVA_HOME环境变量</p><p>添加Path环境变量：</p><pre class=" language-bash"><code class="language-bash">%HADOOP_HOME%\bin<span class="token punctuation">;</span>%JAVA_HOME%\bin<span class="token punctuation">;</span></code></pre><p>注意，在windows上需要对hadoop做一个特殊的配置，下载winutils并安装到<code>%HADOOP_HOME%\bin</code>目录下。</p><p>如果不配置这一步，当运行MR程序时，会遇到类似如下的报错：</p><pre class=" language-java"><code class="language-java"><span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">59</span><span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">264</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> WARN  <span class="token punctuation">[</span>main<span class="token operator">:</span>Shell<span class="token annotation punctuation">@693</span><span class="token punctuation">]</span> <span class="token operator">-</span> Did not find winutils<span class="token punctuation">.</span>exe<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token operator">:</span> Could not locate Hadoop executable<span class="token operator">:</span> C<span class="token operator">:</span>\ylong\tool\hadoop<span class="token operator">-</span><span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">1</span>\bin\winutils<span class="token punctuation">.</span>exe <span class="token operator">-</span>see https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>wiki<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">/</span>hadoop<span class="token operator">/</span>WindowsProblems    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Shell<span class="token punctuation">.</span><span class="token function">getQualifiedBinInner</span><span class="token punctuation">(</span>Shell<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">619</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Shell<span class="token punctuation">.</span><span class="token function">getQualifiedBin</span><span class="token punctuation">(</span>Shell<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">592</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Shell<span class="token punctuation">.</span>&lt;clinit<span class="token operator">></span><span class="token punctuation">(</span>Shell<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">689</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>util<span class="token punctuation">.</span>GenericOptionsParser<span class="token punctuation">.</span><span class="token function">preProcessForWindows</span><span class="token punctuation">(</span>GenericOptionsParser<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">520</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>util<span class="token punctuation">.</span>GenericOptionsParser<span class="token punctuation">.</span><span class="token function">parseGeneralOptions</span><span class="token punctuation">(</span>GenericOptionsParser<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">571</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>util<span class="token punctuation">.</span>GenericOptionsParser<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>GenericOptionsParser<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">174</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>util<span class="token punctuation">.</span>GenericOptionsParser<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>GenericOptionsParser<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">156</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>yglong<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>wordcount<span class="token punctuation">.</span>WordCount<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>WordCount<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">49</span><span class="token punctuation">)</span></code></pre><p><a href="https://github.com/cdarlint/winutils" target="_blank" rel="noopener">winutils下载地址</a></p><p>需要下载winutils的版本必须与安装的hadoop版本一样，如我本地安装的hadoop 3.2.1，所以需要下载<a href="https://github.com/cdarlint/winutils/tree/master/hadoop-3.2.1/bin" target="_blank" rel="noopener">hadoop 3.2.1对应的winutils</a></p><p>下载所有文件（包括winutils.exe, hadoop.dll等）后，全部拷贝到<code>%HADOOP_HOME%\bin</code>目录下。</p><p>2.1.2 代码设置</p><p>本地hadoop环境配置好后，就可以在本地开发MR程序了。</p><p>首先，需要引入hadoop依赖包，在pom.xml中添加：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hadoopVersion</span><span class="token punctuation">></span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hadoopVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${hadoopVersion}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>日志配置</p><p>如果要在IDEA中看到MR执行日志，需要配置日志。</p><p>pom.xml中添加SLF的实现依赖，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后在src/main/resources下添加log4j.properties文件，如：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">hadoop.root.logger</span><span class="token punctuation">=</span><span class="token attr-value">INFO, CONSOLE</span><span class="token attr-name">hadoop.console.threshold</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">${hadoop.root.logger}</span><span class="token attr-name">log4j.appender.CONSOLE</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.CONSOLE.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">${hadoop.console.threshold}</span><span class="token attr-name">log4j.appender.CONSOLE.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.CONSOLE.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d{ISO8601} %-5p [%C]: %m%n</span></code></pre><p>就这样，开发好MR程序后，即可直接Run起来了。</p><p>代码中不做任何设置，默认情况下是在local运行的，且输入输出文件目录为本地文件目录，而不是HDFS目录，所以在代码中设置输入输出文件路径时，需要指定windows本地路径。如：</p><pre class=" language-java"><code class="language-java">Path infile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"C:\\tmp\\data\\wc\\input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FileInputFormat<span class="token punctuation">.</span><span class="token function">addInputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> infile<span class="token punctuation">)</span><span class="token punctuation">;</span>Path outfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"C:\\tmp\\data\\wc\\output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>outfile<span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>outfile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    outfile<span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>outfile<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> outfile<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了不在程序中写死路径，也可以通过参数提供输入输出文件路径，这样就可以在代码中通过参数获取：</p><p>使用GenericOptionsParser工具类：</p><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> otherArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericOptionsParser</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemainingArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Path infile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>otherArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FileInputFormat<span class="token punctuation">.</span><span class="token function">addInputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> infile<span class="token punctuation">)</span><span class="token punctuation">;</span>Path outfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>otherArgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>outfile<span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>outfile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    outfile<span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>outfile<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> outfile<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在程序参数上提供本地路径。</p><p>运行后，可以在本地目录下生成结果文件。</p><p>如果为了在本地提交到远程集群运行MR程序而在classpath中如src/main/resources中添加了集群的配置文件（core-site.xml, hdfs-site.xml, yarn-site.xml, mapred-site.xml）</p><p>这种情况下，会优先读取配置文件的信息，从而会尝试提交到远程集群运行。会报类似如下错误：</p><pre><code>Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Pathname /C:/tmp/data/wc/output from C:/tmp/data/wc/output is not a valid DFS filename.    at org.apache.hadoop.hdfs.DistributedFileSystem.getPathName(DistributedFileSystem.java:236)    at org.apache.hadoop.hdfs.DistributedFileSystem$29.doCall(DistributedFileSystem.java:1576)    at org.apache.hadoop.hdfs.DistributedFileSystem$29.doCall(DistributedFileSystem.java:1573)    at org.apache.hadoop.fs.FileSystemLinkResolver.resolve(FileSystemLinkResolver.java:81)    at org.apache.hadoop.hdfs.DistributedFileSystem.getFileStatus(DistributedFileSystem.java:1588)    at org.apache.hadoop.fs.FileSystem.exists(FileSystem.java:1683)    at com.yglong.hadoop.mapred.wordcount.WordCount.main(WordCount.java:89)</code></pre><p>为了强制在本地运行，可以设置两个配置项：</p><pre class=" language-java"><code class="language-java">Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果在windows本地执行MR程序，必须将mapreduce.framework.name设置为local</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"mapreduce.framework.name"</span><span class="token punctuation">,</span> <span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 有些版本也需要将fs.defaultFS设置为file:///，让MR程序查找本地路径，而不是HDFS路径。</span><span class="token comment" spellcheck="true">// 经测试，hadoop-3.2.1必须设置</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"fs.defaultFS"</span><span class="token punctuation">,</span> <span class="token string">"file:///"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然为了不在程序中写死，也可以在通过命令参数<code>-D</code>提供：</p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>Dmapreduce<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>name<span class="token operator">=</span>local <span class="token operator">-</span>Dfs<span class="token punctuation">.</span>defaultFS<span class="token operator">=</span>file<span class="token operator">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//</span></code></pre><p>从windows上提交到集群上运行</p><p>在windows本地运行时，默认时在本地hadoop中运行的。如果在windows本地提交到远程的集群中运行，需要先将集群的配置文件添加到本地classpath中，如添加到src/main/resources目录下。</p><p>配置文件包括：core-site.xml, hdfs-site.xml, yarn-site.xml, mapred-site.xml</p><p>问题1：</p><pre class=" language-java"><code class="language-java"><span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">613</span> INFO  <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">]</span><span class="token operator">:</span> Job job_1596433378472_0001 failed with state FAILED due to<span class="token operator">:</span> Application application_1596433378472_0001 failed <span class="token number">2</span> <span class="token function">times</span> <span class="token punctuation">(</span>global limit <span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> local limit is <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> due to AM Container <span class="token keyword">for</span> appattempt_1596433378472_0001_000002 exited with  exitCode<span class="token operator">:</span> <span class="token number">1</span>Failing <span class="token keyword">this</span> attempt<span class="token punctuation">.</span>Diagnostics<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">37.497</span><span class="token punctuation">]</span>Exception from container<span class="token operator">-</span>launch<span class="token punctuation">.</span>Container id<span class="token operator">:</span> container_1596433378472_0001_02_000001Exit code<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">[</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">37.561</span><span class="token punctuation">]</span>Container exited with a non<span class="token operator">-</span>zero exit code <span class="token number">1</span><span class="token punctuation">.</span> Error file<span class="token operator">:</span> prelaunch<span class="token punctuation">.</span>err<span class="token punctuation">.</span>Last <span class="token number">4096</span> bytes of prelaunch<span class="token punctuation">.</span>err <span class="token operator">:</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash<span class="token operator">:</span> line <span class="token number">0</span><span class="token operator">:</span> fg<span class="token operator">:</span> no job control<span class="token punctuation">[</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">37.561</span><span class="token punctuation">]</span>Container exited with a non<span class="token operator">-</span>zero exit code <span class="token number">1</span><span class="token punctuation">.</span> Error file<span class="token operator">:</span> prelaunch<span class="token punctuation">.</span>err<span class="token punctuation">.</span>Last <span class="token number">4096</span> bytes of prelaunch<span class="token punctuation">.</span>err <span class="token operator">:</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash<span class="token operator">:</span> line <span class="token number">0</span><span class="token operator">:</span> fg<span class="token operator">:</span> no job controlFor more detailed output<span class="token punctuation">,</span> check the application tracking page<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>bigdata02<span class="token operator">:</span><span class="token number">8088</span><span class="token operator">/</span>cluster<span class="token operator">/</span>app<span class="token operator">/</span>application_1596433378472_0001 Then click on links to logs of each attempt<span class="token punctuation">.</span><span class="token punctuation">.</span> Failing the application<span class="token punctuation">.</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">630</span> INFO  <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">]</span><span class="token operator">:</span> Counters<span class="token operator">:</span> <span class="token number">0</span></code></pre><p>如果遇到如上的类似<code>/bin/bash</code>之类的错误，那就是忘记了配置支持跨平台的参数：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果从windows本地提交MR程序到集群运行，必须设置mapreduce.app-submission.cross-platform为true，支持跨平台</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"mapreduce.app-submission.cross-platform"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个参数默认值是false。</p><p>问题2：</p><pre class=" language-java"><code class="language-java"><span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09</span><span class="token punctuation">,</span><span class="token number">920</span> INFO  <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>JobSubmitter<span class="token punctuation">]</span><span class="token operator">:</span> Cleaning up the staging area <span class="token operator">/</span>opt<span class="token operator">/</span>software<span class="token operator">/</span>hadoop<span class="token operator">/</span>yarn<span class="token operator">/</span>staging<span class="token operator">/</span>ylong<span class="token operator">/</span><span class="token punctuation">.</span>staging<span class="token operator">/</span>job_1596438997159_0003Exception in thread <span class="token string">"main"</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>security<span class="token punctuation">.</span>AccessControlException<span class="token operator">:</span> Permission denied<span class="token operator">:</span> user<span class="token operator">=</span>ylong<span class="token punctuation">,</span> access<span class="token operator">=</span>EXECUTE<span class="token punctuation">,</span> inode<span class="token operator">=</span><span class="token string">"/opt"</span><span class="token operator">:</span>bigdata<span class="token operator">:</span>supergroup<span class="token operator">:</span>drwx<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>namenode<span class="token punctuation">.</span>FSPermissionChecker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>FSPermissionChecker<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">399</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>namenode<span class="token punctuation">.</span>FSPermissionChecker<span class="token punctuation">.</span><span class="token function">checkTraverse</span><span class="token punctuation">(</span>FSPermissionChecker<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">315</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>namenode<span class="token punctuation">.</span>FSPermissionChecker<span class="token punctuation">.</span><span class="token function">checkPermission</span><span class="token punctuation">(</span>FSPermissionChecker<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">242</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>namenode<span class="token punctuation">.</span>FSPermissionChecker<span class="token punctuation">.</span><span class="token function">checkPermission</span><span class="token punctuation">(</span>FSPermissionChecker<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">193</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>namenode<span class="token punctuation">.</span>FSDirectory<span class="token punctuation">.</span><span class="token function">checkPermission</span><span class="token punctuation">(</span>FSDirectory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1879</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>namenode<span class="token punctuation">.</span>FSDirectory<span class="token punctuation">.</span><span class="token function">checkPermission</span><span class="token punctuation">(</span>FSDirectory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1863</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>namenode<span class="token punctuation">.</span>FSDirectory<span class="token punctuation">.</span><span class="token function">checkOwner</span><span class="token punctuation">(</span>FSDirectory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1808</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>namenode<span class="token punctuation">.</span>FSDirAttrOp<span class="token punctuation">.</span><span class="token function">setPermission</span><span class="token punctuation">(</span>FSDirAttrOp<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">63</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>namenode<span class="token punctuation">.</span>FSNamesystem<span class="token punctuation">.</span><span class="token function">setPermission</span><span class="token punctuation">(</span>FSNamesystem<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1905</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>server<span class="token punctuation">.</span>namenode<span class="token punctuation">.</span>NameNodeRpcServer<span class="token punctuation">.</span><span class="token function">setPermission</span><span class="token punctuation">(</span>NameNodeRpcServer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">876</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>protocolPB<span class="token punctuation">.</span>ClientNamenodeProtocolServerSideTranslatorPB<span class="token punctuation">.</span><span class="token function">setPermission</span><span class="token punctuation">(</span>ClientNamenodeProtocolServerSideTranslatorPB<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">533</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hdfs<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>proto<span class="token punctuation">.</span>ClientNamenodeProtocolProtos$ClientNamenodeProtocol$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">callBlockingMethod</span><span class="token punctuation">(</span>ClientNamenodeProtocolProtos<span class="token punctuation">.</span>java<span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>ipc<span class="token punctuation">.</span>ProtobufRpcEngine$Server$ProtoBufRpcInvoker<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ProtobufRpcEngine<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">528</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>ipc<span class="token punctuation">.</span>RPC$Server<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>RPC<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1070</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>ipc<span class="token punctuation">.</span>Server$RpcCall<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Server<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">999</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>ipc<span class="token punctuation">.</span>Server$RpcCall<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Server<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">927</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at javax<span class="token punctuation">.</span>security<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>Subject<span class="token punctuation">.</span><span class="token function">doAs</span><span class="token punctuation">(</span>Subject<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">422</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>security<span class="token punctuation">.</span>UserGroupInformation<span class="token punctuation">.</span><span class="token function">doAs</span><span class="token punctuation">(</span>UserGroupInformation<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1730</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>ipc<span class="token punctuation">.</span>Server$Handler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Server<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2915</span><span class="token punctuation">)</span></code></pre><p>HDFS目录权限问题，暴力点直接把报错的目录设置为777，如上报错的目录是/opt，所以，将/opt和子目录全部设置为777：</p><pre class=" language-shell"><code class="language-shell">$ hadoop fs -chmod -R 777 /opt</code></pre><p>问题3：</p><pre class=" language-java"><code class="language-java">Error<span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>RuntimeException<span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassNotFoundException<span class="token operator">:</span> Class <span class="token class-name">com<span class="token punctuation">.</span>yglong<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>wordcount<span class="token punctuation">.</span>WordCount</span>$TokenizerMapper not found    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2638</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>task<span class="token punctuation">.</span>JobContextImpl<span class="token punctuation">.</span><span class="token function">getMapperClass</span><span class="token punctuation">(</span>JobContextImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">187</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>MapTask<span class="token punctuation">.</span><span class="token function">runNewMapper</span><span class="token punctuation">(</span>MapTask<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">759</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>MapTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MapTask<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">347</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>YarnChild$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>YarnChild<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">174</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at javax<span class="token punctuation">.</span>security<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>Subject<span class="token punctuation">.</span><span class="token function">doAs</span><span class="token punctuation">(</span>Subject<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">422</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>security<span class="token punctuation">.</span>UserGroupInformation<span class="token punctuation">.</span><span class="token function">doAs</span><span class="token punctuation">(</span>UserGroupInformation<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1730</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>YarnChild<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>YarnChild<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">168</span><span class="token punctuation">)</span></code></pre><p>这个错很明显了，运行时找不到自定义的Mapper类。</p><p>在本地远程提交集群运行时，必须设置要提交的程序jar包，如下：</p><pre class=" language-java"><code class="language-java">job<span class="token punctuation">.</span><span class="token function">setJar</span><span class="token punctuation">(</span><span class="token string">"C:\\ylong\\workspace\\study\\hadoop\\target\\hadoop-test-0.0.1-SNAPSHOT.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个jar包需要在本地先打出来，如使用maven打包。</p><p>其实就是将我们自己开发的Mapper和Reducer类打包到jar里，它们需要被提交到集群中并运行。</p><p>总结，在本地提交集群运行MR程序，需要做的事情：</p><ul><li>拷贝集群配置文件到classpath</li><li>设置mapreduce.app-submission.cross-platform为true</li><li>将自定义类打成jar包，并设置到job里</li><li>如果遇到HDFS目录权限问题，设置目录权限</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS知识点总结</title>
      <link href="/posts/bigdata/hdfs-summary.html"/>
      <url>/posts/bigdata/hdfs-summary.html</url>
      
        <content type="html"><![CDATA[<h3 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h3><p>我们都知道<code>HDFS</code>是一种分布式文件系统。那么什么是<code>分布式文件系统</code>呢？分布式文件系统相对于本地文件系统，其最大的区别是跨多个机器而构成一个向用户提供统一视图的文件系统，从用户角度，分布式文件系统与本地文件系统并无太大区别，然而二者底层数据的存储与管理机制却是天差地别，分布式文件系统的数据是分布于多个机器上的。</p><p>分布式文件系统的设计目标包括：</p><ol><li><p>能够存储超大文件</p><p>对于本地文件系统，由于磁盘容量限制，一个文件系统能够存储的文件是有上限的。而对于分布式文件系统，由于可以将多个机器联合起来存储文件，理论上可以存储任一大小的文件。</p></li><li><p>解决本地文件系统的单点故障问题</p><p>本地文件系统是一个单一的系统，一旦机器宕机，文件系统将不能在提供服务，数据无法访问。而分布式文件系统的一个重要目标就是解决这个单点故障问题，系统中某个机器出现故障并不会导致数据丢失，也不会影响用户的使用。</p></li></ol><h3 id="HDFS-简介"><a href="#HDFS-简介" class="headerlink" title="HDFS 简介"></a>HDFS 简介</h3><p><code>HDFS</code>（Hadoop Distributed File System）是一个开源的分布式文件系统，它基于谷歌的<code>GFS</code>理论。HDFS 是Hadoop框架中的一个核心组件，是分布式计算中数据存储管理的基础。</p><p>它具有高容错、高可靠性、高可扩展性、高吞吐率等特性。</p><h3 id="HDFS-优缺点"><a href="#HDFS-优缺点" class="headerlink" title="HDFS 优缺点"></a>HDFS 优缺点</h3><h3 id="HDFS-整体架构"><a href="#HDFS-整体架构" class="headerlink" title="HDFS 整体架构"></a>HDFS 整体架构</h3><h3 id="HDFS-数据块"><a href="#HDFS-数据块" class="headerlink" title="HDFS 数据块"></a>HDFS 数据块</h3><h3 id="HDFS-数据复制"><a href="#HDFS-数据复制" class="headerlink" title="HDFS 数据复制"></a>HDFS 数据复制</h3><h3 id="HDFS-读写数据流程"><a href="#HDFS-读写数据流程" class="headerlink" title="HDFS 读写数据流程"></a>HDFS 读写数据流程</h3><h3 id="HDFS-元数据管理"><a href="#HDFS-元数据管理" class="headerlink" title="HDFS 元数据管理"></a>HDFS 元数据管理</h3><h3 id="HDFS-HA-机制"><a href="#HDFS-HA-机制" class="headerlink" title="HDFS HA 机制"></a>HDFS HA 机制</h3><h3 id="HDFS-联邦机制"><a href="#HDFS-联邦机制" class="headerlink" title="HDFS 联邦机制"></a>HDFS 联邦机制</h3>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDFS </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之：二分查找</title>
      <link href="/posts/algorithm/binary-search.html"/>
      <url>/posts/algorithm/binary-search.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、算法介绍"><a href="#一、算法介绍" class="headerlink" title="一、算法介绍"></a>一、算法介绍</h3><p><code>二分查找</code>算法是一种效率比较高的查找算法，也称为<code>折半查找</code>。所谓<code>查找算法</code>，就是从一系列数中（即数组）查找某个数字。然而二分查找只适用于排序好的数组，对于乱序数组，要求先排好序才能使用二分查找。</p><p><code>二分查找</code>就是每次取数组中间位置的数与要查找的数比较，如果比要查找的数小，就排除左边一半数组，只在右边剩下一半数组中继续查找。相反，如果数组中间的数比要查找的数大，就排除右边一半数组，接下来继续从左边剩下一半数组中查找。如此，每比较一次就缩小一半查找范围。</p><p>如下图所示，假如要查找数字8，查找过程为：</p><p><img src="/posts/algorithm/binary-search/mechanism.jpeg" alt></p><h3 id="二、-Java实现"><a href="#二、-Java实现" class="headerlink" title="二、 Java实现"></a>二、 Java实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> searching<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 二分查找 * * 从有序的数组中找到某个数 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *     * @param array 已排序的数组     * @param v 要查找的数字     * @return 要查找的数字在数组中的位置， -1表示不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> high <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算数组中间位置</span>            <span class="token keyword">int</span> current <span class="token operator">=</span> array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取出中间位置的数</span>            <span class="token comment" spellcheck="true">// 与数组中间的数比较</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果相等，就直接返回中间位置</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果中间位置的数比要查找的数大， 就将数组最高位移动到当前数组的中间位置</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 相反，就将数组最低位移动到当前数组的中间位置</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果无法找到，返回-1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三、-Python实现"><a href="#三、-Python实现" class="headerlink" title="三、 Python实现"></a>三、 Python实现</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>    low <span class="token operator">=</span> <span class="token number">0</span>    high <span class="token operator">=</span> len<span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        current <span class="token operator">=</span> array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>        <span class="token keyword">if</span> current <span class="token operator">==</span> v<span class="token punctuation">:</span>            <span class="token keyword">return</span> mid        <span class="token keyword">if</span> current <span class="token operator">></span> v<span class="token punctuation">:</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>binary_search<span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Zookeeper集群</title>
      <link href="/posts/bigdata/install-zookeeper-cluster.html"/>
      <url>/posts/bigdata/install-zookeeper-cluster.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p><code>Zookeeper</code>的用途非常广泛，它是分布式协调的最常用组件。</p><p>对于学习大数据，最基本的是学习<code>Hadoop</code>，而搭建高可用的<code>Hadoop</code>集群，必然需要首先搭建<code>Zookeeper</code>集群。本文将详细介绍如何搭建一个<code>Zookeeper</code>集群，为搭建<code>Hadoop</code>集群做好基础准备。</p><h3 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h3><p>本文将一步一步搭建一个具有3个节点的<code>Zookeeper</code>集群，所有节点已安装<code>Ubuntu 18.04</code>操作系统。</p><p>在安装<code>Zookeeper</code>之前，需要做一些环境准备。</p><h4 id="1-设置hostname"><a href="#1-设置hostname" class="headerlink" title="1. 设置hostname"></a>1. 设置hostname</h4><p>首先需要设置3个节点的<code>hostname</code>，比如分别为：<code>bigdata01</code>, <code>bigdata02</code>, <code>bigdata03</code></p><pre class=" language-shell"><code class="language-shell">vim /etc/hostname</code></pre><p>分别登录每个节点，在<code>/etc/hostname</code>中修改hostname为实际的hostname，如<code>bigdata01</code></p><h4 id="2-创建用户"><a href="#2-创建用户" class="headerlink" title="2. 创建用户"></a>2. 创建用户</h4><p>一般情况下，最好创建一个专用的用户来运行<code>Zookeeper</code>，比如：<code>bigdata</code>。</p><blockquote><p>你也可以跳过这一步，直接用<code>root</code>或已有用户来运行<code>Zookeeper</code>。</p></blockquote><p>以<code>root</code>用户分别登录每个节点，执行命令：</p><pre class=" language-shell"><code class="language-shell">useradd -m bigdata -d /home/bigdata -s /bin/bash</code></pre><p>然后设置新用户密码：</p><pre class=" language-shell"><code class="language-shell">passwd bigdata</code></pre><h4 id="3-设置免密登录"><a href="#3-设置免密登录" class="headerlink" title="3. 设置免密登录"></a>3. 设置免密登录</h4><p>接下来，需要配置各个节点之间可以以新创建的用户<code>免密登录</code>，即可以通过<code>ssh key</code>的方式彼此登录。</p><p>1）首先，以新创建的用户（如：<code>bigdata</code>）登录到第一个节点（如：<code>bigdata01</code>），执行<code>ssh-keygen</code>生成<code>ssh key</code>：</p><pre class=" language-shell"><code class="language-shell">ssh-keygen</code></pre><p>2）然后进入<code>/home/bigdata/.ssh</code>目录下，执行<code>ssh-copy-id</code>命令将<code>ssh key</code>分别拷贝到3个节点上：</p><pre class=" language-shell"><code class="language-shell">cd ~/.sshssh-copy-id -i id_rsa.pub bigdata01ssh-copy-id -i id_rsa.pub bigdata02ssh-copy-id -i id_rsa.pub bigdata03</code></pre><p>3）分别登录另外两个节点，重复以上步骤1）和2）。</p><h4 id="4-安装JDK并配置JAVA-HOME"><a href="#4-安装JDK并配置JAVA-HOME" class="headerlink" title="4. 安装JDK并配置JAVA_HOME"></a>4. 安装JDK并配置JAVA_HOME</h4><p>如果系统中没有安装<code>JDK</code>，需要先安装。</p><p>如下命令安装<code>OpenJDK 8</code>：</p><pre class=" language-shell"><code class="language-shell">apt-get updateapt-get install openjdk-8-jdk-headless</code></pre><p>然后配置<code>JAVA_HOME</code>:</p><pre class=" language-shell"><code class="language-shell">vim /etc/profile</code></pre><p>在<code>/etc/profile</code>最后加上如下两行：</p><pre class=" language-java"><code class="language-java">export JAVA_HOME<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>java<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>openjdk<span class="token operator">-</span>amd64export PATH<span class="token operator">=</span>$PATH<span class="token operator">:</span>$JAVA_HOME<span class="token operator">/</span>bin</code></pre><p>保存退出，执行如下命令使<code>JAVA_HOME</code>环境变量生效：</p><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><blockquote><p>所有节点都需要执行以上步骤安装<code>JDK</code>，以及配置<code>JAVA_HOME</code>环境变量。</p></blockquote><h3 id="三、安装Zookeeper集群"><a href="#三、安装Zookeeper集群" class="headerlink" title="三、安装Zookeeper集群"></a>三、安装Zookeeper集群</h3><h4 id="1-下载Zookeeper"><a href="#1-下载Zookeeper" class="headerlink" title="1. 下载Zookeeper"></a>1. 下载Zookeeper</h4><p>到<a href="https://zookeeper.apache.org/releases.html#download" target="_blank" rel="noopener">Zookeeper官网</a>找到适合版本的下载链接。</p><p>在<code>bigdata01</code>节点上执行<code>wget</code>命令进行下载：</p><pre class=" language-shell"><code class="language-shell">wget http://mirror.netinch.com/pub/apache/zookeeper/zookeeper-3.5.8/apache-zookeeper-3.5.8-bin.tar.gz</code></pre><h4 id="2-安装Zookeeper"><a href="#2-安装Zookeeper" class="headerlink" title="2. 安装Zookeeper"></a>2. 安装Zookeeper</h4><p>在<code>bigdata01</code>节点上创建安装目录：</p><pre class=" language-shell"><code class="language-shell">mkdir -p /opt/software/</code></pre><p>将下载的Zookeeper包拷贝到安装目录并解压：</p><pre class=" language-shell"><code class="language-shell">cp apache-zookeeper-3.5.8-bin.tar.gz /opt/software/</code></pre><p>解压：</p><pre class=" language-shell"><code class="language-shell">cd /opt/software/tar -zxvf apache-zookeeper-3.5.8-bin.tar.gzrm apache-zookeeper-3.5.8-bin.tar.gzmv apache-zookeeper* zookeeper</code></pre><h4 id="3-配置Zookeeper"><a href="#3-配置Zookeeper" class="headerlink" title="3. 配置Zookeeper"></a>3. 配置Zookeeper</h4><p>在<code>Zookeper</code>安装目录下创建<code>data</code>和<code>logs</code>目录</p><pre class=" language-shell"><code class="language-shell">cd /opt/software/zookeepermkdir datamkdir logs</code></pre><p>在<code>conf</code>目录下创建<code>zoo.cfg</code>配置文件：</p><pre class=" language-shell"><code class="language-shell">cd /opt/software/zookeeper/confvim zoo.cfg</code></pre><p>在<code>zoo.cfg</code>中配置如下内容，各个配置项的说明已在注释中列出：</p><pre class=" language-java"><code class="language-java"># tickTime表示服务器之间或客户端与服务器之间心跳的时间间隔，单位为毫秒tickTime<span class="token operator">=</span><span class="token number">2000</span># follower与leader的初始连接心跳数initLimit<span class="token operator">=</span><span class="token number">10</span># follower与leader请求和应答的最大心跳数syncLimit<span class="token operator">=</span><span class="token number">5</span># 快照数据保存目录dataDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>software<span class="token operator">/</span>zookeeper<span class="token operator">/</span>data# 日志保存目录dataLogDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>software<span class="token operator">/</span>zookeeper<span class="token operator">/</span>logs# 客户端连接端口clientPort<span class="token operator">=</span><span class="token number">2181</span># 客户端最大连接数<span class="token punctuation">,</span>默认为<span class="token number">60</span>个maxClientCnxns<span class="token operator">=</span><span class="token number">60</span># 默认为<span class="token boolean">false</span>，设置成<span class="token boolean">true</span>，zk将监听所有可用ip地址的连接quorumListenOnAllIPs<span class="token operator">=</span><span class="token boolean">false</span># 服务器节点配置，格式为：# server<span class="token punctuation">.</span>&lt;myid<span class="token operator">>=</span><span class="token operator">&lt;</span>host<span class="token operator">></span><span class="token operator">:</span><span class="token operator">&lt;</span>leader和follower通信端口<span class="token operator">></span><span class="token operator">:</span><span class="token operator">&lt;</span>选举端口<span class="token operator">></span><span class="token punctuation">(</span>observer节点最后加上<span class="token operator">:</span>observer <span class="token punctuation">)</span>server<span class="token number">.1</span><span class="token operator">=</span>bigdata01<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span>server<span class="token number">.2</span><span class="token operator">=</span>bigdata02<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span>server<span class="token number">.3</span><span class="token operator">=</span>bigdata03<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span></code></pre><p>保存退出。</p><p>在<code>data</code>目录下创建<code>myid</code>文件：</p><pre class=" language-shell"><code class="language-shell">vim /opt/software/zookeeper/data/myid</code></pre><blockquote><p><strong>注意：</strong><br><code>myid</code>文件的内容必须与<code>zoo.cfg</code>里的配置保持一致。<br>例如：对于第一个节点<code>bigdata01</code>，在<code>zoo.cfg</code>里配置为：<code>server.1=bigdata01:2888:3888</code>，<code>server.1</code>表示<code>myid</code>为<code>1</code>，因此在<code>myid</code>文件中必须配置为<code>1</code>。</p></blockquote><p>保存退出。</p><p>至此，在第一个节点<code>bigdata01</code>上的配置就完成了。接下来将整个<code>Zookeeper</code>安装目录同步到另外两个节点上去。</p><p>在<code>bigdata01</code>上执行如下命令：</p><pre class=" language-shell"><code class="language-shell">rsync -az --delete /opt/software/zookeeper bigdata02:/opt/software/rsync -az --delete /opt/software/zookeeper bigdata03:/opt/software/</code></pre><blockquote><p>如果<code>rsync</code>命令不存在，执行<code>apt-get install rsync</code>先进行安装。</p></blockquote><p>接下来，由于每个节点的<code>myid</code>是不能相同的，因此，还需要修改同步过去的<code>myid</code>文件。分别登录另外两个节点，修改<code>myid</code>文件内容与<code>zoo.cfg</code>里的配置保持一致。也就是<code>bigdata02</code>节点的<code>myid</code>为<code>2</code>，<code>bigdata03</code>节点的<code>myid</code>为<code>3</code>。</p><p>最后，把整个<code>Zookeeper</code>的安装目录的<code>owner</code>修改为新创建的用户，分别在3个节点上执行命令：</p><pre class=" language-shell"><code class="language-shell">chown -R bigdata:bigdata /opt/software/zookeeper</code></pre><h4 id="4-配置Zookeeper环境变量"><a href="#4-配置Zookeeper环境变量" class="headerlink" title="4. 配置Zookeeper环境变量"></a>4. 配置Zookeeper环境变量</h4><p>分别在每个节点上配置<code>ZOOKEEPER_HOME</code>和<code>PATH</code>环境变量。</p><pre class=" language-shell"><code class="language-shell">vim /etc/profile</code></pre><p>添加如下内容：</p><pre class=" language-java"><code class="language-java">export ZOOKEEPER_HOME<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>software<span class="token operator">/</span>zookeeperexport PATH<span class="token operator">=</span>$PATH<span class="token operator">:</span>$ZOOKEEPER_HOME<span class="token operator">/</span>bin</code></pre><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><h4 id="5-启动Zookeeper"><a href="#5-启动Zookeeper" class="headerlink" title="5. 启动Zookeeper"></a>5. 启动Zookeeper</h4><p>现在，可以启动<code>Zookeeper</code>了。</p><p>分别以用户<code>bigdata</code>登录每个节点，执行命令：</p><pre class=" language-shell"><code class="language-shell">zkServer.sh start</code></pre><h3 id="四、验证Zookeeper集群"><a href="#四、验证Zookeeper集群" class="headerlink" title="四、验证Zookeeper集群"></a>四、验证Zookeeper集群</h3><p>启动<code>Zookeeper</code>后，可以简单验证一下<code>Zookeeper</code>集群是否正常工作。</p><p>在任意节点执行命令：</p><pre class=" language-shell"><code class="language-shell">zkCli.sh -server bigdata01:2181</code></pre><p>如果一切正常，会进入<code>Zookeeper</code>的命令行，可以输入<code>ls /</code>查看，结果类似如下：</p><pre class=" language-shell"><code class="language-shell">[zk: bigdata01:2181(CONNECTED) 0] ls /[zookeeper]</code></pre><p>如果出现以上结果，说明<code>Zookeeper</code>是正常工作的。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据基础篇：大数据与大数据技术体系</title>
      <link href="/posts/bigdata/bigdata-summary.html"/>
      <url>/posts/bigdata/bigdata-summary.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、大数据概述"><a href="#一、大数据概述" class="headerlink" title="一、大数据概述"></a>一、大数据概述</h2><h3 id="1-什么是大数据"><a href="#1-什么是大数据" class="headerlink" title="1. 什么是大数据"></a>1. 什么是大数据</h3><p>现如今，相信人人都听说过<code>大数据</code>这个词，它实在太火热了，因为我们目前正处于<code>大数据时代</code>。</p><p>大数据其实已经兴起很多年了，只是随着无处不在的传感器、无处不在的数据埋点，获取数据变得越来越容易、量越来越大、内容越来越多样化，使得现目前的大数据的“大”越来越大了。</p><p>那么什么是大数据？</p><p>大数据本身其实是一个抽象的概念，从一般意义上讲，<code>大数据</code>是指一种规模大到无法在<code>有限时间内</code>用常规软件工具对其进行获取、存储、管理和处理的<code>数据集合</code>。</p><h3 id="2-大数据的特性"><a href="#2-大数据的特性" class="headerlink" title="2. 大数据的特性"></a>2. 大数据的特性</h3><p>大数据，虽然从字面上只体现了一个<code>大</code>，但实际上大数据除了数据体量大的特性外，还有其他特性。现目前，业界公认为大数据具有<code>4V</code>特性，分别是<code>Volume</code>（数据体量大）、<code>Velocity</code>（数据速度快）、<code>Variety</code>（数据类型多）和<code>Value</code>（数据价值密度低），如下图所示：</p><p><img src="/posts/bigdata/bigdata-summary/4v.png" alt></p><p>然而，随着大数据的不断发展，人们对大数据的了解和探索越来越深入，大数据技术也不断趋于成熟，人们提出了更多更具体的大数据特性，现目前已经从<code>4V</code>发展为<code>8V</code>特性，额外提出了<code>Veracity</code>（数据准确性），<code>Vitality</code>（数据动态性），<code>Visualization</code>（数据可视化），<code>Validity</code>（数据合法性），如下图所示：</p><p><img src="/posts/bigdata/bigdata-summary/8v.jpg" alt></p><h3 id="3-大数据的发展历程分析"><a href="#3-大数据的发展历程分析" class="headerlink" title="3. 大数据的发展历程分析"></a>3. 大数据的发展历程分析</h3><p>我们可以从几个维度来了解大数据的发展。</p><h4 id="3-1-从信息化浪潮的发展来看"><a href="#3-1-从信息化浪潮的发展来看" class="headerlink" title="3.1 从信息化浪潮的发展来看"></a>3.1 从<code>信息化浪潮</code>的发展来看</h4><p>过去几十年，人类经历了三次信息化浪潮，大数据正是从第三次信息化浪潮开始全面开启。</p><p><img src="/posts/bigdata/bigdata-summary/info-evolution.png" alt></p><h4 id="3-2-从信息科技的发展来看"><a href="#3-2-从信息科技的发展来看" class="headerlink" title="3.2 从信息科技的发展来看"></a>3.2 从<code>信息科技</code>的发展来看</h4><p>信息科技需要解决<code>信息存储</code>、<code>信息传输</code>和<code>信息处理</code>3个核心问题，人类社会在信息科技领域的不断进步，为大数据时代的到来提供了<code>技术支撑</code>。</p><p>主要包括如下图所示几个方面的发展：</p><p><img src="/posts/bigdata/bigdata-summary/it.png" alt></p><h5 id="存储设备容量不断增加"><a href="#存储设备容量不断增加" class="headerlink" title="存储设备容量不断增加"></a>存储设备容量不断增加</h5><p>随着科学技术的不断进步，存储设备的制造工艺不断升级，容量大幅增加，速度不断提升，价格却在不断下降。</p><p>总体而言，数据量和存储设备容量二者之间是相辅相成、互相促进的。</p><ul><li><p>一方面，随着数据的不断产生，需要存储的数据量不断增加，对存储设备的容量提出了更高的要求，促使存储设备生产商制造更大容量的产品满足市场需求；</p></li><li><p>另一方面，更大容量的存储设备进一步加快了数据量增长的速度，在存储设备价格高企的年代，由于考虑到成本问题，一些不必要或当前不能明显体现价值的数据往往会被丢弃。但是，随着单位存储空间价格的不断降低，人们开始倾向于把更多的数据保存起来，以期在未来某个时刻可以用更先进的数据分析工具从中挖掘价值。</p></li></ul><h5 id="CPU处理能力大幅提升"><a href="#CPU处理能力大幅提升" class="headerlink" title="CPU处理能力大幅提升"></a>CPU处理能力大幅提升</h5><p>性能不断提升的CPU，大大提高了处理数据的能力，使得我们可以更快地处理不断累积的海量数据。</p><h5 id="网络带宽不断增加"><a href="#网络带宽不断增加" class="headerlink" title="网络带宽不断增加"></a>网络带宽不断增加</h5><p>进入21世纪，世界各国更是纷纷加大宽带网络建设力度，不断扩大网络覆盖范围和传输速度。大数据时代，信息传输不再遭遇网络发展初期的瓶颈和制约。</p><h4 id="3-3-从数据产生方式的发展来看"><a href="#3-3-从数据产生方式的发展来看" class="headerlink" title="3.3 从数据产生方式的发展来看"></a>3.3 从<code>数据产生方式</code>的发展来看</h4><p><code>数据产生方式</code>的变革，是促成大数据时代来临的重要因素。总体而言，人类社会的数据产生方式大致经历了3个阶段：<code>运营式系统阶段</code>、<code>用户原创内容阶段</code>和<code>感知式系统阶段</code>，如下图所示：</p><p><img src="/posts/bigdata/bigdata-summary/data-generate.png" alt></p><p>现如今，因为发展到感知式系统阶段，大量数据自动产生，数据量呈爆发式增长，使得人类社会真正步入<code>大数据时代</code>。</p><h3 id="4-大数据的发展历程回顾"><a href="#4-大数据的发展历程回顾" class="headerlink" title="4. 大数据的发展历程回顾"></a>4. 大数据的发展历程回顾</h3><p>前面从多维度分析了大数据的发展，而从时间维度上看，大数据的发展历程可以划分为4个重要阶段：<code>萌芽阶段</code>，<code>突破阶段</code>，<code>成熟阶段</code>，<code>应用阶段</code>。</p><p>如下图所示：</p><p><img src="/posts/bigdata/bigdata-summary/big-data-develop.png" alt></p><p>更详细的大数据发展历程如下图所示：</p><p><img src="/posts/bigdata/bigdata-summary/big-data-dev.jpg" alt></p><h3 id="5-大数据的作用"><a href="#5-大数据的作用" class="headerlink" title="5. 大数据的作用"></a>5. 大数据的作用</h3><p>大数据虽然孕育于信息通信技术，但它对社会、经济、生活产生的影响绝不限于技术层面。更本质上，它是为我们看待世界提供了一种全新的方法，即决策行为将日益基于数据分析，而不是像过去更多凭借经验和直觉。</p><p>具体来讲，大数据将有以下几个方面的作用：</p><p><img src="/posts/bigdata/bigdata-summary/big-data-zuoyong.png" alt></p><h3 id="6-大数据的影响"><a href="#6-大数据的影响" class="headerlink" title="6. 大数据的影响"></a>6. 大数据的影响</h3><p>大数据对<code>科学研究</code>、<code>思维方式</code>和<code>社会发展</code>等方面都具有重要而深远的影响，如：</p><ul><li><p>在科学研究方面<br>大数据使得人类科学研究在经历了实验、理论、计算3种范式之后，迎来了<code>第四种范式</code>——数据密集型科学。</p></li><li><p>在思维方式方面<br>大数据具有<code>全样而非抽样</code>、<code>效率而非精确</code>、<code>相关而非因果</code>三大显著特征，完全颠覆了传统的思维方式。</p></li><li><p>在社会发展方面<br><code>大数据决策</code>逐渐成为一种新的决策方式，大数据应用有力促进了信息技术与各行业的深度融合，大数据开发大大推动了新技术和新应用的不断涌现。</p></li><li><p>在就业市场方面<br>大数据的兴起使得<code>数据科学家</code>成为热门人才。</p></li><li><p>在人才培养方面<br>大数据的兴起将在很大程度上改变我国高校信息技术相关专业的现有教学和科研体制。</p></li></ul><p>总体来讲，大数据时代的到来改变了人们的生活方式、思维模式和研究范式，我们可以总结出10个重大变化，如下图所示：</p><p><img src="/posts/bigdata/bigdata-summary/big-data-change.png" alt></p><h3 id="7-大数据的发展现状与趋势"><a href="#7-大数据的发展现状与趋势" class="headerlink" title="7. 大数据的发展现状与趋势"></a>7. 大数据的发展现状与趋势</h3><h4 id="7-1-大数据的现状"><a href="#7-1-大数据的现状" class="headerlink" title="7.1 大数据的现状"></a>7.1 大数据的现状</h4><p>目前，大数据应用已经比较广泛，在各个领域均有应用，且在各个领域的应用均初见成效，如下图所举示例：</p><p><img src="/posts/bigdata/bigdata-summary/application.png" alt></p><h4 id="7-2-大数据的未来与趋势"><a href="#7-2-大数据的未来与趋势" class="headerlink" title="7.2 大数据的未来与趋势"></a>7.2 大数据的未来与趋势</h4><p>虽然大数据已经得到广泛应用，但大部分尚处于初级阶段。现目前，各大IT巨头正在纷纷布局大数据。在全球范围内，研究发展大数据技术、运用大数据推动经济发展、完善社会治理、提升政府服务和监管能力正成为趋势。包括以下三个方面：</p><ol><li><p>已有众多成功的大数据应用，但就其效果和深度而言，当前大数据应用尚处于初级阶段，根据大数据<code>分析预测未来</code>、<code>指导实践</code>的深层次应用将成为发展重点。</p></li><li><p>大数据<code>治理体系</code>远未形成，特别是隐私保护、数据安全与数据共享利用效率之间尚存在明显矛盾，成为制约大数据发展的重要短板，各界已经意识到构建大数据治理体系的重要意义，相关的研究与实践将持续加强。</p></li><li><p>数据规模高速增长，现有技术体系难以满足大数据应用的需求，大数据理论与技术远未成熟，未来信息技术体系将需要颠覆式创新和变革。</p></li></ol><h2 id="二、大数据技术概述"><a href="#二、大数据技术概述" class="headerlink" title="二、大数据技术概述"></a>二、大数据技术概述</h2><h3 id="1-什么是大数据技术"><a href="#1-什么是大数据技术" class="headerlink" title="1. 什么是大数据技术"></a>1. 什么是大数据技术</h3><p><code>大数据技术</code>，一般意义来说，是指从各种各样的巨量数据中，快速获取有价值信息的技术。</p><p>具体而言，是指伴随着大数据的<code>采集</code>、<code>存储</code>、<code>分析</code>和<code>应用</code>的相关技术，是一系列使用非传统的工具来对大量的结构化、半结构化和非结构化数据进行处理，从而获得分析和预测结果的一系列数据处理和分析技术。</p><p>一般来说，对于大数据的处理，包含<code>数据抽取与集成</code>、<code>数据分析</code>和<code>数据解释</code>三个基本流程，而大数据技术就是解决这些流程中的问题的相关技术。</p><h3 id="2-大数据关键技术"><a href="#2-大数据关键技术" class="headerlink" title="2. 大数据关键技术"></a>2. 大数据关键技术</h3><p>大数据本身是一种现象而不是一种技术。<code>大数据技术</code>是一系列使用非传统的工具来对大量的结构化、半结构化和非结构化数据进行处理，从而获得分析和预测结果的数据处理技术。大数据价值的完整体现需要多种技术的协同。大数据关键技术涵盖数据存储、处理、应用等多方面的技术。</p><p>根据大数据的处理过程，可将大数据关键技术分为<code>大数据采集技术</code>，<code>大数据预处理技术</code>，<code>大数据存储与管理技术</code>，<code>大数据处理技术</code>，<code>大数据分析与挖掘技术</code>，<code>大数据展示技术</code>等。</p><p>概括总结如下图所示：</p><p><img src="/posts/bigdata/bigdata-summary/bigdata-key-tech.jpg" alt></p><h3 id="3-大数据技术体系"><a href="#3-大数据技术体系" class="headerlink" title="3. 大数据技术体系"></a>3. 大数据技术体系</h3><p>前面介绍了大数据的基本处理流程和相关的关键技术，当我们在设计一个大数据系统时，都会涉及到这些数据处理的各个环节以及相应的技术。</p><p>对于一个完整的大数据系统，在设计其技术体系架构时，一般需要考虑6个主要层次：<code>数据收集曾</code>，<code>数据存储层</code>，<code>资源管理与服务协调层</code>，<code>计算引擎层</code>，<code>数据分析层</code>，<code>数据可视化层</code>。</p><p>如下图所示：</p><p><img src="/posts/bigdata/bigdata-summary/bigdata-arch.png" alt></p><h4 id="数据收集层"><a href="#数据收集层" class="headerlink" title="数据收集层"></a>数据收集层</h4><p>数据源一般特点:</p><ul><li><code>分布式</code>：分布在不同机器或设备上，通过网络连接在一起。</li><li><code>异构性</code>：任何能产生数据的系统均可以称为数据源，如手环，传感器，视频摄像头等。</li><li><code>多样化</code>：关系型（用户基本信息）和非关系型（图片，音频，视频等）。</li><li><code>流式产生</code>：数据源如同“水龙头”，源源不断。收集系统应实时或近实时将数据发送到后端，以便对数据进行及时分析。</li></ul><p>适用大数据领域的收集系统一般具备特性:</p><ul><li><code>扩展性</code>：适配不同数据源，并能接入大量数据源而不会产生系统瓶颈。</li><li><code>可靠性</code>：数据不丢失</li><li><code>安全性</code>：敏感数据处理机制</li><li><code>低延性</code>：保证较低延迟前提将数据传输到后端系统</li></ul><h4 id="数据存储层"><a href="#数据存储层" class="headerlink" title="数据存储层"></a>数据存储层</h4><p>大数据存储系统一般要求具备特性：</p><ul><li><code>扩展性</code>：存储能力扩展</li><li><code>容错性</code>：考虑成本等因素，大数据系统从最初假设构建在廉价机器上，要求系统本身就有良好的容错机制确保在机器出现故障时不会导致丢失数据。</li><li><code>存储模型</code>：支持多种数据模型</li></ul><h4 id="资源管理与服务协调层"><a href="#资源管理与服务协调层" class="headerlink" title="资源管理与服务协调层"></a>资源管理与服务协调层</h4><p>传统的”一个应用一个集群”缺点：资源利用率低，运维成本高，从而引入数据共享轻量级弹性资源管理平台，资源统一管理层好处：</p><ul><li><code>资源利用率高</code>：共享集群模式通过多种应用共享资源，使得集群中资源得到充分利用。</li><li><code>运维成本低</code>：需要少数管理员即可完成多个框架的统一管理。</li><li><code>数据共享</code>：共享集群模式解决跨集群间的数据移动不仅需要花费更长的时间，且硬件成本也大大增加问题。</li></ul><h4 id="计算引擎层"><a href="#计算引擎层" class="headerlink" title="计算引擎层"></a>计算引擎层</h4><p>针对不同应用场景，单独构建一个计算机引擎，每种计算引擎只专注于解决某一类问题。</p><ul><li><code>批处理</code>：对实时要求低，追求高吞吐量，比如搜索引擎建索引，数据挖掘，机器学习等。</li><li><code>交互式处理</code>：对时间要求较高，秒级别。需要跟人进行交互，如应用数据查询，参数化报表，OLAP等。</li><li><code>实时处理</code>：对时间要求最高，延迟在秒级内，如广告系统，舆情监测等。</li></ul><h4 id="数据分析层"><a href="#数据分析层" class="headerlink" title="数据分析层"></a>数据分析层</h4><p>该层直接跟用户应用程序对接，提供易用的数据处理工具。一般结合工具使用，使用处理框架对原始海量数据进行分析，产生较小规模的数据集，在此基础上，再使用交互式处理工具对数据集进行快速查询，获取查询结果。</p><h4 id="数据可视层"><a href="#数据可视层" class="headerlink" title="数据可视层"></a>数据可视层</h4><p>运用计算机图形学和图像处理技术，将数据转换为图形或图像在屏幕上显示出来，并进行交互式的理论，方法和技术。</p><h3 id="4-大数据技术体系对应的技术框架"><a href="#4-大数据技术体系对应的技术框架" class="headerlink" title="4. 大数据技术体系对应的技术框架"></a>4. 大数据技术体系对应的技术框架</h3><p><img src="/posts/bigdata/bigdata-summary/bigdata-tech-suite.png" alt></p><blockquote><p>本文内容整理至网络。</p><p>参考资料如下：</p><ul><li>《大数据导论：思维、技术与应用》</li><li>《大数据技术原理与应用》（第2版）</li><li>《大数据技术体系详解：原理、架构与实践》</li><li><a href="https://wenku.baidu.com/view/52602eb65122aaea998fcc22bcd126fff6055d6b.html" target="_blank" rel="noopener">大数据发展现状和趋势</a></li><li><a href="http://www.npc.gov.cn/npc/c30834/201910/653fc6300310412f841c90972528be67.shtml" target="_blank" rel="noopener">大数据：发展现状与未来趋势</a></li><li><a href="https://blog.csdn.net/cincoutcin/article/details/80586050" target="_blank" rel="noopener">大数据发展历史</a></li><li><a href="https://blog.csdn.net/implok/article/details/79932798" target="_blank" rel="noopener">大数据的特性究竟有多少个V</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>干货！史上最详细脑图《大型网站技术架构》</title>
      <link href="/posts/architecture/big-website-architecture.html"/>
      <url>/posts/architecture/big-website-architecture.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍一下"><a href="#一、介绍一下" class="headerlink" title="一、介绍一下"></a>一、介绍一下</h3><p>《大型网站技术架构》这本书可能很多人都看过，小编个人觉得真的是非常不错的一本书。</p><p>看完这本书后，你会对如何设计大型网站架构，有非常清晰的思路。</p><p>如果还没有读过的小伙伴，赶紧去读一读吧。</p><blockquote><p>PS：小编这里有这本书的Kiddle电子版，如有需要可联系我获取哦！</p></blockquote><p><img src="/posts/architecture/big-website-architecture/book.jpg" alt></p><h3 id="二、架构思路"><a href="#二、架构思路" class="headerlink" title="二、架构思路"></a>二、架构思路</h3><h4 id="1-大型网站系统特点"><a href="#1-大型网站系统特点" class="headerlink" title="1. 大型网站系统特点"></a>1. 大型网站系统特点</h4><p>既然谈的是大型网站架构，所谓”大型”网站，首先需要了解大型网站系统具有什么样的特点。</p><p>一般大型网站系统都具有如下共同特点：</p><ul><li><p>高并发，大流量</p></li><li><p>高可用</p></li><li><p>海量数据</p></li><li><p>用户分布广，网络情况复杂</p></li><li><p>安全环境恶劣</p></li><li><p>需求快速变更，发布频繁</p></li><li><p>渐进式发展和演化</p></li></ul><h4 id="2-大型网站架构核心要素"><a href="#2-大型网站架构核心要素" class="headerlink" title="2. 大型网站架构核心要素"></a>2. 大型网站架构核心要素</h4><p>基于大型网站系统的特点，需要围绕这些特点来设计系统架构。 基于此，可以概括出设计大型网站需要考虑的核心架构要素。</p><p>设计大型网站系统的核心架构要素：</p><ul><li><p>高性能</p></li><li><p>高可用性</p></li><li><p>可伸缩性</p></li><li><p>可扩展性</p></li><li><p>安全性</p></li></ul><p>  本书的核心内容其实就是针对这几个核心架构要素一一展开。   </p><h3 id="三、设计『-高性能-』的网站架构"><a href="#三、设计『-高性能-』的网站架构" class="headerlink" title="三、设计『 高性能 』的网站架构"></a>三、设计『 高性能 』的网站架构</h3><p>对于大型网站，设计高性能的架构一般从以下几个方面考虑：</p><ul><li><p>优化网站响应速度</p></li><li><p>优化网站处理并发请求的能力</p></li><li><p>优化数据存储的性能</p></li></ul><p>所谓高性能，</p><p>从网站的用户角度来看，无非就是访问网站的『 <strong>响应速度要快</strong> 』。</p><p>从系统角度看，由于同时访问的用户数巨大，因此同时到达系统服务器的『 <strong>并发请求数</strong> 』非常大。</p><p>从后端数据存储来看，优化『 <strong>海量数据存储</strong> 』的能力，避免后端数据存储性能缓慢而成为系统性能瓶颈。</p><h4 id="1-优化网站响应速度"><a href="#1-优化网站响应速度" class="headerlink" title="1. 优化网站响应速度"></a>1. 优化网站响应速度</h4><blockquote><p><strong>重要提示：</strong></p><p>网站性能优化第一定律：优先考虑使用缓存技术优化性能</p></blockquote><p>优化网站响应速度的主要手段是使用『 <strong>缓存</strong> 』，使用缓存是提高网站响应速度效果最显著的办法。</p><p>例如对于前端，可以使用<code>CDN</code>，反向代理，这些都是利用的缓存技术。</p><p>对于应用服务器的性能优化，一个主要的手段也是使用缓存，在提高响应速度的同时，也减轻了对后端数据库的压力。</p><p>如果是有海量数据的超大型系统，甚至需要用到分布式缓存系统。</p><p>另外一个优化响应速度的手段是『 <strong>异步消息处理</strong> 』。异步消息处理是指，在应用服务器与后端服务之间使用消息队列，应用服务器总是将用户请求扔进消息队列，并立即返回用户，后端服务异步从消息队列中取出请求数据进行处理。由于请求发送到消息队列后就立即返回了，因此用户会感知到更快的响应速度。</p><p>使用消息队列还具有削峰的作用，当瞬间有大量请求到达系统后，这些请求数据会进入消息队列，而不会瞬间涌入后端服务器，从而起到保护后端服务的作用。</p><h4 id="2-优化网站处理并发请求的能力"><a href="#2-优化网站处理并发请求的能力" class="headerlink" title="2. 优化网站处理并发请求的能力"></a>2. 优化网站处理并发请求的能力</h4><p>除此之外，还要支持巨大的并发请求数，一般手段是使用『 <strong>集群</strong> 』。</p><p>应用服务器一般需要从单台服务器扩展为多台服务器，构成应用服务器集群，然后引入负载均衡服务器，将用户请求分摊到不同的应用服务器进行处理。</p><p>集群可以很容易进行伸缩（增加或减少服务器数量），因此可以有效支持在不同场景下的不同并发请求量。如秒杀场景下，可以快速增加服务器到集群中，从而分摊用户请求，减轻其他服务器的压力。</p><h4 id="3-优化数据存储的性能"><a href="#3-优化数据存储的性能" class="headerlink" title="3. 优化数据存储的性能"></a>3. 优化数据存储的性能</h4><p>单从优化数据存储性能方面来看，主要的优化手段有：</p><ul><li><p>使用性能更高的硬盘，如使用固态硬盘，读写速度更快。</p></li><li><p>替换传统关系型数据库，使用<code>NoSQL</code>数据库。<code>NoSQL</code>数据库的数据读写速度一般优于传统关系型数据库。</p></li><li><p>使用分布式文件系统。分布式文件系统具有并发读写能力，因此可以有效提高数据存储的并发能力。</p></li></ul><h3 id="四、设计『-高可用-』的网站架构"><a href="#四、设计『-高可用-』的网站架构" class="headerlink" title="四、设计『 高可用 』的网站架构"></a>四、设计『 高可用 』的网站架构</h3><blockquote><p><strong>重要提示：</strong></p><p>实现高可用架构的主要手段是数据和服务的『 <strong>冗余备份</strong> 』和『 <strong>失效转移</strong> 』</p></blockquote><p>所谓高可用，即在任何时刻，应该尽量保证系统是可用的。</p><p>使用集群实现数据和服务的冗余备份，当集群中某个服务器宕机时，失效转移机制会将用户请求分发到集群中其他可用服务器上，从而可以保证用户请求被正确处理。</p><p>使用集群有个前提条件是，各个服务器上运行的服务应尽量是无状态的这样各个服务器之间就不会存在差异。但是对于应用服务器，如果保存了用户<code>Session</code>数据，那么它们就是有状态的。这种情况下需要考虑如何处理<code>Session</code>状态数据。可以采用独立的分布式<code>Session</code>服务器集群来专门缓存用户<code>Session</code>数据，从而使应用服务器变成无状态的。</p><p>冗余备份与失效转移手段适用于网站系统的各个逻辑层，包括应用层，服务层和数据层。</p><h3 id="五、设计『-可伸缩-』的网站架构"><a href="#五、设计『-可伸缩-』的网站架构" class="headerlink" title="五、设计『 可伸缩 』的网站架构"></a>五、设计『 可伸缩 』的网站架构</h3><p>系统的可伸缩性，通常容易与可扩展性混淆。</p><p>可伸缩性意味着当网站流量变大时，可以很容易通过增加系统部署实例来支持。可扩展性意味着系统架构可以很容易扩展，从而支持新业务功能系统。</p><p>为达到可伸缩的目的，通常需要将系统进行拆分。纵向进行逻辑分层，如分为应用层，服务层和数据层。横向进行业务分割，把不同的业务功能拆分出来，并且独立部署。</p><p>对于拆分出来的单一功能，也需要采用集群方式进行部署。但是对于不同类型的集群，实现伸缩的方式不太一样。</p><p>对于应用服务器集群，通常使用『 <strong>负载均衡</strong> 』来实现伸缩。当有新服务器加入集群时，负载均衡可以自动将用户请求分发到新服务器。</p><p>对于分布式缓存集群，当有新服务器加入集群时，为了保证缓存命中率，通常使用『 <strong>一致性</strong> 』算法，从而使请求能够绝大部分指向已经缓存了所需数据的服务器。</p><p>对于数据存储服务器集群，对传统关系数据库来说，通常的手段是进行『 <strong>主、从数据库复制</strong> 』实现读写分离，或者『 <strong>数据分库分片</strong> 』等。然而对于<code>NoSQL</code>数据库，很多<code>NoSQL</code>数据库天生就是为可伸缩海量数据存储而设计的，如<code>HBase</code>。</p><h3 id="六、设计『-可扩展-』的网站架构"><a href="#六、设计『-可扩展-』的网站架构" class="headerlink" title="六、设计『 可扩展 』的网站架构"></a>六、设计『 可扩展 』的网站架构</h3><p>网站系统架构应该是易于扩展的。通常的设计手段包括：</p><ul><li><p>使用分布式消息队列降低系统与系统之间的耦合性。</p><p>当开发新系统后，只需要订阅消息队列的数据即可进行整合，而不需要修改已有其他系统。</p></li><li><p>利用分布式服务抽取可复用的服务。</p><p>对于通用业务功能，可以把它们抽取成可复用的服务。 对于新业务需求，通常可以使用这些可复用的服务，进行简单的组装即可实现。</p></li><li><p>使用具有可扩展的数据库。</p><p>如使用支持<code>ColumnFamily</code>结构的<code>NoSQL</code>数据库，可以在现有数据表结构之上增删数据列。</p></li><li><p>开放平台。</p><p>通过开放平台接入第三方开发者开发的系统，扩展系统周边应用，形成生态圈。</p></li></ul><h3 id="七、设计『-安全-』的网站架构"><a href="#七、设计『-安全-』的网站架构" class="headerlink" title="七、设计『 安全 』的网站架构"></a>七、设计『 安全 』的网站架构</h3><p>系统安全性，对于任何网站系统都是至关重要的。</p><p>对于大型网站，由于用户分布广，网络安全环境会更加复杂和恶劣，设计具有良好安全性的网站架构会更加具有挑战性。</p><p>一般可以考虑以下几个方面：</p><ul><li><p>防御常见的网站攻击手段。如<code>XSS</code>，注入攻击，<code>CSRF</code>攻击等。</p></li><li><p>信息加密。对在网络中传输的数据进行加密后再传输。</p></li><li><p>信息过滤。过滤掉垃圾信息，防止垃圾信息进入系统内部。</p></li></ul><h3 id="八、思维导图"><a href="#八、思维导图" class="headerlink" title="八、思维导图"></a>八、思维导图</h3><p>以下是我亲自整理的思维导图:</p><p><img src="/posts/architecture/big-website-architecture/xmind.png" alt></p><p>如果上面的大图看着不方便，我也把它放在了Github，访问我的<a href="https://github.com/longyg/Study" target="_blank" rel="noopener" ">Github地址</a>下载，然后用<code>XMind</code>打开轻松看，包括图里的详细标注也可以看得到啦。</p>]]></content>
      
      
      <categories>
          
          <category> 软件架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 书籍推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动实现Java线性表</title>
      <link href="/posts/java/java-list-impl.html"/>
      <url>/posts/java/java-list-impl.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、-线性表接口定义"><a href="#一、-线性表接口定义" class="headerlink" title="一、 线性表接口定义"></a>一、 线性表接口定义</h3><p>一般情况下，一个线性表需要具有如下基本功能：</p><ul><li>添加或插入元素</li><li>删除元素</li><li>查找元素</li><li>返回线性表中元素个数</li><li>判断线性表是否为空</li><li>清空线性表</li></ul><p>因此，我们首先定义如下接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>collection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 往线性表中添加元素     * @param element     */</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在线性表的指定索引处插入元素     * @param element     * @param index     */</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>E element<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从线性表中删除元素     * @param element     * @return 返回删除的元素     */</span>    E <span class="token function">remove</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除指定索引处的元素     * @param index     * @return 返回删除的元素     */</span>    E <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从线性表种查找元素     * @param element     * @return 返回元素在线性表中的索引     */</span>    <span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取指定索引处的元素     * @param index     * @return 返回指定索引处的元素     */</span>    E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取线性表中的元素个数     * @return     */</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断线性表是否为空     * @return     */</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 清空线性表     */</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="二、线性表实现"><a href="#二、线性表实现" class="headerlink" title="二、线性表实现"></a>二、线性表实现</h3><h4 id="实现一：基于数组的顺序存储结构"><a href="#实现一：基于数组的顺序存储结构" class="headerlink" title="实现一：基于数组的顺序存储结构"></a>实现一：基于数组的顺序存储结构</h4><p>最常见的线性表实现是基于数组的顺序存储结构。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基于数组的顺序存储结构实现的线性表 * @param &lt;E> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SequenceList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DEFAULT_SIZE <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SequenceList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        capacity <span class="token operator">=</span> DEFAULT_SIZE<span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                capacity <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            data <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            Object[] oldData = data;</span><span class="token comment" spellcheck="true">//            data = new Object[capacity];</span><span class="token comment" spellcheck="true">//            for (int i = 0; i &lt; size; i++) {</span><span class="token comment" spellcheck="true">//                data[i] = oldData[i];</span><span class="token comment" spellcheck="true">//            }</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">insert</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>E element<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of array bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token punctuation">,</span> data<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> E <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of array bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        E oldValue <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of array bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        for (int i = 0; i &lt; size; i++) {</span><span class="token comment" spellcheck="true">//            data[i] = null;</span><span class="token comment" spellcheck="true">//        }</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SequenceList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequenceList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"gang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ni"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"gang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token string">"yong"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"gang"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"gang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="实现二：基于单链表的链式存储结构"><a href="#实现二：基于单链表的链式存储结构" class="headerlink" title="实现二：基于单链表的链式存储结构"></a>实现二：基于单链表的链式存储结构</h4><p>我们也可以基于单向链表的链式存储结构来实现线性表。让每个元素都保留指向下一个元素的引用，从而构成一个链表。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>collection<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基于单链表的链式存储结构实现的线性表 * @param &lt;E> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedSeqList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Node first<span class="token punctuation">;</span>    <span class="token keyword">private</span> Node last<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        E data<span class="token punctuation">;</span>        Node next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>E data<span class="token punctuation">,</span> Node next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">LinkedSeqList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        first <span class="token operator">=</span> null<span class="token punctuation">;</span>        last <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 尾插法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            last <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            last<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>E element<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of array bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> preNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node current <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>                preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>                size<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        Node toDel <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            toDel <span class="token operator">=</span> first<span class="token punctuation">;</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> first<span class="token punctuation">;</span>            Node curNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    toDel <span class="token operator">=</span> curNode<span class="token punctuation">;</span>                    preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> toDel<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    toDel<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    preNode <span class="token operator">=</span> curNode<span class="token punctuation">;</span>                    curNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>toDel <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> toDel<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> E <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node toDel <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            toDel <span class="token operator">=</span> first<span class="token punctuation">;</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            toDel <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> toDel<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            toDel<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> toDel<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node curr <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curr <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node currNode <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currNode <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> currNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        first <span class="token operator">=</span> null<span class="token punctuation">;</span>        last <span class="token operator">=</span> null<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node curr <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实现三：基于双向链表的链式存储结构"><a href="#实现三：基于双向链表的链式存储结构" class="headerlink" title="实现三：基于双向链表的链式存储结构"></a>实现三：基于双向链表的链式存储结构</h4><p>我们也可以基于双向链表实现线性表。每个元素不仅保留指向下一个元素的引用，也保留了指向前一个元素的引用，从而构成一个双向的链表。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>collection<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基于双向链表的链式存储结构实现的线性表 * @param &lt;E> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DuLinkedList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> header<span class="token punctuation">;</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> tail<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> E data<span class="token punctuation">;</span>        <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pre<span class="token punctuation">;</span>        <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>E data<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pre<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> pre<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">DuLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        header <span class="token operator">=</span> null<span class="token punctuation">;</span>        tail <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 尾插法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> tail<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> l<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            header <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        if (header == null) {</span><span class="token comment" spellcheck="true">//            header = new Node(element, null, null);</span><span class="token comment" spellcheck="true">//            tail = header;</span><span class="token comment" spellcheck="true">//        } else {</span><span class="token comment" spellcheck="true">//            Node newNode = new Node(element, tail, null);</span><span class="token comment" spellcheck="true">//            tail.next = newNode;</span><span class="token comment" spellcheck="true">//            tail = newNode;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        size++;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>E element<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of array bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> null<span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>            header <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tail <span class="token operator">=</span> header<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node next <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> preNode<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>            preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            next<span class="token punctuation">.</span>pre <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> toDel <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>header<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            toDel <span class="token operator">=</span> header<span class="token punctuation">;</span>            header <span class="token operator">=</span> header<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> header<span class="token punctuation">;</span>            Node curNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    toDel <span class="token operator">=</span> curNode<span class="token punctuation">;</span>                    preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> toDel<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    toDel<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> preNode<span class="token punctuation">;</span>                    toDel<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                    toDel<span class="token punctuation">.</span>pre <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    preNode <span class="token operator">=</span> curNode<span class="token punctuation">;</span>                    curNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>toDel <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> toDel<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> E <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> toDel <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            toDel <span class="token operator">=</span> header<span class="token punctuation">;</span>            header <span class="token operator">=</span> header<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            header<span class="token punctuation">.</span>pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            toDel <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> toDel<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>toDel<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                toDel<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> preNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            toDel<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>            toDel<span class="token punctuation">.</span>pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> toDel<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node curr <span class="token operator">=</span> header<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curr <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从头节点正向搜索</span>            Node cur <span class="token operator">=</span> header<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> cur<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从尾节点反向搜索</span>            Node cur <span class="token operator">=</span> tail<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> cur<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        header <span class="token operator">=</span> null<span class="token punctuation">;</span>        tail <span class="token operator">=</span> null<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node curr <span class="token operator">=</span> header<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见排序算法Java实现</title>
      <link href="/posts/java/java-sorting.html"/>
      <url>/posts/java/java-sorting.html</url>
      
        <content type="html"><![CDATA[<p>本文总结常见排序算法，并用Java语言实现这些算法。</p><h3 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1. 选择排序"></a>1. 选择排序</h3><h4 id="1-1-直接选择排序"><a href="#1-1-直接选择排序" class="headerlink" title="1.1 直接选择排序"></a>1.1 直接选择排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>select<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 选择排序之：直接选择排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 优化后的算法, 减少了交换次数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                data<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">selectSort2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-2-堆排序"><a href="#1-2-堆排序" class="headerlink" title="1.2 堆排序"></a>1.2 堆排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>select<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 选择排序之：堆排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从小到大排序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先建大顶堆</span>            <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再把堆的root节点与数组的最后一个元素交换</span>            <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从大到小排序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">heapSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先建小顶堆</span>            <span class="token function">buildMinHeap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再把堆的root节点与数组的最后一个元素交换</span>            <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 建大顶堆</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果当前k节点存在子节点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 初始化biggerIndex为左子节点的索引</span>                <span class="token keyword">int</span> biggerIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果当前k节点存在右子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>biggerIndex <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 比较左右子节点大小</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>biggerIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>biggerIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果右子节点大，把biggerIndex设为右子节点的索引</span>                        biggerIndex<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 比较k节点与最大子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>biggerIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果k比子节点小，则交换</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">,</span> biggerIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 交换后需要循环子树，重新调整子树</span>                    k <span class="token operator">=</span> biggerIndex<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 避免死循环</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 建小顶堆</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buildMinHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果当前k节点存在子节点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 初始化lowerIndex为左子节点的索引</span>                <span class="token keyword">int</span> lowerIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果当前k节点存在右子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lowerIndex <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 比较左右子节点大小</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>lowerIndex<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>lowerIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果右子节点小，把lowerIndex设为右子节点的索引</span>                        lowerIndex<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 比较k节点与最大子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>lowerIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果k比子节点大，则交换</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">,</span> lowerIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 交换后需要循环子树，重新调整子树</span>                    k <span class="token operator">=</span> lowerIndex<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 避免死循环</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">heapSort2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-交换排序"><a href="#2-交换排序" class="headerlink" title="2. 交换排序"></a>2. 交换排序</h3><h4 id="2-1-冒泡排序"><a href="#2-1-冒泡排序" class="headerlink" title="2.1 冒泡排序"></a>2.1 冒泡排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>exchange<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 交换排序之：冒泡排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记是否进行了交换</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果没有进行过交换，说明数组已经是有序的了，即可提前结束</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-快速排序"><a href="#2-2-快速排序" class="headerlink" title="2.2 快速排序"></a>2.2 快速排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>exchange<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 交换排序之：快速排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">subSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end  <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                start<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">>=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                start<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> end<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h3><h4 id="3-1-直接插入排序"><a href="#3-1-直接插入排序" class="headerlink" title="3.1 直接插入排序"></a>3.1 直接插入排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>insert<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 插入排序之：直接插入排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectInsertSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">directInsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果比前一个数小，说明需要插入前面的有序序列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">directInsertSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-二分插入排序"><a href="#3-2-二分插入排序" class="headerlink" title="3.2 二分插入排序"></a>3.2 二分插入排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>insert<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 插入排序之：二分插入排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryInsertSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">binaryInsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> high <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// mid 为low和high的中间索引</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果tmp值大于中间元素的值</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 下一躺将在索引大于mid那一半中搜索</span>                    low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 下一躺将在索引小于mid那一半中搜索</span>                    high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将low到i处的所有元素向后整体移一位</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> low<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将tmp插入合适位置</span>            data<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">binaryInsertSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-Shell排序"><a href="#3-3-Shell排序" class="headerlink" title="3.3 Shell排序"></a>3.3 Shell排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>insert<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 插入排序之：Shell排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> data<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            h <span class="token operator">=</span> h <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h = "</span> <span class="token operator">+</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>i <span class="token operator">-</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> h<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 整体后移h格</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">;</span> j <span class="token operator">-=</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        data<span class="token punctuation">[</span>j <span class="token operator">+</span> h<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    data<span class="token punctuation">[</span>j <span class="token operator">+</span> h<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            h <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-归并排序"><a href="#4-归并排序" class="headerlink" title="4. 归并排序"></a>4. 归并排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 归并排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取中间索引</span>            <span class="token keyword">int</span> center <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对左边一半数组进行递归排序</span>            <span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对右边一半数组进行递归排序</span>            <span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 合并左右已排序的数组</span>            <span class="token function">merge</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> center<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> center<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 临时数组，用于保存merge后的数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmpArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 临时数组的索引变量</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> center <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmpArr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                tmpArr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果左边有多余元素，依次放入临时数组</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> center<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmpArr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果右边有多余元素，依次放入临时数组</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmpArr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将临时数组的内容复制回原数组</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> tmpArr<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-桶式排序"><a href="#5-桶式排序" class="headerlink" title="5. 桶式排序"></a>5. 桶式排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 桶式排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BucketSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmpArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 桶数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>max <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 桶数组记录每个元素出现的次数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buckets<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>buckets<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max <span class="token operator">-</span> min<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> buckets<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>buckets<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> tmpArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            data<span class="token punctuation">[</span><span class="token operator">--</span>buckets<span class="token punctuation">[</span>tmpArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmpArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> min<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-基数排序"><a href="#6-基数排序" class="headerlink" title="6. 基数排序"></a>6. 基数排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基数排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiKeyRadixSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> radix<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 基于桶式排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>radix<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> subKey <span class="token operator">=</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>rate<span class="token punctuation">)</span> <span class="token operator">%</span> radix<span class="token punctuation">;</span>                buckets<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> radix<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                buckets<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> buckets<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> buckets<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> subKey <span class="token operator">=</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">/</span> rate<span class="token punctuation">)</span> <span class="token operator">%</span> radix<span class="token punctuation">;</span>                data<span class="token punctuation">[</span><span class="token operator">--</span>buckets<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rate <span class="token operator">*=</span> radix<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1110</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识总结</title>
      <link href="/posts/java/java-basic-summary.html"/>
      <url>/posts/java/java-basic-summary.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-substring-方法"><a href="#1-substring-方法" class="headerlink" title="1. substring()方法"></a>1. substring()方法</h3><p><code>String</code>类的<code>substring()</code>方法在JDK6与JDK7的区别:</p><ul><li><strong>JDK6</strong>：截取的<code>String</code>对象会共享字符数组 (对于从很长的字符串中截取很小的字符串时，可能会引起内存泄漏，因为内部使用的字符数组不能被回收）</li><li><strong>JDK7</strong>：截取的<code>String</code>对象会创建新的字符数组</li></ul><h3 id="2-Integer缓存机制"><a href="#2-Integer缓存机制" class="headerlink" title="2. Integer缓存机制"></a>2. Integer缓存机制</h3><ul><li>当整数在-128到127范围时，会使用缓存的<code>Integer</code>对象，而不会新建对象。</li><li>缓存机制只有在自动装箱场景下有用。如：<code>Integer i = 10</code></li><li><code>Byte</code>, <code>Short</code>, <code>Long</code>, <code>Character</code>都有类似缓存机制。<code>Character</code>适用范围为<code>0</code>到<code>127</code>.</li></ul><h3 id="3-浮点型"><a href="#3-浮点型" class="headerlink" title="3. 浮点型"></a>3. 浮点型</h3><h3 id="4-SynchronizedList与Vector区别"><a href="#4-SynchronizedList与Vector区别" class="headerlink" title="4. SynchronizedList与Vector区别"></a>4. SynchronizedList与Vector区别</h3><ul><li><code>SynchronizedList</code>可以将所有<code>List</code>的子类转成线程安全类</li><li><code>SynchronizedList</code>遍历时需要手动进行同步，<code>Vector</code>的遍历方法加了同步锁</li><li><code>SynchronizedList</code>可以指定锁定的对象</li></ul><h3 id="5-常见垃圾回收器"><a href="#5-常见垃圾回收器" class="headerlink" title="5. 常见垃圾回收器"></a>5. 常见垃圾回收器</h3><ul><li><p><strong>串行回收器 （-XX:+UseSerialGC）</strong></p><p>Young：</p><ul><li><p>串行</p></li><li><p>复制算法： 1个<code>Eden</code>区，2个<code>Survivor</code>区</p></li></ul><p>Old：</p><ul><li><p>串行</p></li><li><p>标记压缩算法</p></li></ul></li><li><p><strong>并行回收器 (-XX:+UseParallelGC)</strong></p><p>Young:</p><ul><li><p>多CPU并行</p></li><li><p>复制算法 （与串行相同）</p></li></ul><p>Old：与串行回收器相同</p></li><li><p><strong>并行压缩回收器（-XX:+UseParallelOldGC)</strong></p><p>Young: 与并行回收器相同</p><p>Old：并行</p></li><li><p><strong>并发标识清理回收器（CMS）-XX:+UseConcMarkSweepGC</strong></p><p>Young: 与并行回收器相同</p><p>Old：并发</p></li></ul><h3 id="6-类型自动提升"><a href="#6-类型自动提升" class="headerlink" title="6. 类型自动提升"></a>6. 类型自动提升</h3><p>当表达式中包含多个基本类型时，会发生自动提升</p><ul><li><code>byte</code>，<code>short</code>和<code>char</code>会被提升为<code>int</code></li><li>提升到与表达式中最高等级操作数同样的类型：<br><code>byte</code> -&gt; <code>short</code><br><code>char</code> -&gt; <code>int</code> -&gt; <code>long</code> -&gt; <code>float</code> -&gt; <code>double</code></li></ul><h3 id="7-隐式类型转换"><a href="#7-隐式类型转换" class="headerlink" title="7. 隐式类型转换"></a>7. 隐式类型转换</h3><p>复合赋值运算符（如<code>+=</code>， <code>-=</code>， <code>*=</code>）会进行隐式类型转换。</p><ul><li><p>会自动将计算结果值强制类型转换为左侧变量的类型</p><p>  e.g,:</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">short</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不等于 i = i + 2, 会报编译错误</span></code></pre></li></ul><h3 id="8-类型擦除"><a href="#8-类型擦除" class="headerlink" title="8. 类型擦除"></a>8. 类型擦除</h3><p>当把有泛型类型的对象赋值给一个没有泛型类型的变量（原始类型），泛型类型信息将被擦除。</p><h3 id="9-switch语句"><a href="#9-switch语句" class="headerlink" title="9. switch语句"></a>9. switch语句</h3><ul><li><p><code>switch</code>语句只支持：<code>byte</code>, <code>char</code>, <code>short</code>, <code>int</code>, <code>Character</code>, <code>Byte</code>, <code>Short</code>, <code>Integer</code>, <code>String</code>, <code>enum</code></p></li><li><p>在<code>switch</code>语句中使用枚举类时，<code>case</code>分支中访问枚举值时不能使用枚举类名作为限定，而要直接使用枚举值。</p></li></ul><h3 id="11-if-else语句"><a href="#11-if-else语句" class="headerlink" title="11. if/else语句"></a>11. if/else语句</h3><p><code>if/else</code>语句使用的基本规则：总是优先把包含范围小的条件放在前面</p><h3 id="12-循环语句"><a href="#12-循环语句" class="headerlink" title="12. 循环语句"></a>12. 循环语句</h3><p>如果在for, while或do循环中不使用花括号时，第一个语句不能是局部变量声明语句</p><h3 id="13-instanceof"><a href="#13-instanceof" class="headerlink" title="13. instanceof"></a>13. instanceof</h3><ul><li><p>如果引用变量为<code>null</code>，则永远返回<code>false</code></p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> s <span class="token keyword">instanceof</span> <span class="token class-name">String</span>  <span class="token comment" spellcheck="true">// 返回false</span></code></pre></li><li><p>编译时判断编译类型，运行时才判断引用变量引用的对象实际类型</p></li></ul><h3 id="14-单例模式"><a href="#14-单例模式" class="headerlink" title="14. 单例模式"></a>14. 单例模式</h3><p>单例模式的类一般需要实现一个私有的<code>readResolve()</code>方法，防止反序列化时产生新的对象。</p><h3 id="15-方法重载"><a href="#15-方法重载" class="headerlink" title="15. 方法重载"></a>15. 方法重载</h3><ul><li>调用方法时传入的实际参数会被向上转型为方法的形参类型</li><li>编译时匹配类型更精确的方法进行调用，即传入参数与形参类型更接近</li><li>如果多个参数匹配结果产生冲突，则无法通过编译</li><li>被重载的方法必须改变参数列表，其他修改是optional的</li></ul><h3 id="16-方法重写"><a href="#16-方法重写" class="headerlink" title="16. 方法重写"></a>16. 方法重写</h3><ul><li>参数列表必须完全与被重写方法的相同。</li><li>返回类型必须是被重写方法的相同类型或派生类型（子类，实现类）</li><li>访问权限不能比被重写方法低</li><li>子类必须具有访问父类方法的权限，才能重写父类方法</li><li><code>final</code>方法不能被重写</li></ul><h3 id="17-非静态内部类"><a href="#17-非静态内部类" class="headerlink" title="17. 非静态内部类"></a>17. 非静态内部类</h3><ul><li>编译器会默认为内部类的构造器添加外部类作为第一个参数</li><li>不能有静态成员变量</li></ul><h3 id="18-static"><a href="#18-static" class="headerlink" title="18. static"></a>18. static</h3><ul><li>只能用于修饰类内部成员：Field，方法，内部类，初始化块，内部枚举类</li><li>静态方法由变量的声明类型调用</li><li>静态内部类无法访问外部类的非静态成员</li></ul><h3 id="19-异常"><a href="#19-异常" class="headerlink" title="19. 异常"></a>19. 异常</h3><ul><li><code>catch</code>捕获多个异常时，应先捕获子类异常，再捕获父类异常，否则会报编译错误</li><li>可以在程序任何地方catch 任何运行时异常（<code>RuntimeException</code>及其子类异常），或者异常超类<code>Exception</code></li><li><code>catch</code>只能捕获<code>try</code>块内程序可能抛出的非运行时异常或其父类异常</li><li>子类重写父类方法时，不能声明抛出比父类方法类型更多，范围更大的异常</li></ul><h3 id="20-性能测试工具"><a href="#20-性能测试工具" class="headerlink" title="20. 性能测试工具"></a>20. 性能测试工具</h3><ul><li>LoadRunner</li><li>JMeter</li></ul><h3 id="21-自动化测试工具"><a href="#21-自动化测试工具" class="headerlink" title="21. 自动化测试工具"></a>21. 自动化测试工具</h3><ul><li>WinRunner</li><li>QTP</li><li>Selenium</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keycloak与React集成应用（下篇）：基于角色的访问控制</title>
      <link href="/posts/frontend/keycloak-react-integration-02.html"/>
      <url>/posts/frontend/keycloak-react-integration-02.html</url>
      
        <content type="html"><![CDATA[<p>在上一篇《<a href="http://www.yglong.com/keycloak-react-integration-01.html">Keycloak与React集成应用（上篇）：用户登录</a>》中，我们介绍了如何将keycloak集成到基于React的前端应用中，实现用户登录验证功能。本文将在上一篇实现的已有功能之上，继续实现用户访问控制的功能，演示如何使用keycloak轻松地对应用的访问进行控制。</p><h3 id="基于角色的访问控制（RBAC）"><a href="#基于角色的访问控制（RBAC）" class="headerlink" title="基于角色的访问控制（RBAC）"></a>基于角色的访问控制（RBAC）</h3><p><code>Keycloak</code>设计非常灵活，支持多种访问控制方式，其中最简单的方式是基于角色的访问控制。 </p><p>本文将演示这种最简单的，基于角色的访问控制。 </p><p>在上一篇已有的用户登录验证功能之上，我们进一步实现对登录用户的访问进行控制。例如某些用户只能访问应用的某些页面。 </p><p>我们将基于用户所分配的角色来限制用户可以访问的内容。 例如对于本应用，我们最终实现的效果描述如下：</p><ul><li>用户<code>demo</code>只分配了访问product页面的角色（<code>Product_Role</code>），因此当使用<code>demo</code>用户登入应用后，菜单中只显示了<code>Product</code>菜单项，该用户只能访问product页面，如下图所示：</li></ul><p><img src="/posts/frontend/keycloak-react-integration-02/only-product-role.png" alt></p><ul><li>如果<code>demo</code>用户试图手动在浏览器地址栏中输入访问admin页面的url，将看到如下图所示的“对不起，你没有权限访问该页面！”的提示页面：</li></ul><p><img src="/posts/frontend/keycloak-react-integration-02/permission-denied.png" alt></p><ul><li>而当使用同时具有<code>Product_Role</code>和<code>Admin_Role</code>角色的<code>admin</code>用户登录应用后，将可以同时看到<code>Product</code>和<code>Admin</code>两个菜单项，并且两个页面都可以访问，如下图所示：</li></ul><p><img src="/posts/frontend/keycloak-react-integration-02/admin-role.png" alt></p><h3 id="配置Keycloak"><a href="#配置Keycloak" class="headerlink" title="配置Keycloak"></a>配置Keycloak</h3><p>现在让我们来实现上述的访问控制功能吧。 </p><p>首先，我们需要在keycloak中创建用户及角色，并为每个用户分配适当的角色。 </p><p>在上一篇中我们已经创建了<code>demo</code>用户，现在我们再创建一个<code>admin</code>用户。 </p><p>然后创建角色。在Keycloak的<code>Administration Console</code>中，选择<code>demo</code>realm，选择左侧菜单中的<code>Roles</code>，点击<code>Add Role</code>按钮，分别创建两个角色：<code>Product_Role</code>和<code>Admin_Role</code>，创建后如下图所示： </p><p><img src="/posts/frontend/keycloak-react-integration-02/create-role.png" alt> </p><p>接着我们为创建的两个用户分配角色。 </p><p>选择菜单中的<code>Users</code>，点击<code>View all users</code>，将显示所有用户。 </p><p>选择某个用户，例如<code>admin</code>，然后选择<code>Role Mappings</code>选项卡，为用户分配角色。如下图所示，我们为<code>admin</code>用户同时分配了<code>Product_Role</code>和<code>Admin_Role</code>: </p><p><img src="/posts/frontend/keycloak-react-integration-02/assign-role.png" alt> </p><p>同样的步骤，我们为<code>demo</code>用户只分配<code>Product_Role</code>，为了演示使用demo用户访问admin页面时，显示权限不足的提示页面。</p><h3 id="在React应用中实现访问控制"><a href="#在React应用中实现访问控制" class="headerlink" title="在React应用中实现访问控制"></a>在React应用中实现访问控制</h3><p>接下来，让我们编写代码，在React应用中实现前面所演示的访问控制效果。</p><h4 id="创建访问控制配置文件"><a href="#创建访问控制配置文件" class="headerlink" title="创建访问控制配置文件"></a>创建访问控制配置文件</h4><p>首先，我们在<code>public</code>下创建一个访问控制的配置文件<code>access_config.json</code>，内容如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"/app/product/index"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Product_Role"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"/app/admin/index"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Admin_Role"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>配置文件表明，访问product页面必须要有<code>Product_Role</code>角色，访问admin页面必须要有<code>Admin_Role</code>角色。当然我们也可以配置访问某个页面需要具有多个角色。</p><h4 id="加载配置文件，实现访问控制判断方法"><a href="#加载配置文件，实现访问控制判断方法" class="headerlink" title="加载配置文件，实现访问控制判断方法"></a>加载配置文件，实现访问控制判断方法</h4><p>我们再次回到上一篇创建的<code>src/keycloak.js</code>文件中，为<code>KeycloakClient</code>类实现两个新的方法：</p><ul><li>加载访问控制配置文件的方法：<code>loadAccessConfig()</code></li><li>判断是否可以访问某页面的方法： <code>isAccessable()</code></li></ul><p>首先，在<code>KeycloakClient</code>类中添加读取配置文件的方法：</p><pre class=" language-javascript"><code class="language-javascript">    loadAccessConfig <span class="token operator">=</span> <span class="token punctuation">(</span>configUrl<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> configUrl<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Accept'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> config <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig <span class="token operator">=</span> config            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：在方法中使用了同步Ajax请求下载配置文件。 我们需要在构造函数中调用上面的方法，使得在实例化<code>KeycloakClient</code>对象时加载配置文件：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initialized <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keycloak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keycloak</span><span class="token punctuation">(</span><span class="token string">'/keycloak.json'</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadAccessConfig</span><span class="token punctuation">(</span><span class="token string">'/access_config.json'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>接着，在<code>KeycloakClient</code>中添加判断是否可以访问某页面的方法：</p><pre class=" language-javascript"><code class="language-javascript">    isAccessable <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> requiredRoles <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig<span class="token punctuation">[</span>path<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requiredRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> requiredRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">hasRealmRole</span><span class="token punctuation">(</span>requiredRoles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span></code></pre><p>该方法中，我们根据传入的访问路径，从加载的访问控制配置中查找访问该页面需要具有哪些角色，然后调用keycloak内置的<code>hasRealmRole()</code> 方法逐个判断该用户是否具有所要求的所有角色。一旦该用户没有某个要求的角色，就返回<code>false</code>，表示该用户没有访问该页面的权限。 </p><p>最后<code>src/keycloak.js</code>文件的完整代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Keycloak <span class="token keyword">from</span> <span class="token string">'keycloak-js'</span><span class="token keyword">class</span> <span class="token class-name">KeycloakClient</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initialized <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keycloak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keycloak</span><span class="token punctuation">(</span><span class="token string">'/keycloak.json'</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadAccessConfig</span><span class="token punctuation">(</span><span class="token string">'/access_config.json'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    init <span class="token operator">=</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>onLoad<span class="token punctuation">:</span> <span class="token string">"login-required"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>authenticated <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>initialized <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    loadAccessConfig <span class="token operator">=</span> <span class="token punctuation">(</span>configUrl<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> configUrl<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Accept'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> config <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig <span class="token operator">=</span> config            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    isAccessable <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> requiredRoles <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig<span class="token punctuation">[</span>path<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requiredRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> requiredRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">hasRealmRole</span><span class="token punctuation">(</span>requiredRoles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> keycloakClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeycloakClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> keycloakClient</code></pre><h4 id="实现权限不足提示页面"><a href="#实现权限不足提示页面" class="headerlink" title="实现权限不足提示页面"></a>实现权限不足提示页面</h4><p>实现访问控制的核心方法已经实现了，接下来让我们在应用中使用它实现页面的访问控制。 </p><p>在这之前，由于我们需要在用户没有访问某页面的权限时，提示权限不足的页面。因此我们需要先实现一个显示权限不足的新页面。 </p><p>在<code>src/components</code>下新建一个<code>pages</code>目录，在其中新建一个<code>Denied.jsx</code>文件，我们在其中实现一个<code>Denied</code>的React组件，用于显示权限不足的信息，代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Denied</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"denied"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>对不起，你没有权限访问该页面！<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="修改路由，根据权限判断结果进行跳转"><a href="#修改路由，根据权限判断结果进行跳转" class="headerlink" title="修改路由，根据权限判断结果进行跳转"></a>修改路由，根据权限判断结果进行跳转</h4><p>那么，当用户访问某页面时，如何实现根据判断结果实现不同的跳转呢？我们可以修改路由组件的行为来实现。 </p><p>让我们再次回到<code>src/routes/index.js</code>文件中。在上一篇中，我们创建了一个扩展路由组件<code>Route</code>的<code>PropsRoute</code>组件，它实现了将keycloak对象通过props传递到<code>Route</code>的目标组件中（即，component属性指定的组件）。 </p><p>我们可以在该扩展组件的基础之上进一步扩展，加入判断访问权限的逻辑。 </p><p>为了更好的说明组件的含义，我们更改了扩展组件的名字为<code>PrivateRoute</code> ，代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PrivateRoute <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span> path<span class="token punctuation">,</span> component<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> keycloakClient<span class="token punctuation">.</span><span class="token function">isAccessable</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Route             <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>            render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Component<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Route             <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>            render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Denied <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Denied<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>可以看到，我们调用了前面实现的<code>isAccessable()</code> 方法对传入的path进行判断，如果有权限，返回一个渲染目标组件的<code>Route</code>，如果没有权限，则返回渲染<code>Denied</code>组件的Route。 </p><p>然后，我们将路由组件的代码进行修改，使其使用新修改的<code>PrivateRoute</code>组件替代上一篇的<code>PropsRoute</code>组件。 </p><p>修改后的<code>src/routes/index.js</code>完整代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Switch<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> ProductIndex <span class="token keyword">from</span> <span class="token string">'../components/product/ProductIndex'</span><span class="token keyword">import</span> AdminIndex <span class="token keyword">from</span> <span class="token string">'../components/admin/AdminIndex'</span><span class="token keyword">import</span> keycloakClient <span class="token keyword">from</span> <span class="token string">'../keycloak'</span><span class="token keyword">import</span> Denied <span class="token keyword">from</span> <span class="token string">'../components/pages/Denied'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyRouter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>Switch<span class="token operator">></span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Route exact path="/app/product/index" component={ProductIndex}>&lt;/Route> */</span><span class="token punctuation">}</span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Route exact path="/app/admin/index" component={AdminIndex}>&lt;/Route> */</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>PrivateRoute exact path<span class="token operator">=</span><span class="token string">"/app/product/index"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ProductIndex<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>PrivateRoute exact path<span class="token operator">=</span><span class="token string">"/app/admin/index"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>AdminIndex<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> PrivateRoute <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span> path<span class="token punctuation">,</span> component<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> keycloakClient<span class="token punctuation">.</span><span class="token function">isAccessable</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Route             <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>            render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Component<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Route             <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>            render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Denied <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Denied<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="根据权限判断结果显示不同菜单项"><a href="#根据权限判断结果显示不同菜单项" class="headerlink" title="根据权限判断结果显示不同菜单项"></a>根据权限判断结果显示不同菜单项</h4><p>最后，我们在<code>src/App.js</code>中实现根据权限判断结果，显示不同的菜单项。最后达到只显示有权限访问的页面对应的菜单项。 </p><p>类似上面的扩展路由组件，我们创建一个扩展<code>Link</code>的组件<code>PrivateLink</code> 组件。代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PrivateLink <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>to<span class="token punctuation">:</span> path<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> keycloakClient<span class="token punctuation">.</span><span class="token function">isAccessable</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span>path<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>        <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></code></pre><p>扩展组件中，同时使用了前面提供的<code>isAccessable()</code> 方法判断是否可以访问传入的path，如果可以访问，就返回Link组件。如果不可以访问，就返回空，从而不显示内容。 </p><p>然后，我们把<code>App</code>组件中的<code>Link</code>组件替换为新建的<code>PrivateLink</code> 扩展组件。 </p><p>最后<code>src/App.js</code>的完整代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.png'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Routes <span class="token keyword">from</span> <span class="token string">'./routes'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> keycloakClient <span class="token keyword">from</span> <span class="token string">'./keycloak'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>tokenParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>tokenParsed<span class="token punctuation">.</span>preferred_username    <span class="token punctuation">}</span>    <span class="token keyword">return</span> user  <span class="token punctuation">}</span>  <span class="token function">onLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"App-logo"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>h2<span class="token operator">></span>Welcome to Keycloak<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-navi"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Link to="/app/product/index" className="navi">Product&lt;/Link> */</span><span class="token punctuation">}</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Link to="/app/admin/index" className="navi">Admin&lt;/Link> */</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>PrivateLink to<span class="token operator">=</span><span class="token string">"/app/product/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Product<span class="token operator">&lt;</span><span class="token operator">/</span>PrivateLink<span class="token operator">></span>            <span class="token operator">&lt;</span>PrivateLink to<span class="token operator">=</span><span class="token string">"/app/admin/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Admin<span class="token operator">&lt;</span><span class="token operator">/</span>PrivateLink<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-user-info"</span><span class="token operator">></span>            Login User<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onLogout<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"btn btn-success"</span> <span class="token operator">></span>Logout<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-content"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Routes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Routes<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> PrivateLink <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>to<span class="token punctuation">:</span> path<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> keycloakClient<span class="token punctuation">.</span><span class="token function">isAccessable</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span>path<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>        <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></code></pre><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p>至此，keycloak的配置，以及React中的代码已经全部实现，我们再次启动应用来看看效果吧：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre><p>如果一切顺利，你应该可以看到与本文开始所演示的完全相同的效果。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文介绍了使用<code>keycloak</code>实现基于角色的访问控制功能，这是<code>keycloak</code>提供的最简单的访问控制的方式。 </p><p>实际上，keycloak还提供了更细粒度的访问控制方式，如基于权限（<code>permission</code>）的访问控制，它结合了资源（<code>resource</code>），<code>scope</code>和<code>policy</code>，可以实现更细粒度的访问控制。这是Keycloak提供的授权服务（<code>Authorization Service</code>）的高级功能。我会在后续的文章中介绍此功能。 本文的完整代码请参考<a href="https://github.com/longyg/keycloak-react-example" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keycloak </tag>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keycloak与React集成应用（上篇）：用户登录</title>
      <link href="/posts/frontend/keycloak-react-integration-01.html"/>
      <url>/posts/frontend/keycloak-react-integration-01.html</url>
      
        <content type="html"><![CDATA[<p><code>Keycloak</code>是一个开源的身份和访问管理系统，它可以轻松与任何web应用集成，从而为web应用提供访问控制管理功能。 具体的<code>Keycloak</code>介绍请参见<a href="https://www.keycloak.org/" target="_blank" rel="noopener">官方网站</a>。 本文的目的不是介绍<code>keycloak</code>的原理，而是介绍如何将<code>keycloak</code>与基于<code>React</code>的应用进行集成。 本文将实现一个具体的<code>React</code>应用，然后与<code>keycloak</code>集成，最终实现访问该<code>React</code>应用时的用户登录与验证功能。</p><h3 id="Keycloak安装与配置"><a href="#Keycloak安装与配置" class="headerlink" title="Keycloak安装与配置"></a>Keycloak安装与配置</h3><p><code>Keycloak</code>以独立的服务的方式运行，它通过独立的服务向单个或多个应用提供集中式的服务。因此我们首先需要安装部署<code>Keycloak</code>服务。</p><h4 id="Keycloak安装"><a href="#Keycloak安装" class="headerlink" title="Keycloak安装"></a>Keycloak安装</h4><p>首先在官方网站的<a href="https://www.keycloak.org/downloads.html" target="_blank" rel="noopener">下载页面</a>下载<code>Keycloak</code>的软件包。 </p><p><img src="/posts/frontend/keycloak-react-integration-01/download-keycloak.png" alt> </p><p>下载后解压到某目录，然后打开<code>cmd</code>进入<code>bin</code>目录。 <code>Keycloak</code>支持集群模式和单机模式，我们以单机模式运行<code>Keycloak</code>，运行如下命令：</p><pre class=" language-bash"><code class="language-bash">.\standalone.bat</code></pre><p>如果你看到类似如下的输出，就说明<code>Keycloak</code>成功安装并启动起来了：</p><pre class=" language-bash"><code class="language-bash">22:01:27,605 INFO  <span class="token punctuation">[</span>org.jboss.as<span class="token punctuation">]</span> <span class="token punctuation">(</span>Controller Boot Thread<span class="token punctuation">)</span> WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management22:01:27,605 INFO  <span class="token punctuation">[</span>org.jboss.as<span class="token punctuation">]</span> <span class="token punctuation">(</span>Controller Boot Thread<span class="token punctuation">)</span> WFLYSRV0051: Admin console listening on http://127.0.0.1:999022:01:27,606 INFO  <span class="token punctuation">[</span>org.jboss.as<span class="token punctuation">]</span> <span class="token punctuation">(</span>Controller Boot Thread<span class="token punctuation">)</span> WFLYSRV0025: Keycloak 6.0.1 <span class="token punctuation">(</span>WildFly Core 8.0.0.Final<span class="token punctuation">)</span> started <span class="token keyword">in</span> 24304ms - Started 580 of 842 services <span class="token punctuation">(</span>560 services are lazy, passive or on-demand<span class="token punctuation">)</span></code></pre><p>接下来，我们在浏览器中输入url：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>，打开Keycloak管理界面。 </p><p>首次打开界面时，需要创建一个管理账户。 </p><p>创建好账户后，点击“Administration Console”： </p><p><img src="/posts/frontend/keycloak-react-integration-01/admin-console.png" alt> </p><p>输入用户名密码，点击登录： </p><p><img src="/posts/frontend/keycloak-react-integration-01/login-admin-console.png" alt> </p><p>登入后，进入Keycloak管理控制台首页： </p><p><img src="/posts/frontend/keycloak-react-integration-01/kc-home-page.png" alt></p><h4 id="Keycloak配置"><a href="#Keycloak配置" class="headerlink" title="Keycloak配置"></a>Keycloak配置</h4><p>接下来介绍如何在<code>Keycloak</code>管理控制台中进行配置。 </p><p>首次进入控制台，<code>Keycloak</code>默认有一个名为<code>master</code>的realm。我们需要创建我们自己的realm。例如我们这里创建一个名为<code>demo</code>的realm。 </p><p>接下来创建用户，我们可以创建一个或多个用户，注意创建的用户只能登录用户所在的realm。这里我们创建一个用户<code>demo</code>。 </p><p>创建realm和用户后，我们需要为我们的react应用创建一个client，这里命名为<code>keycloak-react-example</code>。创建client后，还需要设置几个必须的参数，参考下图：</p><p> <img src="/posts/frontend/keycloak-react-integration-01/kc-create-client.png" alt> </p><p> 注意，对于web前端应用，<code>Access Type</code>必须是<code>public</code>。 </p><p> <code>Web Origins</code>虽然不是必须的，但是一般都需要设置，以避免因跨域而无法访问的问题。</p><h3 id="开发React应用"><a href="#开发React应用" class="headerlink" title="开发React应用"></a>开发React应用</h3><p>接下来，我们开发一个简单的React应用。</p><h4 id="应用效果"><a href="#应用效果" class="headerlink" title="应用效果"></a>应用效果</h4><p>首先来看看我们的应用的最终效果吧！ </p><p><img src="/posts/frontend/keycloak-react-integration-01/keycloak-react-app.gif" alt></p><p>应用功能包括：</p><ul><li>每当访问应用时，总是会被导向到用户登录界面，要求输入用户名及密码登录应用。</li><li>登录应用后，会自动重定向到 product 页面。</li><li>点击<code>Product</code>或<code>Admin</code>菜单，可以进入 product 或 admin 页面。</li><li>在 product 或 admin 任何页面，点击<code>Logout</code>按钮，就可以退出登录，会被自动重定向到用户登录页面。</li><li>输入用户名密码再次登录，会默认进入刚才退出时访问的页面。</li></ul><h4 id="功能页面开发"><a href="#功能页面开发" class="headerlink" title="功能页面开发"></a>功能页面开发</h4><p>首先，我们开发功能页面，也就是product和admin页面。我们暂时不集成<code>Keycloak</code>，待功能页面开发好后，再集成keycloak。 </p><p>要开发React应用，首选使用<code>create-react-app</code>脚手架。首先安装<code>create-react-app</code>（前提是你已经安装了npm）：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g create-react-app</code></pre><p>接下来，使用<code>create-react-app</code>脚手架创建我们的应用项目结构：</p><pre class=" language-bash"><code class="language-bash">create-create-app keycloak-react-example</code></pre><p>运行命令后可以帮我们创建一个应用骨架，包括必须的一些目录结构及文件。 我们最终实现的代码结构如下所示：</p><p><img src="/posts/frontend/keycloak-react-integration-01/project-structure.png" alt> </p><p>我们需要首先在根目录下的package.json中添加依赖：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"keycloak-example"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"^16.8.6"</span><span class="token punctuation">,</span>    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^16.8.6"</span><span class="token punctuation">,</span>    <span class="token property">"react-scripts"</span><span class="token operator">:</span> <span class="token string">"0.9.5"</span><span class="token punctuation">,</span>    <span class="token property">"react-router"</span><span class="token operator">:</span> <span class="token string">"5.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"react-router-dom"</span><span class="token operator">:</span> <span class="token string">"5.0.1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-scripts test --env=jsdom"</span><span class="token punctuation">,</span>    <span class="token property">"eject"</span><span class="token operator">:</span> <span class="token string">"react-scripts eject"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建的项目结构中主要包括<code>public</code>和<code>src</code>两个目录，主要的代码都在<code>src</code>目录下。 </p><p><code>public</code>下的<code>index.html</code>是应用的入口html文件。 </p><p><code>src/components</code>下包括product和admin的功能页面。<code>src/images</code>下存放应用使用的图片。<code>src/routes</code>下包含了定义应用导航的代码文件。 </p><p><code>src/index.js</code>是应用的入口js文件，我们首先在里面实现通过React在DOM中渲染我们的应用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Page <span class="token keyword">from</span> <span class="token string">'./Page'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Component <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span>Page<span class="token punctuation">)</span></code></pre><p><code>index.js</code>中使用<code>render</code>方法渲染<code>Page.js</code>中定义的<code>Page</code>组件，<code>Page.js</code>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Page</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>Router<span class="token operator">></span>                <span class="token operator">&lt;</span>Switch<span class="token operator">></span>                    <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/app/product/index"</span> push <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>                    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/app"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>App<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们在<code>Page.js</code>中定义了两个路由，第一个<code>&lt;Route&gt;</code> 表示当我们访问应用根<code>/</code>时，自动重定向到product页面。 第二个<code>&lt;Route&gt;</code>表示会以<code>App.js</code>里定义的<code>App</code>组件渲染任何URL以<code>/app</code>开头的页面。 </p><p><code>App.js</code>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.png'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Routes <span class="token keyword">from</span> <span class="token string">'./routes'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">"demo"</span>    <span class="token keyword">return</span> user  <span class="token punctuation">}</span>  <span class="token function">onLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// To do</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"App-logo"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>h2<span class="token operator">></span>Welcome to Keycloak<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-navi"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/app/product/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Product<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/app/admin/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Admin<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-user-info"</span><span class="token operator">></span>            Login User<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onLogout<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"btn btn-success"</span> <span class="token operator">></span>Logout<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-content"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Routes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Routes<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>App</code>组件实现了我们应用的主页面结构，上面是一个<code>Header</code>，下面是应用的主体内容。 </p><p><code>Header</code>中部显示应用logo，左侧显示导航菜单，右侧显示当前登录用户，以及<code>Logout</code>按钮，这样用户就可以方便的从系统退出登录。</p><blockquote><p><strong>注意</strong>：我们现在还没有最终实现获取用户的<code>getLoginUser()</code>方法，只是简单的返回一个字符串，这样可以保证应用可以正常的运行并显示。 </p><p>类似地，登出系统的<code>onLogout()</code>方法也只是一个空方法，我们目前让它不做任何事情，这样可以保证应用可以正常运行。 </p><p>我们稍后在集成<code>Keycloak</code>时会实现这两个方法。</p></blockquote><p>左侧的导航菜单定义了两个不同的<code>Link</code>，当我们点击某个菜单时，将导航到相应的页面。 </p><p>页面下方的主体内容部分将显示当前选中菜单对应的页面内容，但是我们只有一行简单的代码<code>&lt;Routes&gt;&lt;/Routes&gt;</code> 。让我们看看<code>src/routes/index.js</code>的代码内容：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Switch<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> ProductIndex <span class="token keyword">from</span> <span class="token string">'../components/product/ProductIndex'</span><span class="token keyword">import</span> AdminIndex <span class="token keyword">from</span> <span class="token string">'../components/admin/AdminIndex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyRouter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>Switch<span class="token operator">></span>                <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/app/product/index"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ProductIndex<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>                <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/app/admin/index"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>AdminIndex<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，我们在这里对导航菜单的路由进行了定义。两个<code>Link</code>分别对应不同的组件，组件的内容将在主体部分显示。 </p><p>下面是<code>ProductIndex</code>和<code>AdminIndex</code>组件的代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> product <span class="token keyword">from</span> <span class="token string">'../../images/product.jpg'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ProductIndex</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"product"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>Product show<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">}</span> width<span class="token operator">=</span><span class="token string">"50%"</span> alt<span class="token operator">=</span><span class="token string">"product"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> admin <span class="token keyword">from</span> <span class="token string">'../../images/admin.jpg'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">AdminIndex</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"admin"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>Administration console<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>admin<span class="token punctuation">}</span> width<span class="token operator">=</span><span class="token string">"50%"</span> alt<span class="token operator">=</span><span class="token string">"admin"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们只是为了演示不同菜单对应不同页面，而页面中并没有什么实际的内容。 </p><p>最后，应用用到的图片我们放在<code>src/images</code>下。各个页面用到的CSS代码放在<code>src/App.css</code>中。 </p><p>现在我们的应用已经实现了，我们可以运行它来先看看效果：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre><p>启动后，会默认打开浏览器并访问：<a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>。不出意外的话，浏览器会马上重定向到<a href="http://localhost:3000/#/app/product/index" target="_blank" rel="noopener">http://localhost:3000/#/app/product/index</a>，且可以正常看到我们的应用页面如下： </p><p><img src="/posts/frontend/keycloak-react-integration-01/product-index.png" alt></p><h3 id="集成Keycloak"><a href="#集成Keycloak" class="headerlink" title="集成Keycloak"></a>集成Keycloak</h3><p>我们的应用功能页面已经实现，接下来我们集成<code>Keycloak</code>实现用户登录登出功能。</p><h4 id="引入keycloak-js"><a href="#引入keycloak-js" class="headerlink" title="引入keycloak-js"></a>引入keycloak-js</h4><p>首先我们需要在<code>package.json</code>中引入<code>keycloak</code>的依赖：</p><pre class=" language-json"><code class="language-json">  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"^16.8.6"</span><span class="token punctuation">,</span>    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^16.8.6"</span><span class="token punctuation">,</span>    <span class="token property">"react-scripts"</span><span class="token operator">:</span> <span class="token string">"0.9.5"</span><span class="token punctuation">,</span>    <span class="token property">"keycloak-js"</span><span class="token operator">:</span> <span class="token string">"6.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"react-router"</span><span class="token operator">:</span> <span class="token string">"5.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"react-router-dom"</span><span class="token operator">:</span> <span class="token string">"5.0.1"</span>  <span class="token punctuation">}</span></code></pre><p>运行如下命令安装<code>keycloak</code>依赖包：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre><h4 id="导入keycloak配置"><a href="#导入keycloak配置" class="headerlink" title="导入keycloak配置"></a>导入keycloak配置</h4><p>接下来，我们需要回到<code>Keycloak</code>的<code>Administration Console</code>下载keycloak配置文件。 </p><p>登录<code>Administration Console</code>（注意：这里要使用第一次创建的管理帐号），点击左侧菜单中的<code>Clients</code>，选择我们创建的client：<code>keycloak-react-example</code>，点击<code>Installation</code>选项卡，在<code>Format Option</code>下拉选项中选择<code>Keycloak OIDC JSON</code>，点击出现的<code>Download</code>按钮，下载<code>keycloak.json</code>文件，内容如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"realm"</span><span class="token operator">:</span> <span class="token string">"demo"</span><span class="token punctuation">,</span>  <span class="token property">"auth-server-url"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/auth"</span><span class="token punctuation">,</span>  <span class="token property">"ssl-required"</span><span class="token operator">:</span> <span class="token string">"external"</span><span class="token punctuation">,</span>  <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"keycloak-react-example"</span><span class="token punctuation">,</span>  <span class="token property">"public-client"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"confidential-port"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre><p>最后，把下载的<code>keycloak.json</code>拷贝到应用的<code>public</code>目录下。</p><h4 id="实现keycloak初始化"><a href="#实现keycloak初始化" class="headerlink" title="实现keycloak初始化"></a>实现keycloak初始化</h4><p>接下来，我们在<code>src</code>下创建<code>keycloak.js</code>文件，在其中实现keycloak的初始化等相关代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Keycloak <span class="token keyword">from</span> <span class="token string">'keycloak-js'</span><span class="token keyword">class</span> <span class="token class-name">KeycloakClient</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initialized <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keycloak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keycloak</span><span class="token punctuation">(</span><span class="token string">'/keycloak.json'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    init <span class="token operator">=</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>onLoad<span class="token punctuation">:</span> <span class="token string">"login-required"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>authenticated <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>initialized <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> keycloakClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeycloakClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> keycloakClient</code></pre><p>我们首先定义了一个<code>KeycloakClient</code>类来包装keycloak相关的一些对象和方法。 类构造器函数中初始化两个属性：</p><ul><li><code>initialized</code> 表示keycloak是否已初始化。</li><li><code>keycloak</code> 对象是使用Keycloak库提供的类创建的对象，我们需要传递前面下载的keycloak配置文件作为其构造函数的参数。<code>keycloak</code> 对象中包含了很多属性和方法，具体内容可以查阅Keycloak官方文档。我们暂时只会用到其中的<code>init</code> 方法。</li></ul><p>接着我们定义了<code>init</code>方法，传入了一个callback函数作为参数。方法中调用了前面创建的keycloak对象的init方法进行初始化，因为我们传入了<code>{onLoad: &quot;login-required&quot;}</code> 参数，keycloak将检查是否已登录，如果没有，keycloak会自动重定向到登录页面，等待用户登录。当用户输入正确的用户名及密码登录成功后，就会触发<code>success()</code> 里的回调函数。我们在success回调函数里设置initialized属性，并执行callback函数。</p><h4 id="修改src-index-js"><a href="#修改src-index-js" class="headerlink" title="修改src/index.js"></a>修改src/index.js</h4><p>现在，我们需要修改<code>src/index.js</code>，修改后<code>src/index.js</code>如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Page <span class="token keyword">from</span> <span class="token string">'./Page'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> keycloakClient <span class="token keyword">from</span> <span class="token string">'./keycloak'</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">,</span> keycloak<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Component keycloak<span class="token operator">=</span><span class="token punctuation">{</span>keycloak<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keycloakClient<span class="token punctuation">.</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>  keycloakClient<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">(</span>keycloak<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span>Page<span class="token punctuation">,</span> keycloak<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>我们首先引入<code>keycloak.js</code>，然后调用初始化函数，并在callback函数里调用<code>render(Page, keycloak)</code> ，将初始化后的keycloak对象作为参数传递给render的组件：<code>Page</code>。这样可以保证只有在keycloak初始化成功后才渲染应用组件。 </p><p>可以看到我们将keycloak对象作为props传给了Page组件：<code>&lt;Component keycloak={keycloak} /&gt;</code> 。 </p><p>我们需要这么做，因为我们希望把这个keycloak对象通过props传递给<code>App</code>子组件，然后从中取出当前的登录用户名进行显示，以及调用keycloak对象的<code>logout</code>方法实现退出登录。</p><h4 id="修改Page组件"><a href="#修改Page组件" class="headerlink" title="修改Page组件"></a>修改Page组件</h4><p>现在，我们只是把keycloak作为<code>Page</code>的props传递给了<code>Page</code>组件，但<code>App</code>组件还无法获取它。 接下来，我们将通过改造<code>Page</code>组件，实现将keycloak从<code>Page</code>组件传递给<code>App</code>子组件。 </p><p>改造后的<code>src/Page.js</code>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Page</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>Router<span class="token operator">></span>                <span class="token operator">&lt;</span>Switch<span class="token operator">></span>                    <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/app/product/index"</span> push <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>                    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Route path="/app" component={App}>&lt;/Route> */</span><span class="token punctuation">}</span>                    <span class="token operator">&lt;</span>PropsRoute path<span class="token operator">=</span><span class="token string">"/app"</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> component<span class="token operator">=</span><span class="token punctuation">{</span>App<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>PropsRoute<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> PropsRoute <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>component<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Route             <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>            render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Component<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>可以看到我们注释掉了<code>&lt;Route path=&quot;/app&quot; component={App}&gt;&lt;/Route&gt;</code> ，使用一行新的代码替换了它：<code>&lt;PropsRoute path=&quot;/app&quot; {...this.props} component={App}&gt;&lt;/PropsRoute&gt;</code> </p><p>我们使用了自定义的<code>PropsRoute</code>组件，它扩展了<code>Route</code>。它可以把所有props传递给component指定的组件。</p><h4 id="修改App组件"><a href="#修改App组件" class="headerlink" title="修改App组件"></a>修改App组件</h4><p>现在我们可以在<code>App</code>组件中获取<code>Page</code>的props了，而我们在<code>index.js</code>里把keycloak对象传递给了<code>Page</code>组件，因此我们可以在<code>App</code>组件获取keycloak对象了。 </p><p>最后，我们可以改造<code>src/App.js</code>，实现之前的两个方法：<code>getLoginUser()</code>和<code>onLogout()</code>。 </p><p>改造后的代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.png'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Routes <span class="token keyword">from</span> <span class="token string">'./routes'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>tokenParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>tokenParsed<span class="token punctuation">.</span>preferred_username    <span class="token punctuation">}</span>    <span class="token keyword">return</span> user  <span class="token punctuation">}</span>  <span class="token function">onLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"App-logo"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>h2<span class="token operator">></span>Welcome to Keycloak<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-navi"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/app/product/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Product<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/app/admin/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Admin<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-user-info"</span><span class="token operator">></span>            Login User<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onLogout<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"btn btn-success"</span> <span class="token operator">></span>Logout<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-content"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Routes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Routes<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，我们从props对象中获取了keycloak对象，并从keycloak对象中获取了登录用户名<code>keycloak.tokenParsed.preferred_username</code> 。在<code>onLogout()</code>方法中，我们使用了keycloak的自带logout方法<code>keycloak.logout()</code> 。</p><h3 id="测试应用"><a href="#测试应用" class="headerlink" title="测试应用"></a>测试应用</h3><p>现在，我们可以再次启动应用：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre><p>如果一切顺利的话，你将看到与我们前面所展示的应用效果完全一样的效果。 本文完整代码请参考<a href="https://github.com/longyg/keycloak-react-example" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keycloak </tag>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据处理速记手册</title>
      <link href="/posts/data-analysis/data-handle-manual.html"/>
      <url>/posts/data-analysis/data-handle-manual.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>持续更新中……</strong></p></blockquote><p>本文记录机器学习中常见的处理数据的方法，作为一个速查手册。包含了<code>Pandas</code>，<code>Numpy</code>，<code>Matplotlib</code>等各种库的实用方法。</p><h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h3><h4 id="1-查看某列的唯一取值"><a href="#1-查看某列的唯一取值" class="headerlink" title="1.  查看某列的唯一取值"></a>1.  查看某列的唯一取值</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-统计数据集的空值列"><a href="#2-统计数据集的空值列" class="headerlink" title="2. 统计数据集的空值列"></a>2. 统计数据集的空值列</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>或</p><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="3-统计指定列包含空值的行数"><a href="#3-统计指定列包含空值的行数" class="headerlink" title="3. 统计指定列包含空值的行数"></a>3. 统计指定列包含空值的行数</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="4-统计每列值不为空的行数"><a href="#4-统计每列值不为空的行数" class="headerlink" title="4. 统计每列值不为空的行数"></a>4. 统计每列值不为空的行数</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="5-删除某列"><a href="#5-删除某列" class="headerlink" title="5. 删除某列"></a>5. 删除某列</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'column'</span><span class="token punctuation">)</span></code></pre><h4 id="6-获取某列的值为空的所有数据"><a href="#6-获取某列的值为空的所有数据" class="headerlink" title="6. 获取某列的值为空的所有数据"></a>6. 获取某列的值为空的所有数据</h4><pre class=" language-python"><code class="language-python">tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h4 id="7-获取某列的值等于指定值的所有数据"><a href="#7-获取某列的值等于指定值的所有数据" class="headerlink" title="7. 获取某列的值等于指定值的所有数据"></a>7. 获取某列的值等于指定值的所有数据</h4><pre class=" language-python"><code class="language-python">tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'value'</span><span class="token punctuation">]</span></code></pre><h4 id="8-获取空值行，即任意列包含空值的行"><a href="#8-获取空值行，即任意列包含空值的行" class="headerlink" title="8. 获取空值行，即任意列包含空值的行"></a>8. 获取空值行，即任意列包含空值的行</h4><pre class=" language-python"><code class="language-python">tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">.</span>any<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>或</p><pre class=" language-python"><code class="language-python">tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">]</span></code></pre><h4 id="9-获取指定列的空值行"><a href="#9-获取指定列的空值行" class="headerlink" title="9. 获取指定列的空值行"></a>9. 获取指定列的空值行</h4><pre class=" language-python"><code class="language-python">tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">]</span></code></pre><h4 id="10-为某列的空值填补数据"><a href="#10-为某列的空值填补数据" class="headerlink" title="10. 为某列的空值填补数据"></a>10. 为某列的空值填补数据</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span></code></pre><h4 id="11-删除空值行"><a href="#11-删除空值行" class="headerlink" title="11. 删除空值行"></a>11. 删除空值行</h4><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TensorFlow 2.0教程】回归：预测燃油效率</title>
      <link href="/posts/ml/tf2-regression.html"/>
      <url>/posts/ml/tf2-regression.html</url>
      
        <content type="html"><![CDATA[<p>在<code>回归</code>问题中，我们的目标是预测<code>连续值</code>的输出，比如价格或概率。然而在<code>分类</code>问题中，我们的目标是从类列表中选择一个类(例如，一幅图片包含一个苹果或一个橘子，而我们的目标就是识别出图中有哪些水果)。 </p><p>本文将使用经典的<a href="https://archive.ics.uci.edu/ml/datasets/auto+mpg" target="_blank" rel="noopener">汽车MPG数据集</a>，并建立了一个模型来预测70年代末、80年代初汽车的燃油效率。为了做到这一点，我们将为模型提供当时很多汽车的属性，包括：气缸、排量、马力和重量。 </p><p>我们依然使用<code>tf.keras</code> API来完成本例。 </p><p>首先，导入本文将要使用的库：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pathlib<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow <span class="token keyword">import</span> keras<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras <span class="token keyword">import</span> layers<span class="token keyword">print</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span></code></pre><pre><code>2.0.0-beta0</code></pre><h3 id="一、处理数据集"><a href="#一、处理数据集" class="headerlink" title="一、处理数据集"></a>一、处理数据集</h3><p>该数据集可以从<a href="https://archive.ics.uci.edu/ml/" target="_blank" rel="noopener">UCI机器学习仓库</a>中获得。</p><h4 id="1-获取数据"><a href="#1-获取数据" class="headerlink" title="1. 获取数据"></a>1. 获取数据</h4><p>首先，下载数据集。</p><pre class=" language-python"><code class="language-python">dataset_path <span class="token operator">=</span> keras<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>get_file<span class="token punctuation">(</span><span class="token string">"auto-mpg.data"</span><span class="token punctuation">,</span> <span class="token string">"http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data"</span><span class="token punctuation">)</span>dataset_path</code></pre><pre><code>Downloading data from http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data32768/30286 [================================] - 0s 6us/step&#39;/root/.keras/datasets/auto-mpg.data&#39;</code></pre><p>使用<code>Pandas</code>读取数据文件：</p><pre class=" language-python"><code class="language-python">column_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'MPG'</span><span class="token punctuation">,</span><span class="token string">'Cylinders'</span><span class="token punctuation">,</span><span class="token string">'Displacement'</span><span class="token punctuation">,</span><span class="token string">'Horsepower'</span><span class="token punctuation">,</span><span class="token string">'Weight'</span><span class="token punctuation">,</span>                <span class="token string">'Acceleration'</span><span class="token punctuation">,</span> <span class="token string">'Model Year'</span><span class="token punctuation">,</span> <span class="token string">'Origin'</span><span class="token punctuation">]</span>raw_dataset <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>dataset_path<span class="token punctuation">,</span> names<span class="token operator">=</span>column_names<span class="token punctuation">,</span>                          na_values<span class="token operator">=</span><span class="token string">"?"</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span>                          sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> skipinitialspace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>dataset <span class="token operator">=</span> raw_dataset<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>dataset<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><table><thead><tr><th></th><th>MPG</th><th>Cylinders</th><th>Displacement</th><th>Horsepower</th><th>Weight</th><th>Acceleration</th><th>Model Year</th><th>Origin</th></tr></thead><tbody><tr><td>393</td><td>27.0</td><td>4</td><td>140.0</td><td>86.0</td><td>2790.0</td><td>15.6</td><td>82</td><td>1</td></tr><tr><td>394</td><td>44.0</td><td>4</td><td>97.0</td><td>52.0</td><td>2130.0</td><td>24.6</td><td>82</td><td>2</td></tr><tr><td>395</td><td>32.0</td><td>4</td><td>135.0</td><td>84.0</td><td>2295.0</td><td>11.6</td><td>82</td><td>1</td></tr><tr><td>396</td><td>28.0</td><td>4</td><td>120.0</td><td>79.0</td><td>2625.0</td><td>18.6</td><td>82</td><td>1</td></tr><tr><td>397</td><td>31.0</td><td>4</td><td>119.0</td><td>82.0</td><td>2720.0</td><td>19.4</td><td>82</td><td>1</td></tr></tbody></table><h4 id="2-清理数据"><a href="#2-清理数据" class="headerlink" title="2. 清理数据"></a>2. 清理数据</h4><p>检查数据集中是否包含一些未知数据（空值）。</p><pre class=" language-python"><code class="language-python">dataset<span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>MPG             0Cylinders       0Displacement    0Horsepower      6Weight          0Acceleration    0Model Year      0Origin          0dtype: int64</code></pre><p>可以看到，有6行数据的<code>Horsepower</code>列是空值，简单起见，我们直接删除这些行：</p><pre class=" language-python"><code class="language-python">dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>Origin</code>列实际上是分类列，而不是数字的，所以我们把它转换成<code>one-hot</code>：</p><pre class=" language-python"><code class="language-python">origin <span class="token operator">=</span> dataset<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Origin'</span><span class="token punctuation">)</span>dataset<span class="token punctuation">[</span><span class="token string">'USA'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>origin <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span>dataset<span class="token punctuation">[</span><span class="token string">'Europe'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>origin <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span>dataset<span class="token punctuation">[</span><span class="token string">'Japan'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>origin <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span>dataset<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><table><thead><tr><th></th><th>MPG</th><th>Cylinders</th><th>Displacement</th><th>Horsepower</th><th>Weight</th><th>Acceleration</th><th>Model Year</th><th>USA</th><th>Europe</th><th>Japan</th></tr></thead><tbody><tr><td>393</td><td>27.0</td><td>4</td><td>140.0</td><td>86.0</td><td>2790.0</td><td>15.6</td><td>82</td><td>1.0</td><td>0.0</td><td>0.0</td></tr><tr><td>394</td><td>44.0</td><td>4</td><td>97.0</td><td>52.0</td><td>2130.0</td><td>24.6</td><td>82</td><td>0.0</td><td>1.0</td><td>0.0</td></tr><tr><td>395</td><td>32.0</td><td>4</td><td>135.0</td><td>84.0</td><td>2295.0</td><td>11.6</td><td>82</td><td>1.0</td><td>0.0</td><td>0.0</td></tr><tr><td>396</td><td>28.0</td><td>4</td><td>120.0</td><td>79.0</td><td>2625.0</td><td>18.6</td><td>82</td><td>1.0</td><td>0.0</td><td>0.0</td></tr><tr><td>397</td><td>31.0</td><td>4</td><td>119.0</td><td>82.0</td><td>2720.0</td><td>19.4</td><td>82</td><td>1.0</td><td>0.0</td><td>0.0</td></tr></tbody></table><h4 id="3-将数据集拆分为训练集和测试集"><a href="#3-将数据集拆分为训练集和测试集" class="headerlink" title="3. 将数据集拆分为训练集和测试集"></a>3. 将数据集拆分为训练集和测试集</h4><p>现在，我们将数据集拆分为<code>训练集</code>和<code>测试集</code>。我们将在对模型进行最终评估时使用测试集。</p><pre class=" language-python"><code class="language-python">train_dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>test_dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>train_dataset<span class="token punctuation">.</span>index<span class="token punctuation">)</span></code></pre><h4 id="4-检视数据"><a href="#4-检视数据" class="headerlink" title="4. 检视数据"></a>4. 检视数据</h4><p>让我们快速查看一下训练集中几列数据之间的<code>联合分布</code>。</p><pre><code>sns.pairplot(train_dataset[[&#39;MPG&#39;, &#39;Cylinders&#39;, &#39;Displacement&#39;, &#39;Weight&#39;]], diag_kind=&#39;kde&#39;)</code></pre><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x7f5f384fa6a0&gt;</code></pre><p><a href="https://i.loli.net/2019/06/11/5cffb91e7bb4d96734.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/11/5cffb91e7bb4d96734.png" alt></a> </p><p>再看看整个数据集的统计结果：</p><pre class=" language-python"><code class="language-python">train_stats <span class="token operator">=</span> train_dataset<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>train_stats<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'MPG'</span><span class="token punctuation">)</span>train_stats <span class="token operator">=</span> train_stats<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span>train_stats</code></pre><table><thead><tr><th></th><th>count</th><th>mean</th><th>std</th><th>min</th><th>25%</th><th>50%</th><th>75%</th><th>max</th></tr></thead><tbody><tr><td>Cylinders</td><td>314.0</td><td>5.477707</td><td>1.699788</td><td>3.0</td><td>4.00</td><td>4.0</td><td>8.00</td><td>8.0</td></tr><tr><td>Displacement</td><td>314.0</td><td>195.318471</td><td>104.331589</td><td>68.0</td><td>105.50</td><td>151.0</td><td>265.75</td><td>455.0</td></tr><tr><td>Horsepower</td><td>314.0</td><td>104.869427</td><td>38.096214</td><td>46.0</td><td>76.25</td><td>94.5</td><td>128.00</td><td>225.0</td></tr><tr><td>Weight</td><td>314.0</td><td>2990.251592</td><td>843.898596</td><td>1649.0</td><td>2256.50</td><td>2822.5</td><td>3608.00</td><td>5140.0</td></tr><tr><td>Acceleration</td><td>314.0</td><td>15.559236</td><td>2.789230</td><td>8.0</td><td>13.80</td><td>15.5</td><td>17.20</td><td>24.8</td></tr><tr><td>Model Year</td><td>314.0</td><td>75.898089</td><td>3.675642</td><td>70.0</td><td>73.00</td><td>76.0</td><td>79.00</td><td>82.0</td></tr><tr><td>USA</td><td>314.0</td><td>0.624204</td><td>0.485101</td><td>0.0</td><td>0.00</td><td>1.0</td><td>1.00</td><td>1.0</td></tr><tr><td>Europe</td><td>314.0</td><td>0.178344</td><td>0.383413</td><td>0.0</td><td>0.00</td><td>0.0</td><td>0.00</td><td>1.0</td></tr><tr><td>Japan</td><td>314.0</td><td>0.197452</td><td>0.398712</td><td>0.0</td><td>0.00</td><td>0.0</td><td>0.00</td><td>1.0</td></tr></tbody></table><h4 id="5-从数据中取出目标值"><a href="#5-从数据中取出目标值" class="headerlink" title="5. 从数据中取出目标值"></a>5. 从数据中取出目标值</h4><p>将目标值从数据中分离出来，这个目标值是您将通过训练的模型来预测的值。</p><pre class=" language-python"><code class="language-python">train_labels <span class="token operator">=</span> train_dataset<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'MPG'</span><span class="token punctuation">)</span>test_labels <span class="token operator">=</span> test_dataset<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'MPG'</span><span class="token punctuation">)</span></code></pre><h4 id="6-正则化数据"><a href="#6-正则化数据" class="headerlink" title="6. 正则化数据"></a>6. 正则化数据</h4><p>再次查看上面的<code>train_stats</code>表，你会注意到每个特征值的范围都不同。 </p><p>把具有不同范围值的特征<code>正则化</code>（<code>归一化</code>）是一个很好的实践。虽然模型在不进行<code>特征归一化</code>的情况下也可以收敛，但这会增加训练的难度，并使生成的模型依赖于输入数据中的单位选择。</p><blockquote><p><strong>注意</strong>：虽然我们有意只从训练数据集生成这些统计数据，但是这些统计数据也将用于<code>正则化</code>测试数据集。这样做是为了将测试数据集也投射到模型所训练的相同分布中。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">norm</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> train_stats<span class="token punctuation">[</span><span class="token string">'mean'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> train_stats<span class="token punctuation">[</span><span class="token string">'std'</span><span class="token punctuation">]</span>normed_train_data <span class="token operator">=</span> norm<span class="token punctuation">(</span>train_dataset<span class="token punctuation">)</span>normed_test_data <span class="token operator">=</span> norm<span class="token punctuation">(</span>test_dataset<span class="token punctuation">)</span></code></pre><p>我们将使用这些正则化的数据来训练模型。</p><blockquote><p><strong>警告</strong>：这里用于正则化输入的统计数据(<code>平均值</code>和<code>标准偏差</code>)需要应用于任何其他提供给模型的数据，以及我们前面所做的<code>one-hot</code>编码，这包括在生产中使用模型时的测试集和实时数据。</p></blockquote><h3 id="二、-处理模型"><a href="#二、-处理模型" class="headerlink" title="二、 处理模型"></a>二、 处理模型</h3><h4 id="1-构建模型"><a href="#1-构建模型" class="headerlink" title="1. 构建模型"></a>1. 构建模型</h4><p>让我们构建我们的模型。在这里，我们将使用一个<code>Sequential</code>模型，其中包含两个<code>全连接</code>的<code>隐藏层</code>和一个返回单个连续值的<code>输出层</code>。模型构建步骤封装在函数<code>build_model</code>中，因为稍后我们将用该函数创建另外一个模型。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> keras<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>        layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>train_dataset<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> keras<span class="token punctuation">.</span>optimizers<span class="token punctuation">.</span>RMSprop<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'mse'</span><span class="token punctuation">,</span>                  optimizer<span class="token operator">=</span>optimizer<span class="token punctuation">,</span>                  metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'mae'</span><span class="token punctuation">,</span> <span class="token string">'mse'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> modelmodel <span class="token operator">=</span> build_model<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-检视模型"><a href="#2-检视模型" class="headerlink" title="2. 检视模型"></a>2. 检视模型</h4><p>使用模型的<code>summary</code>函数打印模型的简单描述：</p><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Model: &quot;sequential&quot;_________________________________________________________________Layer (type)                 Output Shape              Param #   =================================================================dense (Dense)                (None, 64)                640       _________________________________________________________________dense_1 (Dense)              (None, 64)                4160      _________________________________________________________________dense_2 (Dense)              (None, 1)                 65        =================================================================Total params: 4,865Trainable params: 4,865Non-trainable params: 0_________________________________________________________________</code></pre><p>现在试试这个模型，从训练数据集中取出10个样本，调用模型的<code>predict</code>函数进行预测。</p><pre class=" language-python"><code class="language-python">example_batch <span class="token operator">=</span> normed_train_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>example_result <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>example_batch<span class="token punctuation">)</span>example_result</code></pre><pre><code>array([[-0.00430702],       [-0.153585  ],       [-0.2786718 ],       [-0.41118544],       [-0.33164966],       [ 0.11375937],       [-0.37117037],       [-0.2712645 ],       [ 0.04279822],       [-0.19775198]], dtype=float32)</code></pre><p>看起来我们的模型可以正常工作，它可以产生我们预期的形状及类型的预测结果。</p><h4 id="3-训练模型"><a href="#3-训练模型" class="headerlink" title="3. 训练模型"></a>3. 训练模型</h4><p>对模型进行<code>1000</code>次迭代训练，并把训练和<code>验证准确率</code>保存在<code>history</code>对象中。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PrintDot</span><span class="token punctuation">(</span>keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>Callback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">on_epoch_end</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> logs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>EPOCHS <span class="token operator">=</span> <span class="token number">1000</span>history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>    normed_train_data<span class="token punctuation">,</span> train_labels<span class="token punctuation">,</span>    epochs <span class="token operator">=</span> EPOCHS<span class="token punctuation">,</span> validation_split<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>    callbacks<span class="token operator">=</span><span class="token punctuation">[</span>PrintDot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><codecode></pre><p>接下来，我们可以将模型的训练过程进行可视化，我们可以使用<code>history</code>对象中存储的状态。</p><pre class=" language-python"><code class="language-python">hist <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>history<span class="token punctuation">.</span>history<span class="token punctuation">)</span>hist<span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">]</span> <span class="token operator">=</span> history<span class="token punctuation">.</span>epochhist<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><table><thead><tr><th></th><th>loss</th><th>mae</th><th>mse</th><th>val_loss</th><th>val_mae</th><th>val_mse</th><th>epoch</th></tr></thead><tbody><tr><td>995</td><td>1.429395</td><td>0.805808</td><td>1.429395</td><td>14.781130</td><td>3.153975</td><td>14.781130</td><td>995</td></tr><tr><td>996</td><td>2.564816</td><td>1.154352</td><td>2.564816</td><td>10.677358</td><td>2.599523</td><td>10.677358</td><td>996</td></tr><tr><td>997</td><td>1.406840</td><td>0.782063</td><td>1.406840</td><td>10.480282</td><td>2.470785</td><td>10.480282</td><td>997</td></tr><tr><td>998</td><td>1.724082</td><td>0.887233</td><td>1.724082</td><td>9.411325</td><td>2.464231</td><td>9.411325</td><td>998</td></tr><tr><td>999</td><td>1.458340</td><td>0.782995</td><td>1.458340</td><td>11.574752</td><td>2.700156</td><td>11.574753</td><td>999</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">plot_history</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token punctuation">:</span>    hist <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>history<span class="token punctuation">.</span>history<span class="token punctuation">)</span>    hist<span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">]</span> <span class="token operator">=</span> history<span class="token punctuation">.</span>epoch    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Epoch'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Mean Abs Error [MPG]'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>hist<span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist<span class="token punctuation">[</span><span class="token string">'mae'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Train Error'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>hist<span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist<span class="token punctuation">[</span><span class="token string">'val_mae'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Val Error'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Epoch'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Mean Square Error [$MPG^2$]'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>hist<span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist<span class="token punctuation">[</span><span class="token string">'mse'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Train Error'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>hist<span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hist<span class="token punctuation">[</span><span class="token string">'val_mse'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Val Error'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plot_history<span class="token punctuation">(</span>history<span class="token punctuation">)</span></code></pre><p><a href="https://i.loli.net/2019/06/11/5cffc2fcb7fbe38182.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/11/5cffc2fcb7fbe38182.png" alt></a> <a href="https://i.loli.net/2019/06/11/5cffc39e5623e73959.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/11/5cffc39e5623e73959.png" alt></a> </p><p>这两张图显示，在大约<code>100</code>次迭代之后，验证错误几乎没有改善，甚至变差。让我们更新<code>model.fit</code>，当验证分数没有提高时自动停止训练。我们将使用一个<code>EarlyStopping</code>回调函数来检查每次迭代，如果在一定迭代次数后一直没有提高准确率，则自动停止训练。</p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> build_model<span class="token punctuation">(</span><span class="token punctuation">)</span>early_stop <span class="token operator">=</span> keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>EarlyStopping<span class="token punctuation">(</span>monitor<span class="token operator">=</span><span class="token string">'val_loss'</span><span class="token punctuation">,</span> patience<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>normed_train_data<span class="token punctuation">,</span> train_labels<span class="token punctuation">,</span> epochs<span class="token operator">=</span>EPOCHS<span class="token punctuation">,</span> validation_split<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> callbacks<span class="token operator">=</span><span class="token punctuation">[</span>early_stop<span class="token punctuation">,</span> PrintDot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plot_history<span class="token punctuation">(</span>history<span class="token punctuation">)</span></code></pre><pre><code>.........................</code></pre><p><a href="https://i.loli.net/2019/06/11/5cffc5526a7c359780.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/11/5cffc5526a7c359780.png" alt></a> <a href="https://i.loli.net/2019/06/11/5cffc590955da70525.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/11/5cffc590955da70525.png" alt></a> </p><p>从图中可以看出，在验证集上，平均误差通常在正负<code>2MPG</code>左右。 </p><p>我们在训练模型时没有使用测试集，现在让我们看看把模型应用在测试集上的效果将如何。这个结果可以告诉我们，当我们在现实世界中使用这个模型时，模型的预测结果是好还是坏。</p><pre class=" language-python"><code class="language-python">loss<span class="token punctuation">,</span> mae<span class="token punctuation">,</span> mse <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>normed_test_data<span class="token punctuation">,</span> test_labels<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Testing set Mean Abs Error: {:5.2f} MPG'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>mae<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>Testing set Mean Abs Error:  2.37 MPG</code></pre><h4 id="4-进行预测"><a href="#4-进行预测" class="headerlink" title="4. 进行预测"></a>4. 进行预测</h4><p>最后，我们使用测试集中的数据来预测<code>MPG</code>值：</p><pre class=" language-python"><code class="language-python">test_predictions <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>normed_test_data<span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>test_labels<span class="token punctuation">,</span> test_predictions<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'True Values [MPG]'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Predictions [MPG]'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'equal'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'square'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>_ <span class="token operator">=</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><a href="https://i.loli.net/2019/06/11/5cffc5b31f63587366.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/11/5cffc5b31f63587366.png" alt></a> </p><p>看起来我们的模型预测得相当好。我们来看一下<code>误差分布</code>。</p><pre class=" language-python"><code class="language-python">error <span class="token operator">=</span> test_predictions <span class="token operator">-</span> test_labelsplt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>error<span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Prediction Error [MPG]'</span><span class="token punctuation">)</span>_ <span class="token operator">=</span> plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Count'</span><span class="token punctuation">)</span></code></pre><p><a href="https://i.loli.net/2019/06/11/5cffc5b66196117621.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/11/5cffc5b66196117621.png" alt></a> </p><p>它不是<code>高斯分布</code>的，但我们可以预料到这样的结果是因为样本的数量太小。</p><h3 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h3><p>本文介绍了一些处理<code>回归问题</code>的技术：</p><ul><li><code>均方误差</code>（<code>MSE</code>）是回归问题中常用的<code>损失函数</code>（与分类问题中使用的损失函数不同）。</li><li>类似地，用于回归的评估指标也与分类不同。一个常见的回归度量是<code>平均绝对误差</code>（<code>MAE</code>）。</li><li>当数值型输入特征具有不同范围值时，应该将特征缩放到相同的范围，称为<code>正则化</code>（或<code>归一化</code>）。</li><li>如果没有足够的训练数据，一种解决的技术是选择具有很少<code>隐藏层</code>的小型网络来避免<code>过拟合</code>。</li><li>提前停止训练（<code>Early Stopping</code>）是一种有效防止<code>过拟合</code>的技术。</li></ul><p>本文完整代码请参考<a href="https://github.com/longyg/machine-learning/blob/master/tensorflow-2.0/5-regression.ipynb" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TensorFlow 2.0教程】对结构化数据分类</title>
      <link href="/posts/ml/tf2-classify-structured-data.html"/>
      <url>/posts/ml/tf2-classify-structured-data.html</url>
      
        <content type="html"><![CDATA[<p>本教程将介绍如何对结构化数据进行分类，例如CSV中的表格数据。我们将使用<code>Keras</code>定义模型，并使用<code>feature columns</code> 作为桥梁，将CSV中的列映射到用于训练模型的特征。本教程将包含如下几方面的完整的代码演示：</p><ul><li>使用<code>Pandas</code>加载CSV数据</li><li>构建一个输入管道（<code>pipeline</code>），使用<code>tf.data API</code>对数据进行<code>批处理</code>和<code>洗牌</code>。</li><li>使用<code>feature columns</code> API将CSV中的列映射到用来训练模型的<code>特征</code>。</li><li>使用<code>Keras</code>构建、训练和评估模型。</li></ul><h3 id="一、数据集介绍"><a href="#一、数据集介绍" class="headerlink" title="一、数据集介绍"></a>一、数据集介绍</h3><p>我们将使用克利夫兰心脏病临床基金会提供的一个较小的<a href="https://archive.ics.uci.edu/ml/datasets/heart+Disease" target="_blank" rel="noopener">数据集</a>。CSV文件中有几百行，每一行描述一个病人，每一列为一个特征。我们将使用这些信息来预测患者是否患有心脏病，这是一个<code>二元分类</code>问题。 </p><p>下面是对该数据集的描述。注意，有些列是数值型的，有些列是分类列。</p><table><thead><tr><th>Column</th><th>Description</th><th>Feature Type</th><th>Data Type</th></tr></thead><tbody><tr><td>Age</td><td>Age in years</td><td>Numerical</td><td>integer</td></tr><tr><td>Sex</td><td>(1 = male; 0 = female)</td><td>Categorical</td><td>integer</td></tr><tr><td>CP</td><td>Chest pain type (0, 1, 2, 3, 4)</td><td>Categorical</td><td>integer</td></tr><tr><td>Trestbpd</td><td>Resting blood pressure (in mm Hg on admission to the hospital)</td><td>Numerical</td><td>integer</td></tr><tr><td>Chol</td><td>Serum cholestoral in mg/dl</td><td>Numerical</td><td>integer</td></tr><tr><td>FBS</td><td>(fasting blood sugar &gt; 120 mg/dl) (1 = true; 0 = false)</td><td>Categorical</td><td>integer</td></tr><tr><td>RestECG</td><td>Resting electrocardiographic results (0, 1, 2)</td><td>Categorical</td><td>integer</td></tr><tr><td>Thalach</td><td>Maximum heart rate achieved</td><td>Numerical</td><td>integer</td></tr><tr><td>Exang</td><td>Exercise induced angina (1 = yes; 0 = no)</td><td>Categorical</td><td>integer</td></tr><tr><td>Oldpeak</td><td>ST depression induced by exercise relative to rest</td><td>Numerical</td><td>integer</td></tr><tr><td>Slope</td><td>The slope of the peak exercise ST segment</td><td>Numerical</td><td>float</td></tr><tr><td>CA</td><td>Number of major vessels (0-3) colored by flourosopy</td><td>Numerical</td><td>integer</td></tr><tr><td>Thal</td><td>3 = normal; 6 = fixed defect; 7 = reversable defect</td><td>Categorical</td><td>string</td></tr><tr><td>Target</td><td>Diagnosis of heart disease (1 = true; 0 = false)</td><td>Classification</td><td>integer</td></tr></tbody></table><h4 id="导入TensorFlow和其他库"><a href="#导入TensorFlow和其他库" class="headerlink" title="导入TensorFlow和其他库"></a>导入TensorFlow和其他库</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow <span class="token keyword">import</span> feature_column<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras <span class="token keyword">import</span> layers<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split</code></pre><h3 id="二、使用Pandas导入数据集"><a href="#二、使用Pandas导入数据集" class="headerlink" title="二、使用Pandas导入数据集"></a>二、使用Pandas导入数据集</h3><p><code>Pandas</code>是一个Python库，有许多用于加载和处理结构化数据的实用工具。我们将使用<code>Pandas</code>从一个URL下载数据集，并将其加载到<code>dataframe</code>中。</p><pre class=" language-python"><code class="language-python">URL <span class="token operator">=</span> <span class="token string">'https://storage.googleapis.com/applied-dl/heart.csv'</span>dataframe <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>URL<span class="token punctuation">)</span>dataframe<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><table><thead><tr><th></th><th>age</th><th>sex</th><th>cp</th><th>trestbps</th><th>chol</th><th>fbs</th><th>restecg</th><th>thalach</th><th>exang</th><th>oldpeak</th><th>slope</th><th>ca</th><th>thal</th><th>target</th></tr></thead><tbody><tr><td>0</td><td>63</td><td>1</td><td>1</td><td>145</td><td>233</td><td>1</td><td>2</td><td>150</td><td>0</td><td>2.3</td><td>3</td><td>0</td><td>fixed</td><td>0</td></tr><tr><td>1</td><td>67</td><td>1</td><td>4</td><td>160</td><td>286</td><td>0</td><td>2</td><td>108</td><td>1</td><td>1.5</td><td>2</td><td>3</td><td>normal</td><td>1</td></tr><tr><td>2</td><td>67</td><td>1</td><td>4</td><td>120</td><td>229</td><td>0</td><td>2</td><td>129</td><td>1</td><td>2.6</td><td>2</td><td>2</td><td>reversible</td><td>0</td></tr><tr><td>3</td><td>37</td><td>1</td><td>3</td><td>130</td><td>250</td><td>0</td><td>0</td><td>187</td><td>0</td><td>3.5</td><td>3</td><td>0</td><td>normal</td><td>0</td></tr><tr><td>4</td><td>41</td><td>0</td><td>2</td><td>130</td><td>204</td><td>0</td><td>2</td><td>172</td><td>0</td><td>1.4</td><td>1</td><td>0</td><td>normal</td><td>0</td></tr></tbody></table><h3 id="三、将数据集拆分为训练、验证和测试集"><a href="#三、将数据集拆分为训练、验证和测试集" class="headerlink" title="三、将数据集拆分为训练、验证和测试集"></a>三、将数据集拆分为训练、验证和测试集</h3><p>我们下载的数据集在一个单一的CSV文件中，我们将把它们拆分为<code>训练集</code>，<code>验证集</code>和<code>测试集</code>。</p><pre class=" language-python"><code class="language-python">train<span class="token punctuation">,</span> test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>df<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>train<span class="token punctuation">,</span> val <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>train<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'train examples'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'validation examples'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'test examples'</span><span class="token punctuation">)</span></code></pre><pre><code>193 train examples49 validation examples61 test examples</code></pre><h3 id="四、使用tf-data创建输入管道"><a href="#四、使用tf-data创建输入管道" class="headerlink" title="四、使用tf.data创建输入管道"></a>四、使用tf.data创建输入管道</h3><p>接下来，我们将用<code>tf.data</code>包装<code>dataframe</code>。这将使我们能够使用<code>TensorFlow</code>的<code>feature columns</code>作为桥梁，将<code>Pandas</code>的<code>dataframe</code>中的列映射到用于训练模型的特征。如果我们处理的是一个非常大的CSV文件(大到不能通过内存存储)，我们将使用<code>tf.data</code>直接从磁盘读取数据。本教程不讨论这一点。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 从Pandas的dataframe创建tf.data数据集</span><span class="token keyword">def</span> <span class="token function">df_to_dataset</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    labels <span class="token operator">=</span> df<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">)</span>    ds <span class="token operator">=</span> tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">.</span>from_tensor_slices<span class="token punctuation">(</span><span class="token punctuation">(</span>dict<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> shuffle<span class="token punctuation">:</span>        ds <span class="token operator">=</span> ds<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>buffer_size<span class="token operator">=</span>len<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span>    ds <span class="token operator">=</span> ds<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span>    <span class="token keyword">return</span> ds</code></pre><p>将数据集拆分成小批次（<code>5</code>）来演示我们创建的<code>tf.data</code>的数据集：</p><pre class=" language-python"><code class="language-python">batch_size <span class="token operator">=</span> <span class="token number">5</span>train_ds <span class="token operator">=</span> df_to_dataset<span class="token punctuation">(</span>train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span>val_ds <span class="token operator">=</span> df_to_dataset<span class="token punctuation">(</span>val<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span>test_ds <span class="token operator">=</span> df_to_dataset<span class="token punctuation">(</span>test<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span></code></pre><h3 id="五、进一步了解输入管道"><a href="#五、进一步了解输入管道" class="headerlink" title="五、进一步了解输入管道"></a>五、进一步了解输入管道</h3><p>现在我们已经创建了输入管道，让我们调用它来查看它返回的数据的格式。我们使用了一个小的批次大小（<code>5</code>）来保持输出的可读性。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> feature_batch<span class="token punctuation">,</span> label_batch <span class="token keyword">in</span> train_ds<span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Every feature:'</span><span class="token punctuation">,</span> list<span class="token punctuation">(</span>feature_batch<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A batch of ages:'</span><span class="token punctuation">,</span> feature_batch<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A batch of targets:'</span><span class="token punctuation">,</span> label_batch<span class="token punctuation">)</span></code></pre><pre><code>Every feature: [&#39;age&#39;, &#39;sex&#39;, &#39;cp&#39;, &#39;trestbps&#39;, &#39;chol&#39;, &#39;fbs&#39;, &#39;restecg&#39;, &#39;thalach&#39;, &#39;exang&#39;, &#39;oldpeak&#39;, &#39;slope&#39;, &#39;ca&#39;, &#39;thal&#39;]A batch of ages: tf.Tensor([52 40 62 64 37], shape=(5,), dtype=int32)A batch of targets: tf.Tensor([0 0 0 0 0], shape=(5,), dtype=int32)</code></pre><p>我们可以看到<code>tf.data</code>数据集返回一个字典，<code>key</code>为列名(来自<code>dataframe</code>)，值映射到<code>dataframe</code>中的所有行的列值。</p><h3 id="六、演示几种类型的特征列（feature-column）"><a href="#六、演示几种类型的特征列（feature-column）" class="headerlink" title="六、演示几种类型的特征列（feature column）"></a>六、演示几种类型的特征列（feature column）</h3><p><code>TensorFlow</code>提供了许多类型的特征列。在本节中，我们将创建几种类型的特征列，并演示它们如何从<code>dataframe</code>的列转换为<code>TensorFlow</code>的特征列。 </p><p>我们将使用第一批次的训练数据进行演示：</p><pre class=" language-python"><code class="language-python">example_batch <span class="token operator">=</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>train_ds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><p>下面的工具函数用于创建特征列，并转换一个批次的数据：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>feature_column<span class="token punctuation">)</span><span class="token punctuation">:</span>    feature_layer <span class="token operator">=</span> layers<span class="token punctuation">.</span>DenseFeatures<span class="token punctuation">(</span>feature_column<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>feature_layer<span class="token punctuation">(</span>example_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="数值列（Numeric-columns）"><a href="#数值列（Numeric-columns）" class="headerlink" title="数值列（Numeric columns）"></a>数值列（Numeric columns）</h4><p><code>特征列</code>的输出会作为模型的输入(使用上面定义的工具函数，我们将清楚地看到来自<code>dataframe</code>的每一列是如何转换成特征列的)。<code>数值列</code>（numeric column  ）是最简单的特征列类型，它用于表示真实的数值特征。当使用这种特征列时，您的模型将原封不动地从<code>dataframe</code>接收列的值。</p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>numeric_column<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span>demo<span class="token punctuation">(</span>age<span class="token punctuation">)</span></code></pre><pre><code>[[52.] [40.] [62.] [64.] [37.]]</code></pre><p>在本教程使用的心脏病数据集中，<code>dataframe</code>中的大多数列都是<code>数值列</code>。</p><h4 id="桶列（Bucketized-columns）"><a href="#桶列（Bucketized-columns）" class="headerlink" title="桶列（Bucketized columns）"></a>桶列（Bucketized columns）</h4><p>通常，您不希望将数值直接输入模型，而是根据数值范围将其值划分为不同的类别。考虑代表一个人年龄的数值数据，我们可以把年龄分成几个阶段，每个阶段称为一个<code>桶</code>，形成所谓的<code>桶列</code>（<code>bucketized column</code>）。</p><pre class=" language-python"><code class="language-python">age_buckets <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>bucketized_column<span class="token punctuation">(</span>age<span class="token punctuation">,</span> boundaries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">)</span>demo<span class="token punctuation">(</span>age_buckets<span class="token punctuation">)</span></code></pre><pre><code>[[0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.] [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.] [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.] [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]]</code></pre><p>注意上面输出的是<code>one-hot</code>数组，数组中的每一行表示数据中某一行数据代表的某个人的年龄属于哪个年龄范围。</p><h4 id="分类列（Categorical-columns）"><a href="#分类列（Categorical-columns）" class="headerlink" title="分类列（Categorical columns）"></a>分类列（Categorical columns）</h4><p>在这个数据集中，<code>thal</code>列的值是一个字符串(例如：<code>fixed</code>、<code>normal</code>或<code>reversible</code>)。我们不能将字符串直接提供给模型。相反，我们必须首先将它们转换为数值。分类词汇表列（<code>categorical vocabulary columns</code>）提供了一种将字符串表示为一个<code>one-hot</code>向量的方法（就像您在上面看到的年龄桶一样）。可以使用<code>categorical_column_with_vocabulary_list</code>，将词汇表作为列表传递给该函数。也可以使用<code>categorical_column_with_vocabulary_file</code>从文件中加载词汇表。</p><pre class=" language-python"><code class="language-python">thal <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>categorical_column_with_vocabulary_list<span class="token punctuation">(</span>        <span class="token string">'thal'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'fixed'</span><span class="token punctuation">,</span> <span class="token string">'normal'</span><span class="token punctuation">,</span> <span class="token string">'reversible'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>thal_one_hot <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>indicator_column<span class="token punctuation">(</span>thal<span class="token punctuation">)</span>demo<span class="token punctuation">(</span>thal_one_hot<span class="token punctuation">)</span></code></pre><pre><code>[[0. 1. 0.] [0. 0. 1.] [0. 0. 1.] [0. 0. 1.] [0. 1. 0.]]</code></pre><p>在更复杂的数据集中，许多列都可能是类似的分类列。在处理这种类型的数据时，使用<code>feature columns</code> API是最有效的。</p><h4 id="嵌入列（Embedding-columns）"><a href="#嵌入列（Embedding-columns）" class="headerlink" title="嵌入列（Embedding columns）"></a>嵌入列（Embedding columns）</h4><p>假设不是只有几个可能的字符串，而是每个类别有数千个(或更多)值。由于许多原因，随着类别数量的增加，使用<code>one-hot</code>编码训练神经网络将变得不再可行。我们可以使用<code>嵌入列</code>来克服这个限制。<code>嵌入列</code>（<code>embedding column</code>）不是将数据表示为有很多维度的<code>one-hot</code>向量，而是将该数据表示为一个<code>低维度</code>、<code>密集</code>的向量，其中每个单元格可以包含任意数字，而不仅仅是<code>0</code>或<code>1</code>。嵌入的大小(在下面的例子中是<code>8</code>)是一个必须调优的参数。 </p><blockquote><p><strong>关键点</strong>：当分类列有比较多的可能值时，使用嵌入列是最好的选择。 </p></blockquote><p>我们在这里简单演示一下如何这种方法：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 注意，传递给嵌入列的是一个分类列</span>thal_embedding <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>embedding_column<span class="token punctuation">(</span>thal<span class="token punctuation">,</span> dimension<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>demo<span class="token punctuation">(</span>thal_embedding<span class="token punctuation">)</span></code></pre><pre><code>[[-0.6782604  -0.511632    0.01026161 -0.4221003   0.118221   -0.6251951  -0.16774575 -0.17677607] [ 0.45159644 -0.05390342  0.03806166 -0.6353068  -0.0791701  -0.27596644   0.49114797 -0.49382535] [ 0.45159644 -0.05390342  0.03806166 -0.6353068  -0.0791701  -0.27596644   0.49114797 -0.49382535] [ 0.45159644 -0.05390342  0.03806166 -0.6353068  -0.0791701  -0.27596644   0.49114797 -0.49382535] [-0.6782604  -0.511632    0.01026161 -0.4221003   0.118221   -0.6251951  -0.16774575 -0.17677607]]</code></pre><h4 id="散列特征列（Hased-feature-columns）"><a href="#散列特征列（Hased-feature-columns）" class="headerlink" title="散列特征列（Hased feature columns）"></a>散列特征列（Hased feature columns）</h4><p>另一种表示具有大量值的分类列的方法是使用<code>categorical_column_with_hash_bucket</code>，它计算输入的<code>哈希值</code>，然后选择一个合适的桶大小（<code>hash_bucket_size</code>）对字符串进行编码。在使用这种类型的特征列时，您不需要提供<code>词汇表</code>，同时您可以选择让<code>散列桶</code>的数量比实际类别的数量小得多，从而节省空间。 </p><blockquote><p><strong>关键点</strong>：这种技术的一个重要缺点是可能会有冲突，我们可能会遇到不同的字符串被映射到同一个散列桶的冲突。但实际上，即使存在这种冲突，对于某些数据集，这种方法依然表现得很好。</p></blockquote><pre class=" language-python"><code class="language-python">thal_hased <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>categorical_column_with_hash_bucket<span class="token punctuation">(</span>    <span class="token string">'thal'</span><span class="token punctuation">,</span> hash_bucket_size<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>thal_hased_one_hot <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>indicator_column<span class="token punctuation">(</span>thal_hased<span class="token punctuation">)</span>demo<span class="token punctuation">(</span>thal_hased_one_hot<span class="token punctuation">)</span></code></pre><pre><code>[[0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.]]</code></pre><h4 id="交叉特征列（Crossed-feature-columns）"><a href="#交叉特征列（Crossed-feature-columns）" class="headerlink" title="交叉特征列（Crossed feature columns）"></a>交叉特征列（Crossed feature columns）</h4><p>将多个特征组合成一个特征，通常称为<code>特征交叉</code>（<code>feature crosses</code>）。模型能够为每个组合后的特征学习到单独的权重。在这里，我们将使用<code>crossed_column</code>创建一个新的特征，它是<code>年龄</code>和<code>thal</code>的组合特征。 </p><blockquote><p><strong>注意</strong>，<code>crossed_column</code>不会构建所有可能组合的完整表（它可能非常大）。相反，它实际上使用了<code>hashed_column</code>，因此您可以选择表的大小。</p></blockquote><pre class=" language-python"><code class="language-python">crossed_feature <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>crossed_column<span class="token punctuation">(</span><span class="token punctuation">[</span>age_buckets<span class="token punctuation">,</span> thal<span class="token punctuation">]</span><span class="token punctuation">,</span> hash_bucket_size<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>demo<span class="token punctuation">(</span>feature_column<span class="token punctuation">.</span>indicator_column<span class="token punctuation">(</span>crossed_feature<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>[[0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.] [0. 0. 0. ... 0. 0. 0.]]</code></pre><h3 id="七、选择合适的特征列"><a href="#七、选择合适的特征列" class="headerlink" title="七、选择合适的特征列"></a>七、选择合适的特征列</h3><p>我们已经了解了如何使用几种常见类型的<code>特征列</code>。现在我们将用它们来训练一个模型。本教程的目标是向您展示处理特征列所需的完整代码，以及其机制。我们将随意选择一些列来训练我们的模型。 </p><blockquote><p><strong>关键点</strong>：如果您的目标是构建一个精确的模型，那么你需要尝试更大的数据集，并仔细考虑哪些特征是最有意义的，以及它们应该被如何表示。</p></blockquote><pre class=" language-python"><code class="language-python">feature_columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># numeric columns</span><span class="token keyword">for</span> header <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'trestbps'</span><span class="token punctuation">,</span> <span class="token string">'chol'</span><span class="token punctuation">,</span> <span class="token string">'thalach'</span><span class="token punctuation">,</span> <span class="token string">'oldpeak'</span><span class="token punctuation">,</span> <span class="token string">'slope'</span><span class="token punctuation">,</span> <span class="token string">'ca'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    feature_columns<span class="token punctuation">.</span>append<span class="token punctuation">(</span>feature_column<span class="token punctuation">.</span>numeric_column<span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># bucketized columns</span>age_buckets <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>bucketized_column<span class="token punctuation">(</span>age<span class="token punctuation">,</span> boundaries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">)</span>feature_columns<span class="token punctuation">.</span>append<span class="token punctuation">(</span>age_buckets<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># indicator columns</span>thal <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>categorical_column_with_vocabulary_list<span class="token punctuation">(</span>        <span class="token string">'thal'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'fixed'</span><span class="token punctuation">,</span> <span class="token string">'normal'</span><span class="token punctuation">,</span> <span class="token string">'reversible'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>thal_one_hot <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>indicator_column<span class="token punctuation">(</span>thal<span class="token punctuation">)</span>feature_columns<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thal_one_hot<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># embeddding columns</span>thal_embeddding <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>embedding_column<span class="token punctuation">(</span>thal<span class="token punctuation">,</span> dimension<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>feature_columns<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thal_embedding<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># crossed columns</span>crossed_feature <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>crossed_column<span class="token punctuation">(</span><span class="token punctuation">[</span>age_buckets<span class="token punctuation">,</span> thal<span class="token punctuation">]</span><span class="token punctuation">,</span> hash_bucket_size<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>crossed_feature <span class="token operator">=</span> feature_column<span class="token punctuation">.</span>indicator_column<span class="token punctuation">(</span>crossed_feature<span class="token punctuation">)</span>feature_columns<span class="token punctuation">.</span>append<span class="token punctuation">(</span>crossed_feature<span class="token punctuation">)</span></code></pre><h3 id="八、创建一个特征层"><a href="#八、创建一个特征层" class="headerlink" title="八、创建一个特征层"></a>八、创建一个特征层</h3><p>现在我们已经定义了特征列，接下来，我们将使用<code>DenseFeatures</code>创建一个层，该层将被输入到我们的模型。</p><pre class=" language-python"><code class="language-python">feature_layer <span class="token operator">=</span> layers<span class="token punctuation">.</span>DenseFeatures<span class="token punctuation">(</span>feature_columns<span class="token punctuation">)</span></code></pre><p>在前面，我们使用了一个小的批次大小（<code>5</code>）来演示特征列是如何工作的。这里，我们将创建一个新的输入管道，具有更大批次大小（<code>32</code>）。</p><pre class=" language-python"><code class="language-python">batch_size <span class="token operator">=</span> <span class="token number">32</span>train_ds <span class="token operator">=</span> df_to_dataset<span class="token punctuation">(</span>train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span>val_ds <span class="token operator">=</span> df_to_dataset<span class="token punctuation">(</span>val<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span>test_ds <span class="token operator">=</span> df_to_dataset<span class="token punctuation">(</span>test<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span></code></pre><h3 id="九、创建、编译和训练模型"><a href="#九、创建、编译和训练模型" class="headerlink" title="九、创建、编译和训练模型"></a>九、创建、编译和训练模型</h3><p>接下来，我们创建一个模型，并编译和训练它：</p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    feature_layer<span class="token punctuation">,</span>    layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>              loss<span class="token operator">=</span><span class="token string">'binary_crossentropy'</span><span class="token punctuation">,</span>              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span>          validation_data<span class="token operator">=</span>val_ds<span class="token punctuation">,</span>          epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><pre><code>Epoch 1/57/7 [==============================] - 0s 71ms/step - loss: 1.0957 - accuracy: 0.6601 - val_loss: 0.6680 - val_accuracy: 0.6735Epoch 2/57/7 [==============================] - 0s 27ms/step - loss: 0.5393 - accuracy: 0.7600 - val_loss: 0.5512 - val_accuracy: 0.6939Epoch 3/57/7 [==============================] - 0s 27ms/step - loss: 0.6062 - accuracy: 0.7403 - val_loss: 0.6553 - val_accuracy: 0.6735Epoch 4/57/7 [==============================] - 0s 27ms/step - loss: 0.5936 - accuracy: 0.7410 - val_loss: 0.7399 - val_accuracy: 0.6735Epoch 5/57/7 [==============================] - 0s 27ms/step - loss: 0.4790 - accuracy: 0.7734 - val_loss: 0.5646 - val_accuracy: 0.7143&lt;tensorflow.python.keras.callbacks.History at 0x152d5a20&gt;</code></pre><pre class=" language-python"><code class="language-python">loss<span class="token punctuation">,</span> accuracy <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_ds<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Accuracy:'</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span></code></pre><pre><code>2/2 [==============================] - 0s 20ms/step - loss: 0.6159 - accuracy: 0.7213Accuracy: 0.72131145</code></pre><blockquote><p><strong>关键点</strong>：通常情况下，深度学习在更大更复杂的数据集中才会得到的最佳结果。在处理像本教程的小数据集时，我们建议使用<code>决策树</code>或<code>随机森林</code>作为基线。本教程的目标不是训练一个精确的模型，而是演示处理结构化数据的机制，从而在将来处理自己的数据集时，可以使用这里的代码作为一个起点。</p></blockquote><h3 id="十、下一步"><a href="#十、下一步" class="headerlink" title="十、下一步"></a>十、下一步</h3><p>了解<code>结构化数据</code>分类的最佳方法是亲自尝试。我们建议您寻找另一个数据集，并使用类似于上面的代码训练一个模型，然后对其进行分类。为了提高精确度，请仔细考虑模型中应该包含哪些特征，以及它们应该被如何表示。 </p><p>本教程的完整代码请参考<a href="https://github.com/longyg/machine-learning/blob/master/tensorflow-2.0/4-classify-structured-data.ipynb" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TensorFlow 2.0教程】对影视评论进行文本分类</title>
      <link href="/posts/ml/tf2-text-classification.html"/>
      <url>/posts/ml/tf2-text-classification.html</url>
      
        <content type="html"><![CDATA[<p>本文将对电影评论文本进行分类，分为<code>正面</code>影评和<code>负面</code>影评，这是一个在机器学习问题中非常重要且常见的<code>二分类</code>问题。 </p><p>本文演示使用<code>TensorFlow Hub</code>和<code>Keras</code>进行<code>转移学习</code>的基本应用。 </p><p>我们将使用<code>IMDB</code>数据集，其中包含了来自<a href="https://www.imdb.com/" target="_blank" rel="noopener">互联网电影数据库</a>的50,000篇<code>电影评论</code>的文本，它们被分成25000个训练评论文本和25000个测试评论文本。训练集和测试集中的评论类型是比较平衡的，这意味着它们包含相同数量的正面和负面评论。 </p><p>我们同样使用<code>keras</code>高级API，用于在<code>TensorFlow</code>中构建和训练模型。<code>TensorFlow Hub</code>是一个用于<code>转移学习</code>的库和平台，我们将使用其中已经训练好的文本嵌入模型。 </p><p>首先，导入本文将用到的python库：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow <span class="token keyword">import</span> keras<span class="token keyword">import</span> tensorflow_hub <span class="token keyword">as</span> tfhub<span class="token keyword">import</span> tensorflow_datasets <span class="token keyword">as</span> tfds<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Version:"</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Eager mode:"</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>executing_eagerly<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hub version:"</span><span class="token punctuation">,</span> hub<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"GPU is"</span><span class="token punctuation">,</span> <span class="token string">"available"</span> <span class="token keyword">if</span> tf<span class="token punctuation">.</span>test<span class="token punctuation">.</span>is_gpu_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"NOT AVAILABLE"</span><span class="token punctuation">)</span></code></pre><pre><code>Version: 2.0.0-alpha0Eager mode: TrueHub version: 0.4.0GPU is NOT AVAILABLE</code></pre><h3 id="下载IMDB数据集"><a href="#下载IMDB数据集" class="headerlink" title="下载IMDB数据集"></a>下载IMDB数据集</h3><p>TensorFlow <code>datasets</code>库提供了<code>IMDB</code>数据集，下面的代码使用<code>datasets</code>库下载该数据集：</p><pre class=" language-python"><code class="language-python">train_validation_split <span class="token operator">=</span> tfds<span class="token punctuation">.</span>Split<span class="token punctuation">.</span>TRAIN<span class="token punctuation">.</span>subsplit<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> validation_data<span class="token punctuation">)</span><span class="token punctuation">,</span> test_data <span class="token operator">=</span> tfds<span class="token punctuation">.</span>load<span class="token punctuation">(</span>    name<span class="token operator">=</span><span class="token string">"imdb_reviews"</span><span class="token punctuation">,</span>     split<span class="token operator">=</span><span class="token punctuation">(</span>train_validation_split<span class="token punctuation">,</span> tfds<span class="token punctuation">.</span>Split<span class="token punctuation">.</span>TEST<span class="token punctuation">)</span><span class="token punctuation">,</span>    as_supervised<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>部分输出如下：</p><pre><code>Downloading and preparing dataset imdb_reviews (80.23 MiB) to /root/tensorflow_datasets/imdb_reviews/plain_text/0.1.0...HBox(children=(IntProgress(value=1, bar_style=&#39;info&#39;, description=&#39;Dl Completed...&#39;, max=1, style=ProgressStyl…HBox(children=(IntProgress(value=1, bar_style=&#39;info&#39;, description=&#39;Dl Size...&#39;, max=1, style=ProgressStyle(des…HBox(children=(IntProgress(value=1, bar_style=&#39;info&#39;, max=1), HTML(value=&#39;&#39;)))HBox(children=(IntProgress(value=0, description=&#39;Shuffling...&#39;, max=10, style=ProgressStyle(description_width=…WARNING: Logging before flag parsing goes to stderr.W0605 04:08:56.784977 140114589456192 deprecation.py:323] From /root/anaconda3/lib/python3.7/site-packages/tensorflow_datasets/core/file_format_adapter.py:247: tf_record_iterator (from tensorflow.python.lib.io.tf_record) is deprecated and will be removed in a future version.Instructions for updating:Use eager execution and: `tf.data.TFRecordDataset(path)`HBox(children=(IntProgress(value=1, bar_style=&#39;info&#39;, description=&#39;Reading...&#39;, max=1, style=ProgressStyle(des…HBox(children=(IntProgress(value=0, description=&#39;Writing...&#39;, max=2500, style=ProgressStyle(description_width=…...</code></pre><h3 id="探索数据"><a href="#探索数据" class="headerlink" title="探索数据"></a>探索数据</h3><p>首先，让我们花点时间来看看数据集的数据格式。每个样本都包含一段<code>电影评论</code>文本，以及相应的<code>标签</code>。电影评论文本没有经过任何预处理，标签为<code>0</code>或<code>1</code>的整数值，其中<code>0</code>表示<code>负面</code>评论，<code>1</code>表示<code>正面</code>评论。 让我们打印头10个样本看看：</p><pre class=" language-python"><code class="language-python">train_examples_batch<span class="token punctuation">,</span> train_labels_batch <span class="token operator">=</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>train_data<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>train_examples_batch</code></pre><pre><code>&lt;tf.Tensor: id=235, shape=(3,), dtype=string, numpy=array([b&quot;As a lifelong fan of Dickens, I have invariably been disappointed by adaptations of his novels.&lt;br /&gt;&lt;br /&gt;Although his works presented an extremely accurate re-telling of human life at every level in Victorian Britain, throughout them all was a pervasive thread of humour that could be both playful or sarcastic as the narrative dictated. In a way, he was a literary caricaturist and cartoonist. He could be serious and hilarious in the same sentence. He pricked pride, lampooned arrogance, celebrated modesty, and empathised with loneliness and poverty. It may be a clich\xc3\xa9, but he was a people&#39;s writer.&lt;br /&gt;&lt;br /&gt;And it is the comedy that is so often missing from his interpretations. At the time of writing, Oliver Twist is being dramatised in serial form on BBC television. All of the misery and cruelty is their, but non of the humour, irony, and savage lampoonery. The result is just a dark, dismal experience: the story penned by a journalist rather than a novelist. It&#39;s not really Dickens at all.&lt;br /&gt;&lt;br /&gt;&#39;Oliver!&#39;, on the other hand, is much closer to the mark. The mockery of officialdom is perfectly interpreted, from the blustering beadle to the drunken magistrate. The classic stand-off between the beadle and Mr Brownlow, in which the law is described as &#39;a ass, a idiot&#39; couldn&#39;t have been better done. Harry Secombe is an ideal choice.&lt;br /&gt;&lt;br /&gt;But the blinding cruelty is also there, the callous indifference of the state, the cold, hunger, poverty and loneliness are all presented just as surely as The Master would have wished.&lt;br /&gt;&lt;br /&gt;And then there is crime. Ron Moody is a treasure as the sleazy Jewish fence, whilst Oliver Reid has Bill Sykes to perfection.&lt;br /&gt;&lt;br /&gt;Perhaps not surprisingly, Lionel Bart - himself a Jew from London&#39;s east-end - takes a liberty with Fagin by re-interpreting him as a much more benign fellow than was Dicken&#39;s original. In the novel, he was utterly ruthless, sending some of his own boys to the gallows in order to protect himself (though he was also caught and hanged). Whereas in the movie, he is presented as something of a wayward father-figure, a sort of charitable thief rather than a corrupter of children, the latter being a long-standing anti-semitic sentiment. Otherwise, very few liberties are taken with Dickens&#39;s original. All of the most memorable elements are included. Just enough menace and violence is retained to ensure narrative fidelity whilst at the same time allowing for children&#39; sensibilities. Nancy is still beaten to death, Bullseye narrowly escapes drowning, and Bill Sykes gets a faithfully graphic come-uppance.&lt;br /&gt;&lt;br /&gt;Every song is excellent, though they do incline towards schmaltz. Mark Lester mimes his wonderfully. Both his and my favourite scene is the one in which the world comes alive to &#39;who will buy&#39;. It&#39;s schmaltzy, but it&#39;s Dickens through and through.&lt;br /&gt;&lt;br /&gt;I could go on. I could commend the wonderful set-pieces, the contrast of the rich and poor. There is top-quality acting from more British regulars than you could shake a stick at.&lt;br /&gt;&lt;br /&gt;I ought to give it 10 points, but I&#39;m feeling more like Scrooge today. Soak it up with your Christmas dinner. No original has been better realised.&quot;,       b&quot;Oh yeah! Jenna Jameson did it again! Yeah Baby! This movie rocks. It was one of the 1st movies i saw of her. And i have to say i feel in love with her, she was great in this move.&lt;br /&gt;&lt;br /&gt;Her performance was outstanding and what i liked the most was the scenery and the wardrobe it was amazing you can tell that they put a lot into the movie the girls cloth were amazing.&lt;br /&gt;&lt;br /&gt;I hope this comment helps and u can buy the movie, the storyline is awesome is very unique and i&#39;m sure u are going to like it. Jenna amazed us once more and no wonder the movie won so many awards. Her make-up and wardrobe is very very sexy and the girls on girls scene is amazing. specially the one where she looks like an angel. It&#39;s a must see and i hope u share my interests&quot;,       b&quot;I saw this film on True Movies (which automatically made me sceptical) but actually - it was good. Why? Not because of the amazing plot twists or breathtaking dialogue (of which there is little) but because actually, despite what people say I thought the film was accurate in it&#39;s depiction of teenagers dealing with pregnancy.&lt;br /&gt;&lt;br /&gt;It&#39;s NOT Dawson&#39;s Creek, they&#39;re not graceful, cool witty characters who breeze through sexuality with effortless knowledge. They&#39;re kids and they act like kids would. &lt;br /&gt;&lt;br /&gt;They&#39;re blunt, awkward and annoyingly confused about everything. Yes, this could be by accident and they could just be bad actors but I don&#39;t think so. Dermot Mulroney gives (when not trying to be cool) a very believable performance and I loved him for it. Patricia Arquette IS whiny and annoying, but she was pregnant and a teenagers? The combination of the two isn&#39;t exactly lavender on your pillow. The plot was VERY predictable and but so what? I believed them, his stress and inability to cope - her brave, yet slightly misguided attempts to bring them closer together. I think the characters, acted by anyone else, WOULD indeed have been annoying and unbelievable but they weren&#39;t. It reflects the surreality of the situation they&#39;re in, that he&#39;s sitting in class and she walks on campus with the baby. I felt angry at her for that, I felt angry at him for being such a child and for blaming her. I felt it all.&lt;br /&gt;&lt;br /&gt;In the end, I loved it and would recommend it.&lt;br /&gt;&lt;br /&gt;Watch out for the scene where Dermot Mulroney runs from the disastrous counselling session - career performance.&quot;],      dtype=object)&gt;</code></pre><p>对应的头10个样本的标签：</p><pre class=" language-python"><code class="language-python">train_labels_batch</code></pre><pre><code>&lt;tf.Tensor: id=231, shape=(10,), dtype=int64, numpy=array([1, 1, 1, 1, 1, 1, 0, 1, 1, 0])&gt;</code></pre><h3 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h3><p><code>神经网络</code>模型一般是由多个<code>层</code>叠加起来构成的，我们一般需要考虑如下三个主要因素来构建模型:</p><ul><li>如何<code>表示</code>文本？</li><li>模型中应该使用多少<code>层</code>？</li><li>每层应该有多少个<code>隐藏单元</code>（即<code>神经元</code>，也称为<code>节点</code>）？</li></ul><p>在本例中，输入数据由一段文本构成的句子组成，要预测的标签是<code>0</code>或<code>1</code>。 </p><p>表示文本的一种方法是将句子转换成<code>嵌入向量</code>。我们可以使用一个预先训练好的文本嵌入模型作为第一层。使用已训练好的文本嵌入模型有以下三个优点：</p><ul><li>我们不需要考虑文本预处理</li><li>我们可以从<code>转移学习</code>中受益</li><li>嵌入的大小是固定的，所以处理起来更简单。</li></ul><p>在本例中，我们将使用一个来自<code>TensorFlow Hub</code>的预先训练好的文本嵌入模型，名为 <a href="https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim/1" target="_blank" rel="noopener">google/tf2-preview/gnews-swivel-20dim/1</a>。 </p><p><code>TensorFlow Hub</code>中还有另外三个其他的训练好的模型，也可以用于本例的测试：</p><ul><li><a href="https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim-with-oov/1" target="_blank" rel="noopener">google/tf2-preview/gnews-swivel-20dim-with-oov/1</a> ： 它与<a href="https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim/1" target="_blank" rel="noopener">google/tf2-preview/gnews-swivel-20dim/1</a>相似，但是有<code>2.5%</code>的词汇表转换了<code>OOV</code>桶。如果任务的词汇表和模型的词汇表没有完全重叠，使用它将得到更好效果。</li><li><a href="https://tfhub.dev/google/tf2-preview/nnlm-en-dim50/1" target="_blank" rel="noopener">google/tf2-preview/nnlm-en-dim50/1</a>： 一个更大的模型，有大约<code>1M</code>的词汇量和<code>50</code>个维度。</li><li><a href="https://tfhub.dev/google/tf2-preview/nnlm-en-dim128/1" target="_blank" rel="noopener">google/tf2-preview/nnlm-en-dim128/1</a>：一个更大的模型，有大约<code>1M</code>的词汇量和<code>128</code>个维度。</li></ul><p>接下来，我们首先创建一个<code>Keras</code>层，我们使用<code>TensorFlow Hub</code>模型来进行文本嵌入，并对几个输入样本进行测试。注意，无论输入文本的长度如何，文本嵌入的输出形状都是固定的，大小为(<code>num_examples</code>, <code>embedding_dimension</code>) 。</p><pre class=" language-python"><code class="language-python">embedding <span class="token operator">=</span> <span class="token string">"https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim/1"</span>hub_layer <span class="token operator">=</span> hub<span class="token punctuation">.</span>KerasLayer<span class="token punctuation">(</span>embedding<span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>string<span class="token punctuation">,</span> trainable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>hub_layer<span class="token punctuation">(</span>train_examples_batch<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>&lt;tf.Tensor: id=416, shape=(3, 20), dtype=float32, numpy=array([[ 3.9819887 , -4.4838037 ,  5.177359  , -2.3643482 , -3.2938678 ,        -3.5364532 , -2.4786978 ,  2.5525482 ,  6.688532  , -2.3076782 ,        -1.9807833 ,  1.1315885 , -3.0339816 , -0.7604128 , -5.743445  ,         3.4242578 ,  4.790099  , -4.03061   , -5.992149  , -1.7297493 ],       [ 3.4232912 , -4.230874  ,  4.1488533 , -0.29553518, -6.802391  ,        -2.5163853 , -4.4002395 ,  1.905792  ,  4.7512794 , -0.40538004,        -4.3401685 ,  1.0361497 ,  0.9744097 ,  0.71507156, -6.2657013 ,         0.16533905,  4.560262  , -1.3106939 , -3.1121316 , -2.1338716 ],       [ 3.8508697 , -5.003031  ,  4.8700504 , -0.04324996, -5.893603  ,        -5.2983093 , -4.004676  ,  4.1236343 ,  6.267754  ,  0.11632943,        -3.5934832 ,  0.8023905 ,  0.56146765,  0.9192484 , -7.3066816 ,         2.8202746 ,  6.2000837 , -3.5709393 , -4.564525  , -2.305622  ]],      dtype=float32)&gt;</code></pre><p>现在，我们可以使用上面创建的层来构建完整的<code>神经网络模型</code>了：</p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>hub_layer<span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Model: &quot;sequential&quot;_________________________________________________________________Layer (type)                 Output Shape              Param #   =================================================================keras_layer (KerasLayer)     (None, 20)                400020    _________________________________________________________________dense (Dense)                (None, 16)                336       _________________________________________________________________dense_1 (Dense)              (None, 1)                 17        =================================================================Total params: 400,373Trainable params: 400,373Non-trainable params: 0_________________________________________________________________</code></pre><p>可以看到，我们把几个<code>层</code>依次叠加起来，构成了我们的<code>分类器</code>模型：</p><ol><li>第一层是一个<code>TensorFlow Hub</code>层。我们使用了一个预先训练好的被保存起来的模型，通过它将一个句子映射成一个文本<code>嵌入向量</code>。这个训练好的模型将句子分割成<code>标记</code>（<code>token</code>），然后嵌入每个标记，然后组合嵌入形成<code>嵌入向量</code>。结果的维度是：(<code>num_examples</code>, <code>embedding_dimension</code>) 。</li><li>第一层输出的固定长度的向量紧接着通过一个有<code>16</code>个<code>隐藏单元</code>的<code>全连接</code>(<code>Dense</code>)层。</li><li>最后一层是一个单节点<code>输出层</code>，使用<code>sigmoid</code>激活函数，这个值是一个介于<code>0</code>和<code>1</code>之间的浮点数，表示一个概率或<code>置信级别</code>。</li></ol><p>接下来我们需要编译模型。</p><h4 id="选择损失函数和优化器"><a href="#选择损失函数和优化器" class="headerlink" title="选择损失函数和优化器"></a>选择损失函数和优化器</h4><p>模型需要指定一个<code>损失函数</code>和一个用于训练的<code>优化器</code>。由于这是一个二元分类问题，并且模型输出一个概率，所以我们将使用<code>binary_crossentropy</code>损失函数。 </p><p>这不是损失函数的唯一选择，例如，你可以选择<code>mean_squared_error</code> （<code>均方误差</code>）。但是，一般来说，<code>binary_crossentropy</code> 更适合处理概率，它测量概率分布之间的<code>差距</code>，在我们的例子中，它表示测量的真实分布和预测之间的<code>差距</code>。 </p><p>当我们研究<code>回归问题</code>(例如，预测房价)时，我们可以使用<code>均方误差</code>损失函数。 </p><p>现在，为我们的模型配置<code>优化器</code>和<code>损失函数</code>，同时指定<code>检测参数</code>：</p><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>              loss<span class="token operator">=</span><span class="token string">'binary_crossentropy'</span><span class="token punctuation">,</span>              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>我们对模型进行<code>20</code>次迭代训练，也就是使用训练数据中的所有样本进行<code>20</code>次迭代。在训练过程中，对来自验证集的10000个样本进行验证，从而监测模型的<code>损失</code>和<code>准确性</code>：</p><pre class=" language-python"><code class="language-python">history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_data<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>                    validation_data<span class="token operator">=</span>validation_data<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>部分输出如下：</p><pre><code>Epoch 1/2030/30 [==============================] - 7s 245ms/step - loss: 0.7742 - accuracy: 0.4614 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00Epoch 2/2030/30 [==============================] - 6s 210ms/step - loss: 0.6759 - accuracy: 0.5783 - val_loss: 0.6483 - val_accuracy: 0.6273Epoch 3/2030/30 [==============================] - 7s 221ms/step - loss: 0.6084 - accuracy: 0.6863 - val_loss: 0.5836 - val_accuracy: 0.7120Epoch 4/2030/30 [==============================] - 7s 219ms/step - loss: 0.5588 - accuracy: 0.7369 - val_loss: 0.5470 - val_accuracy: 0.7414Epoch 5/2030/30 [==============================] - 6s 208ms/step - loss: 0.5192 - accuracy: 0.7703 - val_loss: 0.5117 - val_accuracy: 0.7655...Epoch 20/2030/30 [==============================] - 6s 214ms/step - loss: 0.1667 - accuracy: 0.9414 - val_loss: 0.2963 - val_accuracy: 0.8758</code></pre><h3 id="评估模型"><a href="#评估模型" class="headerlink" title="评估模型"></a>评估模型</h3><p>使用<code>evaluate</code>函数来验证模型对测试集的预测情况。该函数将返回两个值：<code>损失值</code>和<code>准确率</code>。</p><pre class=" language-python"><code class="language-python">results <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_data<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> zip<span class="token punctuation">(</span>model<span class="token punctuation">.</span>metrics_names<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s: %.3f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>25000/25000 [==============================] - 1s 35us/step[0.32395469411849975, 0.87264]</code></pre><p>可以看到，使用这种相当简单的方法可以达到约<code>87%</code>的准确率。如果采用更高级的方法，模型的准确率应该可以接近<code>95%</code>。</p><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><p>要了解处理文本输入的更一般的方法，以及在训练时对准确率和损失值的更详细分析过程，请看<a href="https://tensorflow.google.cn/tutorials/keras/basic_text_classification" target="_blank" rel="noopener">这里</a>。</p><p>本文完整代码请参考<a href="https://github.com/longyg/machine-learning/blob/master/tensorflow-2.0/3-classify-text.ipynb" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TensorFlow 2.0教程】训练第一个神经网络：图片分类</title>
      <link href="/posts/ml/tf2-classify-images.html"/>
      <url>/posts/ml/tf2-classify-images.html</url>
      
        <content type="html"><![CDATA[<p>本教程将训练一个神经网络模型来对衣服图片进行分类，比如运动鞋和衬衫。这是一个完整的机器学习示例，完成本教程后，你就可以在此基础上使用<code>TensorFlow</code>处理实际的分类问题。你也将看到使用<code>TensorFlow 2.0</code>处理此类问题是多么的直观和简单。 </p><p>本教程同样会使用<code>keras</code>的高级API，在<code>TensorFlow</code>中构建和训练模型。从<code>TensorFlow 2.0</code>开始，使用<code>keras</code>高级API进行编程已经成为首选，因为它从更高层次抽象了底层API，从而极大地简化了开发。 </p><p>首先，导入本教程将使用的库：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">from</span> tensorflow <span class="token keyword">import</span> keras<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">print</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span></code></pre><pre><code>2.0.0-alpha0</code></pre><h3 id="导入数据集"><a href="#导入数据集" class="headerlink" title="导入数据集"></a>导入数据集</h3><p>本教程将使用<a href="https://github.com/zalandoresearch/fashion-mnist" target="_blank" rel="noopener">Fashion MNIST数据集</a>，其中包含<code>10</code>个类别，以及<code>70000</code>张灰度图片。图片显示的是低分辨率(<code>28×28</code>像素)的衣服，如下图所示： </p><p><a href="https://i.loli.net/2019/06/02/5cf39f9e53eaa45949.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/02/5cf39f9e53eaa45949.png" alt></a> </p><p><code>Fashion MNIST</code>数据集是经典<code>MNIST</code>手写数字数据集的替代——现在通常被用作计算机视觉机器学习的<code>Hello, World</code>程序。经典<code>MNIST</code>数据集包含手写数字(0、1、2等)的图片，其格式与我们将在这里使用的衣服图片相同。 </p><p>本教程之所以使用<code>Fashion MNIST</code>数据集，因为对这个数据集的分类比普通<code>MNIST</code>手写数字数据集更具挑战性。这两个数据集都相对较小，一般用于验证算法，它们都是用于测试和调试代码的一个比较好的起点。 </p><p>我们将使用<code>60000</code>张训练图片来训练神经网络模型，并使用<code>10000</code>张图片来评估模型对图片分类的准确率。我们可以直接从<code>TensorFlow</code>获取<code>Fashion MNIST</code>，以下代码从<code>TensorFlow</code>导入和加载<code>Fashion MNIST</code>数据：</p><pre class=" language-python"><code class="language-python">fashion_mnist <span class="token operator">=</span> keras<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>fashion_mnist<span class="token punctuation">(</span>train_images<span class="token punctuation">,</span> train_labels<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>test_images<span class="token punctuation">,</span> test_labels<span class="token punctuation">)</span> <span class="token operator">=</span> fashion_mnist<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz32768/29515 [=================================] - 0s 2us/stepDownloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz26427392/26421880 [==============================] - 11s 0us/stepDownloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz8192/5148 [===============================================] - 0s 1us/stepDownloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz4423680/4422102 [==============================] - 2s 1us/step</code></pre><p>加载的数据集包含4个<code>Numpy</code>数组：</p><ul><li><code>train_images</code> 和<code>train_labels</code>数组是训练数据集，也就是用来训练模型的数据。</li><li><code>test_images</code>和<code>test_labels</code>数组是测试数据集，模型将使用它们进行测试。</li></ul><p>数据集中的图片都是<code>28x28</code>的<code>NumPy</code>数组，像素值从<code>0</code>到<code>255</code>。标签是一个整数数组，值从<code>0</code>到<code>9</code>，对应于图片所代表的服装类别: </p><table><thead><tr><th>标签</th><th>所代表的服装类别</th></tr></thead><tbody><tr><td>0</td><td>T-shirt/top</td></tr><tr><td>1</td><td>Trouser</td></tr><tr><td>2</td><td>Pullover</td></tr><tr><td>3</td><td>Dress</td></tr><tr><td>4</td><td>Coat</td></tr><tr><td>5</td><td>Sandal</td></tr><tr><td>6</td><td>Shirt</td></tr><tr><td>7</td><td>Sneaker</td></tr><tr><td>8</td><td>Bag</td></tr><tr><td>9</td><td>Ankle boot</td></tr></tbody></table><p>每张图片都映射到了一个<code>0</code>到<code>9</code>的数字标签，而没有映射到类别名称。由于数据集中没有包含各个类别的名称，所以我们可以事先将它们存储起来，以便稍后画图时使用:</p><pre class=" language-python"><code class="language-python">class_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'T-shirt/top'</span><span class="token punctuation">,</span> <span class="token string">'Trouser'</span><span class="token punctuation">,</span> <span class="token string">'Pullover'</span><span class="token punctuation">,</span> <span class="token string">'Dress'</span><span class="token punctuation">,</span> <span class="token string">'Coat'</span><span class="token punctuation">,</span>               <span class="token string">'Sandal'</span><span class="token punctuation">,</span> <span class="token string">'Shirt'</span><span class="token punctuation">,</span> <span class="token string">'Sneaker'</span><span class="token punctuation">,</span> <span class="token string">'Bag'</span><span class="token punctuation">,</span> <span class="token string">'Ankle boot'</span><span class="token punctuation">]</span></code></pre><h3 id="探索数据"><a href="#探索数据" class="headerlink" title="探索数据"></a>探索数据</h3><p>在训练模型之前，让我们先研究一下数据集。如下所示，训练集中有<code>60000</code>张图像，每张图像表示为<code>28x28</code>像素：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>train_images<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><pre><code>(60000, 28, 28)</code></pre><p>同样，训练集中有<code>60000</code>个标签：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_labels<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>60000</code></pre><p>每个标签都是<code>0</code>到<code>9</code>之间的整数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>train_labels<span class="token punctuation">)</span></code></pre><pre><code>[9 0 0 ... 3 0 5]</code></pre><p>测试集中有<code>10000</code>张图片，同样，每张图片用<code>28×28</code>像素表示：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>test_images<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><pre><code>(10000, 28, 28)</code></pre><p>测试集包含<code>10000</code>张图片的标签：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>test_labels<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>10000</code></pre><p>标签值同样是<code>0</code>到<code>9</code>之间的整数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>test_labels<span class="token punctuation">)</span></code></pre><pre><code>[9 2 1 ... 8 1 5]</code></pre><h3 id="预处理数据"><a href="#预处理数据" class="headerlink" title="预处理数据"></a>预处理数据</h3><p>在训练网络之前，必须对数据进行预处理。如果你检查训练集中的第一张图片，你会发现像素值在<code>0</code>到<code>255</code>之间:</p><pre class=" language-python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>train_images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a href="https://i.loli.net/2019/06/02/5cf3d0a43606b48077.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/02/5cf3d0a43606b48077.png" alt></a> </p><p>在将这些值输入神经网络模型之前，我们将这些值缩小到<code>0</code>到<code>1</code>的范围。为此，我们将值除以<code>255</code>。值得注意的是，训练集和测试集必须以相同的方式进行预处理：</p><pre class=" language-python"><code class="language-python">train_images <span class="token operator">=</span> train_images <span class="token operator">/</span> <span class="token number">255.0</span>test_images <span class="token operator">=</span> test_images <span class="token operator">/</span> <span class="token number">255.0</span></code></pre><p>为了验证数据的格式是否正确，以及我们是否准备好构建和训练神经网络模型，让我们显示训练集中的前<code>25</code>张图片，并在每张图片下面显示类别名称。</p><pre class=" language-python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>train_images<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>binary<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>class_names<span class="token punctuation">[</span>train_labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a href="https://i.loli.net/2019/06/02/5cf3d18ca565584447.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/02/5cf3d18ca565584447.png" alt></a></p><h3 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h3><p>当我们构建神经网络时，需要对模型的层进行配置，然后对模型进行编译。</p><h4 id="配置模型层（layer）"><a href="#配置模型层（layer）" class="headerlink" title="配置模型层（layer）"></a>配置模型层（<code>layer</code>）</h4><p>一个神经网络的基本构件是<code>层</code>（<code>layer</code>）。<code>层</code>从输入的数据中提取<code>表示</code>（<code>representation</code>），并希望这些被提取的表示对正在处理的问题具有意义。 </p><p>大多数深度学习都是由一系列简单的<code>层次链</code>组成的。如<code>tf.keras.layers.Dense</code>的大多数层都将在网络的训练中学习到参数。我们依然使用<code>Sequential</code>层叠模型构建一个<code>全连接网络</code>：</p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span>input\_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>网络的第一层是<code>tf.keras.layers.Flatten</code>，该层将图像的格式从二维数组(<code>28×28</code>像素)转换为一维数组(<code>28 * 28 = 784</code>像素)。将这个层看作是将图像中的像素行分解并排列起来。这一层没有需要学习的参数，它只重新格式化数据。 </p><p>当图片像素被平铺后，网络由两个<code>tf.keras.layers.Dense</code>紧凑层组成。它们是紧密相连的，或者说<code>全连接层</code>。第一个<code>Dense层</code>有<code>128</code>个节点(或<code>神经元</code>)，第二个(也是最后一个)<code>Dense层</code>是一个<code>10</code>个节点的<code>softmax 层</code>，它返回一个由<code>10</code>个概率值组成的数组，其和为<code>1</code>。每个节点包含一个评分值，表示当前图片属于<code>10</code>个类别中的一个的概率。</p><h4 id="编译模型"><a href="#编译模型" class="headerlink" title="编译模型"></a>编译模型</h4><p>在模型准备好训练之前，它需要一些设置，这些设置是在模型的<code>编译</code>阶段完成的:</p><ul><li>指定<code>损失函数</code>（Loss function）：测量模型在训练过程中有多精确。我们需要最小化这个函数来“引导”模型朝着正确的方向。</li><li>指定<code>优化器</code>（Optimizer） ：这是模型根据所看到的数据及其损失函数更新模型参数的方法。</li><li>指定<code>度量</code>参数（Metrics） ：用于监测训练和测试步骤。下面的例子使用准确率（accuracy），即被正确分类的图片比例。</li></ul><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>              loss<span class="token operator">=</span><span class="token string">'sparse_categorical_crossentropy'</span><span class="token punctuation">,</span>              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>训练神经网络模型需要以下步骤：</p><ol><li>将训练数据提供给模型。在本例中，训练数据为<code>train_images</code>和<code>train_labels</code>数组。</li><li>模型不断学习，将图像和标签关联起来。</li><li>使用模型对测试集做出预测，在这个例子中，测试集是<code>test_image</code>数组，我们需要验证预测结果与<code>test_labels</code>数组中的标签是否匹配。</li></ol><p>要对模型进行训练，我们需要调用<code>fit</code>函数——之所以该函数叫<code>fit</code>，是因为它将模型与训练数据进行<code>匹配</code>:</p><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_images<span class="token punctuation">,</span> train_labels<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><pre><code>Epoch 1/1060000/60000 [==============================] - 3s 52us/sample - loss: 0.4966 - accuracy: 0.8245Epoch 2/1060000/60000 [==============================] - 3s 44us/sample - loss: 0.3762 - accuracy: 0.8634Epoch 3/1060000/60000 [==============================] - 3s 49us/sample - loss: 0.3370 - accuracy: 0.8776Epoch 4/1060000/60000 [==============================] - 3s 49us/sample - loss: 0.3129 - accuracy: 0.8853Epoch 5/1060000/60000 [==============================] - 3s 45us/sample - loss: 0.2938 - accuracy: 0.8914Epoch 6/1060000/60000 [==============================] - 3s 44us/sample - loss: 0.2780 - accuracy: 0.8972Epoch 7/1060000/60000 [==============================] - 3s 44us/sample - loss: 0.2658 - accuracy: 0.9014Epoch 8/1060000/60000 [==============================] - 3s 44us/sample - loss: 0.2550 - accuracy: 0.9050Epoch 9/1060000/60000 [==============================] - 3s 43us/sample - loss: 0.2454 - accuracy: 0.9079Epoch 10/1060000/60000 [==============================] - 3s 44us/sample - loss: 0.2364 - accuracy: 0.9111&lt;tensorflow.python.keras.callbacks.History at 0x17e09828&gt;</code></pre><p>在模型训练过程中，<code>损失值</code>与<code>准确率</code>这两个指标会被显示。可以看到最终该模型对训练数据的准确率达到了约<code>0.88</code>(<code>88%</code>)。</p><h3 id="评估模型准确率"><a href="#评估模型准确率" class="headerlink" title="评估模型准确率"></a>评估模型准确率</h3><p>接下来，我们看看模型在测试数据集上的性能：</p><pre class=" language-python"><code class="language-python">test_loss<span class="token punctuation">,</span> test_acc <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_images<span class="token punctuation">,</span> test_labels<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nTest accuracy: '</span><span class="token punctuation">,</span> test_acc<span class="token punctuation">)</span></code></pre><pre><code>10000/10000 [==============================] - 0s 28us/sample - loss: 0.3420 - accuracy: 0.8845Test accuracy:  0.8845</code></pre><p>结果表明，测试数据集的准确率略低于训练数据集的准确率，这表示<code>过拟合</code>了。<code>过拟合</code>是指机器学习模型在新的、以前没见过的输入上的表现比在训练数据上差。</p><h3 id="使用模型进行预测"><a href="#使用模型进行预测" class="headerlink" title="使用模型进行预测"></a>使用模型进行预测</h3><p>通过已训练的模型，我们可以用它来对新的图片进行预测。</p><pre class=" language-python"><code class="language-python">predictions <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_images<span class="token punctuation">)</span></code></pre><p>这里，我们用模型预测了测试集中的所有图片，让我们看一下第一个图片的预测结果：</p><pre class=" language-python"><code class="language-python">predictions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><pre><code>array([1.9848918e-07, 6.2967965e-06, 1.2487946e-07, 4.5386751e-06,       1.3287071e-06, 3.8301453e-02, 5.6206454e-07, 6.0179353e-02,       6.4673060e-07, 9.0150553e-01], dtype=float32)</code></pre><p>每个图片的预测结果都是由10个数字组成的数组，它们表示了图片属于10个类别中的每个类别的<code>置信度</code>。我们可以看看哪个标签的置信度最高：</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>predictions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>9</code></pre><p>因此，模型最确信的标签是<code>9</code>，<code>class_names[9]</code> 是一双踝靴（ankle boot）。我们检查一下第一个图片的测试标签，也是<code>9</code>，因此模型正确地预测了该图片的分类：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>test_labels<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>9</code></pre><p>我们可以通过画图来查看完整的10个类别的预测值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">plot_image</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> predictions_array<span class="token punctuation">,</span> true_label<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span>    predictions_array<span class="token punctuation">,</span> true_label<span class="token punctuation">,</span> img <span class="token operator">=</span> predictions_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> true_label<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> img<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>binary<span class="token punctuation">)</span>    predicted_label <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>predictions_array<span class="token punctuation">)</span>    <span class="token keyword">if</span> predicted_label <span class="token operator">==</span> true_label<span class="token punctuation">:</span>        color <span class="token operator">=</span> <span class="token string">'blue'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        color <span class="token operator">=</span> <span class="token string">'red'</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'{} {:2.0f}% ({})'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>class_names<span class="token punctuation">[</span>predicted_label<span class="token punctuation">]</span><span class="token punctuation">,</span>                                         <span class="token number">100</span><span class="token operator">*</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>predictions_array<span class="token punctuation">)</span><span class="token punctuation">,</span>                                         class_names<span class="token punctuation">[</span>true_label<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         color<span class="token operator">=</span>color<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">plot_value_array</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> predictions_array<span class="token punctuation">,</span> true_label<span class="token punctuation">)</span><span class="token punctuation">:</span>    predictions_array<span class="token punctuation">,</span> true_label <span class="token operator">=</span> predictions_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> true_label<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    thisplot <span class="token operator">=</span> plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> predictions_array<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#777777'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    predicted_label <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>predictions_array<span class="token punctuation">)</span>    thisplot<span class="token punctuation">[</span>predicted_label<span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>    thisplot<span class="token punctuation">[</span>true_label<span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span></code></pre><p>让我们看看第1张图片（索引为<code>0</code>）的预测结果和预测数组：</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>plot_image<span class="token punctuation">(</span>i<span class="token punctuation">,</span> predictions<span class="token punctuation">,</span> test_labels<span class="token punctuation">,</span> test_images<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>plot_value_array<span class="token punctuation">(</span>i<span class="token punctuation">,</span> predictions<span class="token punctuation">,</span> test_labels<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a href="https://i.loli.net/2019/06/02/5cf3e7ac1f95e36661.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/02/5cf3e7ac1f95e36661.png" alt></a> </p><p>再随机看看某个图片：</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">12</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plot_image<span class="token punctuation">(</span>i<span class="token punctuation">,</span> predictions<span class="token punctuation">,</span> test_labels<span class="token punctuation">,</span> test_images<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>plot_value_array<span class="token punctuation">(</span>i<span class="token punctuation">,</span> predictions<span class="token punctuation">,</span>  test_labels<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a href="https://i.loli.net/2019/06/02/5cf3e83f3f45771941.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/02/5cf3e83f3f45771941.png" alt></a> </p><p>我们也可以画出更多的图片。正确的预测标签是蓝色的，错误的预测标签是红色的。预测结果数组中的数字表示预测为某标签的百分比(满分为<code>100</code>)，比例越高，表明模型认为图片属于某个类别的可能性越大。请注意，即使置信度非常高，也不代表预测结果是对的。</p><pre class=" language-python"><code class="language-python">num_rows <span class="token operator">=</span> <span class="token number">5</span>num_cols <span class="token operator">=</span> <span class="token number">3</span>num_images <span class="token operator">=</span> num_rows <span class="token operator">*</span> num_colsplt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span>num_cols<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> num_rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_images<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>num_rows<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>num_cols<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    plot_image<span class="token punctuation">(</span>i<span class="token punctuation">,</span> predictions<span class="token punctuation">,</span> test_labels<span class="token punctuation">,</span> test_images<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>num_rows<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>num_cols<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>    plot_value_array<span class="token punctuation">(</span>i<span class="token punctuation">,</span> predictions<span class="token punctuation">,</span> test_labels<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a href="https://i.loli.net/2019/06/02/5cf3e9e955b4c82155.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/02/5cf3e9e955b4c82155.png" alt></a> </p><p>最后，我们利用训练后的模型对单个图片进行预测。</p><pre class=" language-python"><code class="language-python">img <span class="token operator">=</span> test_images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><pre><code>(28, 28)</code></pre><p><code>TensorFlow</code>的模型被优化从而可以一次性对一批或一组样本进行预测。因此，即使我们想要预测的是一张图片，我们也需要将它添加到列表中：</p><pre class=" language-python"><code class="language-python">img <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><pre><code>(1, 28, 28)</code></pre><p>现在，我们可以预测这张图片的正确标签了：</p><pre class=" language-python"><code class="language-python">predictions_single <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>predictions_single<span class="token punctuation">)</span></code></pre><pre><code>[[1.9848956e-07 6.2967965e-06 1.2487935e-07 4.5386710e-06 1.3287057e-06  3.8301427e-02 5.6206505e-07 6.0179342e-02 6.4673003e-07 9.0150553e-01]]</code></pre><pre class=" language-python"><code class="language-python">plot_value_array<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> predictions_single<span class="token punctuation">,</span> test_labels<span class="token punctuation">)</span>_ <span class="token operator">=</span> plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> class_names<span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span></code></pre><p><a href="https://i.loli.net/2019/06/02/5cf3eb3e09bbd32804.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/02/5cf3eb3e09bbd32804.png" alt></a> </p><p><code>predict</code>函数返回一个列表的列表——其中一个列表对应批次数据中的一个图片。 </p><p>如下，获取我们所预测(单个)的图片的预测结果：</p><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>predictions_single<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>9</code></pre><p>和之前一样，该模型预测的标签为<code>9</code>。 </p><p>本文完整代码请参考<a href="https://github.com/longyg/machine-learning/blob/master/tensorflow-2.0/2-classify-images.ipynb" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TensorFlow 2.0教程】初学者入门指南</title>
      <link href="/posts/ml/tf2-get-started-for-beginners.html"/>
      <url>/posts/ml/tf2-get-started-for-beginners.html</url>
      
        <content type="html"><![CDATA[<p>本文是<code>TensorFlow 2.0</code>入门示例，使用<code>TensorFlow 2.0</code>对MNIST手写数字进行识别，从而展示了基于<code>TensorFlow 2.0</code>进行开发的最简单的流程。 </p><p>首先导入<code>TensorFlow 2.0</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token keyword">print</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span></code></pre><pre><code>2.0.0-alpha0</code></pre><p>加载并准备<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">MNIST手写数字数据集</a>，并将样本从整数转换为浮点数:</p><pre class=" language-python"><code class="language-python">mnist <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>mnist<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> mnist<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>x_train<span class="token punctuation">,</span> x_test <span class="token operator">=</span> x_train<span class="token operator">/</span><span class="token number">255.0</span><span class="token punctuation">,</span> x_test<span class="token operator">/</span><span class="token number">255.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><pre><code>Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz11493376/11490434 [==============================] - 0s 0us/step(60000, 28, 28)(10000, 28, 28)</code></pre><p>首次运行时会下载数据集，从输出的log中可以看到。当已经下载后，不会再重复下载。 </p><p>该数据集中有<code>60000</code>个训练样本，<code>10000</code>个测试样本，每个样本都是<code>28x28</code>的二维数组，数组中每个数字代表图片的一个像素值。由于像素值最大为<code>255</code>，为了对数据归一化，我们对每个值除以<code>255</code>。</p><p>接下来，构建一个最基本的层叠模型（<code>Sequential</code>），并选择一个<code>优化器</code>和<code>损失函数</code>进行训练:</p><pre class=" language-python"><code class="language-python">model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span>input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>              loss<span class="token operator">=</span><span class="token string">'sparse_categorical_crossentropy'</span><span class="token punctuation">,</span>              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>通过<code>tf.keras.Sequential</code>创建模型后，调用模型的<code>compile</code>函数编译模型，编译时指定优化器，损失函数，和监测的指标，这里只监测了准确率（<code>Accuracy</code>）。 </p><p>模型创建并编译后，开始训练模型：</p><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><pre><code>Epoch 1/560000/60000 [==============================] - 3s 48us/sample - loss: 0.2970 - accuracy: 0.9124Epoch 2/560000/60000 [==============================] - 3s 45us/sample - loss: 0.1433 - accuracy: 0.9577Epoch 3/560000/60000 [==============================] - 3s 45us/sample - loss: 0.1077 - accuracy: 0.9673Epoch 4/560000/60000 [==============================] - 3s 44us/sample - loss: 0.0881 - accuracy: 0.9732Epoch 5/560000/60000 [==============================] - 3s 45us/sample - loss: 0.0752 - accuracy: 0.9770&lt;tensorflow.python.keras.callbacks.History at 0xf8a2b00&gt;</code></pre><p>训练模型使用模型的<code>fit</code>函数，传入训练样本数据，并指定训练迭代次数，这里只迭代了<code>5</code>次，即对所有训练样本重复进行了<code>5</code>次训练。 </p><p>训练完成后，我们可以使用测试数据对模型进行评估：</p><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span></code></pre><pre><code>10000/10000 [==============================] - 0s 28us/sample - loss: 0.0756 - accuracy: 0.9779[0.07561568637117744, 0.9779]</code></pre><p>可以看到训练好的模型，对于测试数据达到了接近<code>98%</code>的准确率。 </p><p>以上就是使用<code>TensorFlow 2.0</code>最简单的入门示例，也展示了使用<code>TensorFlow 2.0</code>进行开发的基本流程。<code>TensorFlow 2.0</code>使用了<code>keras</code>作为高阶API，相对于<code>TensorFlow 1.x</code>在编码以及开发效率上简化了很多。 </p><p>本文完整源代码请参考<a href="https://github.com/longyg/machine-learning/blob/master/tensorflow-2.0/1-get%20started.ipynb" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本向量化方法的原理及实现详解</title>
      <link href="/posts/ml/beginner-guide-to-text-vectorization.html"/>
      <url>/posts/ml/beginner-guide-to-text-vectorization.html</url>
      
        <content type="html"><![CDATA[<p>在自然语言处理(<code>NLP</code>)中，我们必须将文本转换成机器能够理解的东西，而机器只能理解<code>数值型</code>数据。也就是说，我们需要将字符类型的文本转换成有意义的<code>数字向量</code>(或<code>数组</code>)。 </p><p>本文将介绍各种常见的<code>文本向量化</code>的方法原理以及python实现：</p><ul><li><code>词袋</code>（BOW）</li><li><code>N-Grams</code></li><li><code>TF-IDF</code></li></ul><h3 id="词袋（BOW）"><a href="#词袋（BOW）" class="headerlink" title="词袋（BOW）"></a>词袋（BOW）</h3><p>在深度学习出现以前的时代，使用<code>词袋</code>方法一度成为了<code>文本向量化</code>的事实标准。这种方法背后的思想虽然很简单，但是非常强大。 </p><p>首先，我们定义一个<code>固定长度</code>的向量，其中每个条目对应于预定义<code>单词字典</code>中的一个单词，向量的大小等于字典的大小。然后，为了用这个向量表示文本，我们计算字典中的每个单词在文本中出现的<code>次数</code>，并将这个数字放入对应的向量条目中，这种向量也称为<code>词频向量</code>。 例如，如果我们的字典包含如下单词： </p><pre><code>{machine, learning, is, the, not, great}</code></pre><p>如果我们想对文本<code>machine learning is great</code>进行向量化，我们将得到以下向量: </p><pre><code>(1,1,1,0,0,1) </code></pre><p><code>1</code>表示该字典中的单词在文本中出现过一次，<code>0</code>则表示没出现过。如果某个单词在文本中出现多次，则向量对应位置的数字为出现的<code>次数</code>。 </p><p>比如文本<code>the machine learning is the great</code>向量化后得到以下向量： </p><pre><code>(1,1,1,2,0,1) </code></pre><p>字典中的第四个单词<code>the</code>在文本中出现两次，因此向量的第四个数为2。 </p><p>通常情况下，为了改进这种表示方法，您可以使用一些更高级的技术，如删除<a href="https://en.wikipedia.org/wiki/Stop_words" target="_blank" rel="noopener">停用词</a>、<a href="https://en.wikipedia.org/wiki/Lemmatisation" target="_blank" rel="noopener">词形还原</a>、使用 <a href="http://sebastianraschka.com/Articles/2014_naive_bayes_1.html#n-grams" target="_blank" rel="noopener">n-grams</a> 或使用 <a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf" target="_blank" rel="noopener">tf-idf</a> 代替计数。 </p><p><code>词袋</code>方法的问题是，它不能捕获文本的含义或文本的上下文。即使使用<code>n-grams</code>方法，也存在同样的问题。 </p><p>下面介绍如何使用Python将文本转换为<code>词频向量</code>，<code>scikit-learn</code>提供了<code>CountVectorizer</code>来实现此功能，如下代码示例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizertexts <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'There used to be Stone Age'</span><span class="token punctuation">,</span>    <span class="token string">'There used to be Bronze Age bronze'</span><span class="token punctuation">,</span>    <span class="token string">'There used to be Iron Age'</span><span class="token punctuation">,</span>    <span class="token string">'There was Age of Revolution'</span><span class="token punctuation">,</span>    <span class="token string">'Now it is Digital Age'</span><span class="token punctuation">]</span>vectorizer <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span>analyzer<span class="token operator">=</span><span class="token string">'word'</span><span class="token punctuation">)</span>vec <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>texts<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>vectorizer<span class="token punctuation">.</span>vocabulary_<span class="token punctuation">)</span></code></pre><p>先打印字典出来看看:</p><pre><code>{&#39;there&#39;: 11, &#39;used&#39;: 13, &#39;to&#39;: 12, &#39;be&#39;: 1, &#39;stone&#39;: 10, &#39;age&#39;: 0, &#39;bronze&#39;: 2, &#39;iron&#39;: 4, &#39;was&#39;: 14, &#39;of&#39;: 8, &#39;revolution&#39;: 9, &#39;now&#39;: 7, &#39;it&#39;: 6, &#39;is&#39;: 5, &#39;digital&#39;: 3}</code></pre><p>字典是一个<code>dict</code>，每个单词对应一个索引。字典中每个单词都是唯一的，它们来自输入文本，可以看到字典里有15个不重复的单词。字典dict的key是单词，value是索引。 </p><p>输出所有文本的向量看看：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span></code></pre><p>输出如下：</p><pre><code>  (0, 0)    1  (0, 10)    1  (0, 1)    1  (0, 12)    1  (0, 13)    1  (0, 11)    1  (1, 2)    2  (1, 0)    1  (1, 1)    1  (1, 12)    1  (1, 13)    1  (1, 11)    1  (2, 4)    1  (2, 0)    1  (2, 1)    1  (2, 12)    1  (2, 13)    1  (2, 11)    1  (3, 9)    1  (3, 8)    1  (3, 14)    1  (3, 0)    1  (3, 11)    1  (4, 3)    1  (4, 5)    1  (4, 6)    1  (4, 7)    1  (4, 0)    1</code></pre><p>这个似乎看起来不像向量啊！这个其实是<code>稀疏矩阵</code>。这是一种<code>压缩向量</code>的表示方法，只保存了非0值，而其他未保存的都是0。比如<code>(1, 2) 2</code>，其中<code>(1, 2)</code>表示第<code>2</code>个向量的索引<code>2</code>位置。括号后面的<code>2</code>表示该位置的值为<code>2</code>。 </p><p>第2个向量是第2条文本的向量，也就是文本<code>There used to be Bronze Age bronze</code>，字典中索引为2的单词是<code>bronze</code>，而单词<code>bronze</code>在第2条文本中出现次数为2，因此值为2。 </p><p>我们可以用<code>toarray()</code>函数将稀疏矩阵转化成数组向量：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出如下：</p><pre><code>[[1 1 0 0 0 0 0 0 0 0 1 1 1 1 0] [1 1 2 0 0 0 0 0 0 0 0 1 1 1 0] [1 1 0 0 1 0 0 0 0 0 0 1 1 1 0] [1 0 0 0 0 0 0 0 1 1 0 1 0 0 1] [1 0 0 1 0 1 1 1 0 0 0 0 0 0 0]]</code></pre><p>可以看到位置<code>(1, 2)</code>的值确实为2，即第二行第三列的值，与稀疏矩阵一致。另外，由于字典长度为15，因此每个向量都是15维的。 </p><p>接下来可以用创建的<code>vectorizer</code>转换任意文本为向量，使用<code>transform()</code>函数：</p><pre class=" language-python"><code class="language-python">vec <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'There was Stone Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre><code>[[1 0 0 0 0 0 0 0 0 0 1 1 0 0 1]]</code></pre><h3 id="N-Grams"><a href="#N-Grams" class="headerlink" title="N-Grams"></a>N-Grams</h3><p>前面的<code>词袋</code>方法只是取单个单词构成字典，我们还可以取<code>相邻的</code>多个单词来构成字典，从而统计多个相邻单词的出现频率，这就是所谓的<code>N-Grams</code>方法。 </p><p>比如，我们将窗口（表示取多少个相邻单词）设为2，也就是将所有相邻的两个单词取出。例如对于文本<code>There used to be Stone Age</code>，我们将得到如下的字典集合：</p><pre><code>{&#39;there used, &#39;used to&#39;, &#39;to be&#39;, &#39;be stone&#39;, &#39;stone age&#39;}</code></pre><p>如果窗口设为3，则得到如下集合：</p><pre><code>{‘there used to’，‘used to be’，‘to be stone’，‘be tone age’}</code></pre><p>我们可以将窗口设为任意大小<code>n</code>，这就是所谓的<code>n-grams</code>。 </p><p>当我们按照窗口大小将文本拆分构成字典后，对于任意输入文本，我们将采用类似词频统计的方法，统计字典中所有文本的出现频次，最终构成词频向量。 </p><p><code>scikit-learn</code>的<code>CountVectorizer</code>就支持<code>n-grams</code>，如下示例：</p><pre class=" language-python"><code class="language-python">texts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'There used to be Stone Age'</span><span class="token punctuation">]</span>vectorizer <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span>analyzer<span class="token operator">=</span><span class="token string">'word'</span><span class="token punctuation">,</span> ngram_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>vec <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>texts<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>vectorizer<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>可以看到，我们提供了<code>ngram_range</code>参数，该参数接受一个元组，第一个值表示最小窗口，第二个值表示最大窗口。当我们提供参数值<code>(2, 2)</code>时，就表示窗口为<code>2</code>。 </p><p>构造的字典集合如下：</p><pre><code>[&#39;be stone&#39;, &#39;stone age&#39;, &#39;there used&#39;, &#39;to be&#39;, &#39;used to&#39;]</code></pre><p>打印向量看看：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span></code></pre><p>输出如下：</p><pre><code>  (0, 1)    1  (0, 0)    1  (0, 3)    1  (0, 4)    1  (0, 2)    1</code></pre><p>打印数组向量：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出如下：</p><pre><code>[[1 1 1 1 1]]</code></pre><p>我们可以通过<code>ngram_range</code>参数提供窗口区间，比如<code>(1, 3)</code>，表示分别使用窗口大小<code>1，2，3</code>来生成字典集合，如下：</p><pre class=" language-python"><code class="language-python">texts <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'There used to be Stone Age'</span><span class="token punctuation">]</span>vectorizer <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span>analyzer<span class="token operator">=</span><span class="token string">'word'</span><span class="token punctuation">,</span> ngram_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>vec <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>texts<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>vectorizer<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>得到如下字典集合，可以看到，集合中包含了单个单词，双词以及三个单词：</p><pre><code>[&#39;age&#39;, &#39;be&#39;, &#39;be stone&#39;, &#39;be stone age&#39;, &#39;stone&#39;, &#39;stone age&#39;, &#39;there&#39;, &#39;there used&#39;, &#39;there used to&#39;, &#39;to&#39;, &#39;to be&#39;, &#39;to be stone&#39;, &#39;used&#39;, &#39;used to&#39;, &#39;used to be&#39;]</code></pre><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p><code>TF-IDF</code>是 Term Frequency-Inverse Document Frequency 的缩写，即<code>词频-逆文件频率</code>，分为两部分，第一部分<code>词频</code>（Term Frequency，缩写为<code>TF</code>），第二部分<code>逆文件频率</code>（Inverse Document Frequency，缩写为<code>IDF</code>）。 </p><p><code>TF-IDF</code>是一种统计方法，用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。<strong>字词的重要性随着它在文件中出现的次数成正比增加（<code>TF部分</code>），但同时会随着它在语料库中出现的频率成反比下降（<code>IDF部分</code>）</strong>。因此我们需要将<code>TF</code>和<code>IDF</code>两部分综合起来表示词的重要性。 </p><ul><li><p><code>词频 (term frequency, TF)</code> : 指的是某一个给定的词语在该文件中出现的次数，计算公式如下: </p><p>  $$TF = \frac{在某一文档中词条w出现的次数}{该文档中所有的词条数目}$$ </p><p>  公式中除以<code>该文档中所有的词条数目</code>是为了归一化词频，以防止它偏向长的文件（同一个词语在长文件里可能会比短文件有更高的词频，但它不一定就重要）。 </p></li><li><p><code>逆文件频率 (inverse document frequency, IDF)</code> : 是一个词语普遍重要性的度量，如果包含词条的文档越少, <code>IDF</code>越大，则说明词条具有很好的类别区分能力。某一特定词语的<code>IDF</code>，可以由总文件数目除以包含该词语之文件的数目，再将得到的商取对数得到。计算公式如下： </p><p>  $$IDF = log(\frac{语料库的文档总数}{包含词条w的文档数+1})$$ </p><p>  如果一个词越常见，那么分母就越大，逆文档频率就越小越接近0。分母之所以要加1，是为了避免分母为0（即所有文档都不包含该词） </p></li></ul><p><code>TF-IDF</code>的最终值由<code>TF</code>乘以<code>IDF</code>，公式如下： </p><p>$$TF-IDF = TF * IDF$$</p><p>某一特定文件内的高词语频率，以及该词语在整个文件集合中的低文件频率，可以产生出高权重的<code>TF-IDF</code>。因此，<code>TF-IDF</code>倾向于过滤掉常见的词语，保留重要的词语。</p><p><code>scikit-learn</code>提供了<code>TfidfVectorizer</code>来实现将文本转换为<code>IF-IDF向量</code>，代码示例如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> TfidfVectorizertexts <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'There used to be Stone Age'</span><span class="token punctuation">,</span>    <span class="token string">'There used to be Bronze Age bronze'</span><span class="token punctuation">,</span>    <span class="token string">'There used to be Iron Age'</span><span class="token punctuation">,</span>    <span class="token string">'There was Age of Revolution'</span><span class="token punctuation">,</span>    <span class="token string">'Now it is Digital Age'</span><span class="token punctuation">]</span>vectorizer <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>analyzer<span class="token operator">=</span><span class="token string">'word'</span><span class="token punctuation">)</span>vec <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>texts<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>vectorizer<span class="token punctuation">.</span>vocabulary_<span class="token punctuation">)</span></code></pre><p>得到字典集合如下，这个与<code>CountVectorizer</code>得到的是相同的集合：</p><pre><code>{&#39;there&#39;: 11, &#39;used&#39;: 13, &#39;to&#39;: 12, &#39;be&#39;: 1, &#39;stone&#39;: 10, &#39;age&#39;: 0, &#39;bronze&#39;: 2, &#39;iron&#39;: 4, &#39;was&#39;: 14, &#39;of&#39;: 8, &#39;revolution&#39;: 9, &#39;now&#39;: 7, &#39;it&#39;: 6, &#39;is&#39;: 5, &#39;digital&#39;: 3}</code></pre><p>打印<code>IF-IDF</code>稀疏矩阵：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span></code></pre><p>输出如下：</p><pre><code>  (0, 11)    0.33140159786840845  (0, 13)    0.3939481437168047  (0, 12)    0.3939481437168047  (0, 1)    0.3939481437168047  (0, 10)    0.5882354607969754  (0, 0)    0.28029734885918384  (1, 11)    0.23213777065833785  (1, 13)    0.27594991824306836  (1, 12)    0.27594991824306836  (1, 1)    0.27594991824306836  (1, 0)    0.1963406395869283  (1, 2)    0.8240857580041683  (2, 11)    0.33140159786840845  (2, 13)    0.3939481437168047  (2, 12)    0.3939481437168047  (2, 1)    0.3939481437168047  (2, 0)    0.28029734885918384  (2, 4)    0.5882354607969754  (3, 11)    0.2992461174212536  (3, 0)    0.25310044945192844  (3, 14)    0.5311597134872388  (3, 8)    0.5311597134872388  (3, 9)    0.5311597134872388  (4, 0)    0.2317654623904255  (4, 7)    0.48638584746139363  (4, 6)    0.48638584746139363  (4, 5)    0.48638584746139363  (4, 3)    0.48638584746139363</code></pre><p>打印数组向量：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出如下：</p><pre><code>[[0.28029735 0.39394814 0.         0.         0.         0.  0.         0.         0.         0.         0.58823546 0.3314016  0.39394814 0.39394814 0.        ] [0.19634064 0.27594992 0.82408576 0.         0.         0.  0.         0.         0.         0.         0.         0.23213777  0.27594992 0.27594992 0.        ] [0.28029735 0.39394814 0.         0.         0.58823546 0.  0.         0.         0.         0.         0.         0.3314016  0.39394814 0.39394814 0.        ] [0.25310045 0.         0.         0.         0.         0.  0.         0.         0.53115971 0.53115971 0.         0.29924612  0.         0.         0.53115971] [0.23176546 0.         0.         0.48638585 0.         0.48638585  0.48638585 0.48638585 0.         0.         0.         0.  0.         0.         0.        ]]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本处理 </tag>
            
            <tag> 自然语言处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置jupyter默认工作路径</title>
      <link href="/posts/sharing/set-jupyter-workspace.html"/>
      <url>/posts/sharing/set-jupyter-workspace.html</url>
      
        <content type="html"><![CDATA[<p>安装好<code>Anaconda</code>后，启动<code>Jupyter notebook</code>时，通常会默认工作目录，所谓<code>工作目录</code>，就是当你创建新的<code>notebook</code>时文件的<code>默认存放路径</code>。一般情况下，默认的工作目录是：</p><pre><code>C:\Users\&lt;用户名&gt;</code></pre><p>那么如何将这个默认的工作目录修改为自定义的目录呢？</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在<code>Windows</code>系统中，最简单的办法是直接修改<code>jupyter notebook</code>的<code>快捷方式</code>。 </p><p>在<code>Windows</code>的开始菜单里找到<code>Jupyter Notebook</code>的快捷方式（一般在<code>Anaconda3 (64-bit)</code>目录下），然后在右键菜单中选择属性，在<code>快捷方式</code>选项卡中的<code>目标(T)</code>里的最后的<code>%USERPROFILE%</code>修改为你的工作目录即可。 </p><p><strong>注意：</strong></p><ul><li>你的<code>工作目录</code>需要手动创建好，否则启动会失败。</li><li>你的<code>工作目录</code>需要用双引号括起来，如：<code>&quot;E:\workspace\notebook&quot;</code></li></ul><p>修改好后，应用及确定，然后点击快捷方式启动<code>Jupyter Notebook</code>，你会看到默认的工作目录已经变为你自己的工作目录了。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>在<code>Linux</code>系统中，我们可以通过修改配置文件<code>~/.jupyter/jupyter_notebook_config.py</code> 如果你没有找到该配置文件，可以执行如下命令生成该配置文件：</p><pre class=" language-shell"><code class="language-shell">jupyter notebook --generate-config</code></pre><p>修改该配置文件的以下属性：</p><pre><code>c.NotebookApp.notebook_dir = &#39;/root/workspace/projects&#39;</code></pre><p>修改后，当你运行<code>jupyter notebook</code>重新启动<code>notebook</code>是会看到默认工作目录已经变成新的目录了。</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解各种CSS单位（px, em, rem, vw, vh, vmin, vmax）</title>
      <link href="/posts/frontend/learn-css-unit.html"/>
      <url>/posts/frontend/learn-css-unit.html</url>
      
        <content type="html"><![CDATA[<h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p><code>px</code>是<code>绝对单位</code>，页面按照精确的<code>像素</code>展示。<code>1px</code>表示<code>1像素</code>。</p><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p><code>em</code>是<code>相对单位</code>，相对于<code>父节点</code>或者<code>自身</code>的<code>字体大小</code>。比如父节点定义了字体大小为<code>font-size:10px</code>，那么子节点如果定义<code>1em</code>就等于<code>10px</code>，<code>1.2em</code>等于<code>12px</code>。 </p><p>如果所有父节点都没有定义字体大小，会相对于<code>根节点</code>计算相对大小。 </p><p>因此使用<code>em</code>单位可以很方便调整页面的显示。我们只需要修改父节点或者根节点的字体大小，就可以控制页面的显示效果。 </p><p>注意，<code>em</code>不仅仅可以作为字体大小单位，也可以其他任何属性的单位，例如<code>width</code>, <code>height</code>, <code>border</code>等等。 </p><p>示例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">14</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Test HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">10</span>em<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10</span>em<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0.2</span>em solid gray<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.3</span>em</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is the test text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>第一个<code>div</code>的<code>宽度</code>，<code>高度</code>以及<code>边框大小</code>会相对于根节点<code>&lt;html&gt;</code>的<code>字体大小</code>，即<code>14px</code>。而第二个<code>div</code>下的<code>span</code>的字体大小<code>1.3em</code>会相对于第二个<code>div</code>的字体大小，也就是<code>12px</code>。</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p><code>rem</code>可以理解为<code>特殊的em</code>，因为它始终相对于<code>根节点</code>的字体大小。 </p><p>示例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">14</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Test HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">10</span>rem<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10</span>rem<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0.2</span>rem solid gray<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.3</span>rem</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is the test text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>同样，第一个<code>div</code>的宽度，高度以及边框大小会相对于根节点<code>&lt;html&gt;</code>的字体大小，即<code>14px</code>。不同的是<code>span</code>的字体大小<code>1.3rem</code>同样会相对于根节点字体大小，即使父节点定义了不同的字体大小，也不会对其起任何作用。</p><h3 id="vw，vh，vmin，vmax"><a href="#vw，vh，vmin，vmax" class="headerlink" title="vw，vh，vmin，vmax"></a>vw，vh，vmin，vmax</h3><ul><li><code>vw</code>：viewpoint width，<code>视窗宽度</code>，<code>1vw</code>等于视窗宽度的<code>1%</code>，<code>100vw</code>等于视窗宽度。 </li><li><code>vh</code>：viewpoint height，<code>视窗高度</code>，<code>1vh</code>等于视窗高度的<code>1%</code>，<code>100vh</code>等于视窗高度。 </li><li><code>vmin</code>：<code>vw</code>和<code>vh</code>中较小的那个。 </li><li><code>vmax</code>：<code>vw</code>和<code>vh</code>中较大的那个。 </li></ul><p>这个单位可以使你的应用容易的适配各种大小的浏览器窗口。因为它会随着浏览器窗口大小而动态变化。 </p><p>示例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">14</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Test HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span>vm - <span class="token number">2</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span>vh - <span class="token number">2</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid gray</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.3</span>rem</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is the test text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>对于第一个<code>div</code>，我们想让它始终占满整个窗口，就可以用<code>vm</code>和<code>vh</code>单位。 </p><p>因为<code>border</code>在宽度和高度上各占了<code>2px</code>，因此我们在<code>div</code>的<code>width</code>和<code>height</code>属性上各减去<code>2px</code>从而使<code>div</code>刚好占满浏览器窗口。 </p><p>你可以试试调整浏览器窗口的大小，或者缩放浏览器，这个<code>div</code>始终会跟随浏览器窗口而变化，不管怎么调整，都不会因为<code>div</code>边界超出浏览器窗口而出现滚动条。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> CSS单位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes入门：使用kubeadm在ubuntu上安装kubernetes</title>
      <link href="/posts/sharing/kubernetes-get-started.html"/>
      <url>/posts/sharing/kubernetes-get-started.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h3><p>环境：<code>ubuntu 16.04</code></p><pre class=" language-shell"><code class="language-shell">$ sudo su$ apt-get update$ swapoff -a</code></pre><h4 id="1-安装Docker"><a href="#1-安装Docker" class="headerlink" title="1. 安装Docker"></a>1. 安装<code>Docker</code></h4><pre class=" language-shell"><code class="language-shell">$ sudo su$ apt-get update$ apt-get install -y docker.io</code></pre><h4 id="2-安装OpenSSH"><a href="#2-安装OpenSSH" class="headerlink" title="2. 安装OpenSSH"></a>2. 安装<code>OpenSSH</code></h4><p>如果没有安装<code>openssh</code>的话，执行下面命令安装：</p><pre class=" language-shell"><code class="language-shell">$ sudo apt-get install openssh-server</code></pre><h4 id="3-安装Kubernetes工具"><a href="#3-安装Kubernetes工具" class="headerlink" title="3. 安装Kubernetes工具"></a>3. 安装<code>Kubernetes</code>工具</h4><p>安装本文将要使用到个三个kubernetes工具：<code>kubelet</code>, <code>kubeadm</code>, <code>kubectl</code> </p><p>首先准备安装这三个工具的条件：</p><pre class=" language-shell"><code class="language-shell">$ apt-get update && apt-get install -y apt-transport-https curl$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -$ cat <<EOF >/etc/apt/sources.list.d/kubernetes.listdeb http://apt.kubernetes.io/ kubernetes-xenial mainEOF$ apt-get update</code></pre><p>执行下面命令安装三个工具：</p><pre class=" language-shell"><code class="language-shell">$ apt-get install -y kubelet kubeadm kubectl</code></pre><h3 id="二、配置Kubernetes"><a href="#二、配置Kubernetes" class="headerlink" title="二、配置Kubernetes"></a>二、配置<code>Kubernetes</code></h3><pre class=" language-shell"><code class="language-shell">$ vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</code></pre><p>在所有<code>Environment</code>后面添加一行：</p><pre><code>Environment=&quot;cgroup-driver=systemd/cgroup-driver=cgroupfs&quot;</code></pre><blockquote><p>注意：以上<code>步骤一</code>和<code>步骤二</code>需要在<code>所有node</code>上执行，包括<code>master</code>和各个<code>node</code>节点上。</p></blockquote><h3 id="三、配置Master"><a href="#三、配置Master" class="headerlink" title="三、配置Master"></a>三、配置<code>Master</code></h3><p>以下步骤仅在<code>master</code>节点上执行。 </p><p>首先使用<code>kuberadm init</code>初始化kubernetes。</p><pre class=" language-shell"><code class="language-shell">$ kubeadm init --apiserver-advertise-address=192.168.0.12 --pod-network-cidr=192.168.0.0/16</code></pre><p><code>--apiserver-advertise-address</code>为<code>master</code>节点的<code>IP地址</code>。 </p><p>上面命令执行成功后，执行以下命令配置<code>kubectl</code>：</p><pre class=" language-shell"><code class="language-shell">$ mkdir -p $HOME/.kube$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config$ sudo chown $(id -u):$(id -g) $HOME/.kube/config</code></pre><p>接下来可以运行<code>kubectl</code>命令检查kubernetes是否成功<code>初始化</code>：</p><pre class=" language-shell"><code class="language-shell">$ kubectl get pods -o wide --all-namespaces</code></pre><p>接下来配置<code>master网络</code>，可以选择<code>Calico</code>或者<code>Flannel</code>。 </p><p>如果用<code>Calico</code>，执行以下命令：</p><pre class=" language-shell"><code class="language-shell">$ kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/etcd.yaml$ kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/rbac.yaml$ kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/calico.yaml</code></pre><p>如果用<code>Flannel</code>，执行下面命令：</p><pre class=" language-shell"><code class="language-shell">$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</code></pre><p>默认情况下，<code>master</code>上是<code>不允许创建pod</code>的，如果想在master上也可以创建pod，可以执行以下命令开启：</p><pre class=" language-shell"><code class="language-shell">$ kubectl taint nodes --all node-role.kubernetes.io/master-</code></pre><h3 id="四、配置Node节点"><a href="#四、配置Node节点" class="headerlink" title="四、配置Node节点"></a>四、配置<code>Node</code>节点</h3><p><code>Node节点</code>几乎不需要任何配置，只要安装好kubernetes三个工具后，执行<code>kubeadm join</code>把node节点加入kubernetes集群即可：</p><pre class=" language-shell"><code class="language-shell">$ kubeadm join 192.168.0.12:6443 --token xmbbp0.qu9z2d7qw5b9m855 --discovery-token-ca-cert-hash sha256:2eb0e8dde0df05555222ade14fb15f88d38b4a0d433fe50d3c5614f26f9109ff</code></pre><p>这个命令在master上执行<code>kubeadm init</code>时会给出，包含了具体的<code>token</code>和<code>ca-cert</code>，请按实际输出的信息执行<code>join</code>命令。</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《机器学习实战》读书笔记之四：朴素贝叶斯</title>
      <link href="/posts/ml/mlp-4-bayes.html"/>
      <url>/posts/ml/mlp-4-bayes.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p><code>朴素贝叶斯</code>是机器学习中经典的分类算法之一，应用非常广泛，它是基于概率的<code>分类算法</code>。 </p><p>基本思路是，通过计算某数据属于各种类型的概率，以概率最大的分类作为数据的分类。因此，该算法的关键是如何计算属于某种<code>分类的概率</code>。 </p><p>举个例子，如果数据有<code>A</code>和<code>B</code>两种分类，对于某未知类型的数据，我们分别计算它属于<code>A</code>和<code>B</code>的概率，假设分别为<code>P(A)</code>和<code>P(B)</code>，如果<code>P(A) &gt; P(B)</code>，则我们预测该数据属于<code>A</code>类型，反之，判定该数据属于<code>B</code>类型。</p><h3 id="二、贝叶斯推导"><a href="#二、贝叶斯推导" class="headerlink" title="二、贝叶斯推导"></a>二、贝叶斯推导</h3><p>要学习如何在机器学习中使用<code>贝叶斯</code>，首先我们要理解什么是贝叶斯，以及贝叶斯是如何推导而来的。 </p><p>在推导贝叶斯公式之前，我们首先要了解<code>条件概率</code>。因为贝叶斯其实最终就是求解条件概率。</p><h4 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h4><p><code>条件概率</code>的定义是：在给定事件B发生的情况下，事件A发生的概率，记为$P(A|B)$。 </p><p><a href="http://wx3.sinaimg.cn/large/bd7db87egy1fy2m54n5tnj20gu0c6q3k.jpg" target="_blank" rel="noopener"><img src="http://wx3.sinaimg.cn/large/bd7db87egy1fy2m54n5tnj20gu0c6q3k.jpg" alt></a> </p><p>蓝色区域为事件A发生的概率，记为<code>P(A)</code>。红色区域为事件B发生的概率，记为<code>P(B)</code>。蓝色与红色的交叉区域为事件A和事件B同时发生的概率，也称<code>联合概率</code>，记为<code>P(A∩B)</code>。 </p><p>那么事件B发生的情况下，事件A发生的<code>条件概率</code>是多少呢？ </p><p>从图中可以看出，<code>P(A|B)</code>应该是交叉区域的概率除以红色区域的概率，因此第一个<code>条件概率</code>公式为： </p><p>$$P(A|B) = \frac{P(A\cap B)}{P(B)}$$ </p><p>同理，<code>P(B|A)</code>表示事件A发生的情况下，事件B发生的概率。它应该是交叉区域的概率除以蓝色区域的概率： </p><p><a href="http://wx3.sinaimg.cn/large/bd7db87egy1fy2m543hg5j20gu0c6mxr.jpg" target="_blank" rel="noopener"><img src="http://wx3.sinaimg.cn/large/bd7db87egy1fy2m543hg5j20gu0c6mxr.jpg" alt></a> </p><p>因此第二个<code>条件概率</code>公式为： </p><p>$$P(B|A) = \frac{P(A\cap B)}{P(A)}$$ </p><p>根据第二个公式，可以得到： </p><p>$$P(A\cap B) = P(B|A)P(A)$$ </p><p>将其代入第一个公式，得到： </p><p>$$P(A|B) = \frac{P(B|A)P(A)}{P(B)}$$ </p><p>上面的公式就是<code>贝叶斯公式</code>。 </p><p>可以看到，条件概率<code>P(A|B)</code>可以由另外一个条件概率<code>P(B|A)</code>以及<code>P(A)</code>和<code>P(B)</code>计算而来。</p><h3 id="三、朴素贝叶斯应用原理"><a href="#三、朴素贝叶斯应用原理" class="headerlink" title="三、朴素贝叶斯应用原理"></a>三、朴素贝叶斯应用原理</h3><p>贝叶斯在机器学习中通常用于处理<code>分类问题</code>。基本思路是：在已知某数据的特征值的条件下，计算其属于各分类的概率，然后比较概率大小，最后以<code>概率最大的分类</code>作为该数据的分类。 </p><p>假如数据集总共有<code>i</code>个分类，各个分类记为符号$c_i$。 </p><p>那么我们要计算的<code>条件概率</code>就是以数据特征值作为条件，即在已知特征值的条件下，计算数据属于某种分类的条件概率： </p><p>$$P_i = P(c_i|特征值)$$ </p><p>假如每条数据具有<code>n</code>个特征，构成的特征向量<code>w</code>记为：$(w_1, w_2, …, w_n)$。 </p><p>那么要计算的条件概率实际上为： </p><p>$$P_i = P(c_i|w)$$ </p><p>如此，我们计算每个分类的概率，最终得到<code>i</code>个概率值: $(P_1, P_2, …, P_i)$。 </p><p>然后比较各个概率值大小，找到最大值。假设$P_2$最大，那么我们就将第<code>2</code>个分类作为该数据的分类。 </p><p>那么如何计算上面这<code>i</code>个概率值呢？这里我们就可以用前面介绍的<code>贝叶斯公式</code>了。即：</p><p>$$P_i = P(c_i|w) = \frac{P(w|c_i)P(c_i)}{P(w)}$$ </p><p>将$w = (w_1, w_2, …, w_n)$代入上面公式，即： </p><p>$$P_i = P(c_i|w) = \frac{P(w_1, w_2, …, w_n|c_i)P(c_i)}{P(w_1, w_2, …, w_n)}$$ </p><p>根据<code>朴素</code>贝叶斯的假设，各个特征之间是独立的，那么上面公式可以改为计算各个特征独立的<code>条件概率</code>： </p><p>$$P_i = P(c_i|w) = \frac{P(w_1|c_i)P(w_2|c_i) … P(w_n|c_i)P(c_i)}{P(w_1)P(w_2) … P(w_n)}$$ </p><p>由上面的公式可以看到，分母项是一个固定项，它对于计算每个分类的条件概率都是固定不变的。因此，我们可以将其略去，只需要比较分子的大小就可以了，<code>分子越大</code>，条件概率$P(c_i|w)$<code>越大</code>。所以我们在代码实现朴素贝叶斯时，实际上只需要计算分子： </p><p>$$P(w_1|c_i)P(w_2|c_i) … P(w_n|c_i)P(c_i)$$</p><p>$P(c_i)$很容易计算，它表示第<code>i</code>个分类的概率，即数据集中属于分类$c_i$的数据个数除以数据集总个数。举个例子，假设训练数据集总共有100条数据，其中属于第二种分类$c_2$的数据有20条，那么： </p><p>$$P(c_2) = \frac{20}{100} = 0.2$$ </p><p>那么<code>n</code>个特征的条件概率$P(w_1|c_i), P(w_2|c_i), …, P(w_n|c_i)$如何计算呢？ </p><p>这些概率实际上就是某分类中含某特征值的<code>条件概率</code>。这是什么意思呢？</p><p>举个例子来说明，某个医院早上收了6个门诊病人，如下表：</p><table><thead><tr><th>症状</th><th>职业</th><th>疾病</th></tr></thead><tbody><tr><td>打喷嚏</td><td>护士</td><td>感冒</td></tr><tr><td>打喷嚏</td><td>农夫</td><td>过敏</td></tr><tr><td>头痛</td><td>建筑工人</td><td>脑震荡</td></tr><tr><td>头痛</td><td>建筑工人</td><td>感冒</td></tr><tr><td>打喷嚏</td><td>教师</td><td>感冒</td></tr><tr><td>头痛</td><td>教师</td><td>脑震荡</td></tr></tbody></table><p>疾病有3种分类：<code>感冒</code>，<code>过敏</code>，<code>脑震荡</code>。 </p><p>例如我们要计算得<code>感冒</code>的人中，症状为<code>打喷嚏</code>的概率，也就是如下的条件概率： </p><p>$$P(打喷嚏|感冒)$$ </p><p>上面的6个病人中，有3个人感冒，而这3个人中症状为打喷嚏的有2个人，因此： </p><p>$$P(打喷嚏|感冒) = 2/3 = 0.66$$ </p><p>同理，我们可以计算出其他分类中各个特征的<code>条件概率</code>。</p><h3 id="四、朴素贝叶斯应用案例"><a href="#四、朴素贝叶斯应用案例" class="headerlink" title="四、朴素贝叶斯应用案例"></a>四、朴素贝叶斯应用案例</h3><p><code>朴素贝叶斯算法</code>的经典应用场景是用于<code>文档分类</code>。例如对邮件进行分类从而<code>过滤垃圾邮件</code>。 </p><p>本文将通过朴素贝叶斯算法实现一个过滤垃圾邮件的机器学习应用。 </p><p>前面已经介绍了朴素贝叶斯算法实际上就是求解各个分类下各个特征的条件概率。对于文档分类的应用，实际上就是求每个类别中每个词条的<code>条件概率</code>。算法伪代码如下：</p><pre><code>计算每个类别中的文档数目对每篇训练文档：    对每个类别：        如果词条出现在文档中 --&gt; 增加该词条的计数值        增加所有词条的计数值对每个类别：    对每个词条：        将该词条的数目除以总词条数目得到条件概率返回每个类别的条件概率</code></pre><h4 id="1-准备训练数据"><a href="#1-准备训练数据" class="headerlink" title="1. 准备训练数据"></a>1. 准备训练数据</h4><p>朴素贝叶斯是<code>监督学习</code>的一种算法，因此需要训练数据进行训练从而构建分类器，然后通过构建的分类器对新的数据进行预测。 </p><p>假如我们有6条训练数据，也就是有6条包含邮件文本内容的数据，而且每条数据都已经有了是否是垃圾邮件的<code>标签</code>，<code>1</code>表示<code>垃圾邮件</code>，<code>0</code>表示<code>正常邮件</code>。 </p><p>以下方法加载训练数据及对应标签：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">loadDataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    postingList <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">'my'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'has'</span><span class="token punctuation">,</span> <span class="token string">'flea'</span><span class="token punctuation">,</span> <span class="token string">'problems'</span><span class="token punctuation">,</span> <span class="token string">'help'</span><span class="token punctuation">,</span> <span class="token string">'please'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'maybe'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'take'</span><span class="token punctuation">,</span> <span class="token string">'him'</span><span class="token punctuation">,</span> <span class="token string">'to'</span> <span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'park'</span><span class="token punctuation">,</span> <span class="token string">'stupid'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'my'</span><span class="token punctuation">,</span> <span class="token string">'dalmation'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'so'</span><span class="token punctuation">,</span> <span class="token string">'cute'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'love'</span><span class="token punctuation">,</span> <span class="token string">'hime'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'stop'</span><span class="token punctuation">,</span> <span class="token string">'posting'</span><span class="token punctuation">,</span> <span class="token string">'stupid'</span><span class="token punctuation">,</span> <span class="token string">'worthless'</span><span class="token punctuation">,</span> <span class="token string">'garbage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'mr'</span><span class="token punctuation">,</span> <span class="token string">'licks'</span><span class="token punctuation">,</span> <span class="token string">'ate'</span><span class="token punctuation">,</span> <span class="token string">'my'</span><span class="token punctuation">,</span> <span class="token string">'steak'</span><span class="token punctuation">,</span> <span class="token string">'how'</span><span class="token punctuation">,</span> <span class="token string">'to'</span><span class="token punctuation">,</span> <span class="token string">'stop'</span><span class="token punctuation">,</span> <span class="token string">'him'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'quit'</span><span class="token punctuation">,</span> <span class="token string">'bying'</span><span class="token punctuation">,</span> <span class="token string">'worthless'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'food'</span><span class="token punctuation">,</span> <span class="token string">'stupid'</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span>    classVec <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> postingList<span class="token punctuation">,</span> classVec</code></pre><p>该方法返回了<code>训练数据集</code>，以及对应<code>标签</code>。 </p><p>接下来从训练数据中提取词汇表。所谓<code>词汇表</code>，就是包含在所有文档中出现的不重复词的列表。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">createVocabList</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    vocabSet <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> document <span class="token keyword">in</span> dataSet<span class="token punctuation">:</span>        vocabSet <span class="token operator">=</span> vocabSet <span class="token operator">|</span> set<span class="token punctuation">(</span>document<span class="token punctuation">)</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>vocabSet<span class="token punctuation">)</span></code></pre><p>该方法传入数据集，返回数据集中所有出现的不重复词的列表。 </p><p>接下来，计算<code>文档向量</code>。文档向量的长度与词汇表相同，向量每一个元素为<code>1</code>或<code>0</code>，分别表示词汇表中的单词<code>是否在文档中出现</code>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">setOfWords2Vec</span><span class="token punctuation">(</span>vocabList<span class="token punctuation">,</span> inputSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    returnVec <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>vocabList<span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> inputSet<span class="token punctuation">:</span>        <span class="token keyword">if</span> word <span class="token keyword">in</span> vocabList<span class="token punctuation">:</span>            returnVec<span class="token punctuation">[</span>vocabList<span class="token punctuation">.</span>index<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'the word: %s is not in my Vocabulary!'</span> <span class="token operator">%</span> word<span class="token punctuation">)</span>    <span class="token keyword">return</span> returnVec</code></pre><p>现在来看一下上面这三个函数的运行效果。</p><pre class=" language-python"><code class="language-python">listPosts<span class="token punctuation">,</span> listClasses <span class="token operator">=</span> loadDataSet<span class="token punctuation">(</span><span class="token punctuation">)</span>myVocabList <span class="token operator">=</span> createVocabList<span class="token punctuation">(</span>listPosts<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>myVocabList<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>setOfWords2Vec<span class="token punctuation">(</span>myVocabList<span class="token punctuation">,</span> listPosts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>setOfWords2Vec<span class="token punctuation">(</span>myVocabList<span class="token punctuation">,</span> listPosts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出如下：</p><pre><code>[&#39;help&#39;, &#39;please&#39;, &#39;love&#39;, &#39;steak&#39;, &#39;cute&#39;, &#39;posting&#39;, &#39;has&#39;, &#39;problems&#39;, &#39;i&#39;, &#39;stop&#39;, &#39;so&#39;, &#39;him&#39;, &#39;bying&#39;, &#39;my&#39;, &#39;dalmation&#39;, &#39;ate&#39;, &#39;dog&#39;, &#39;take&#39;, &#39;quit&#39;, &#39;maybe&#39;, &#39;mr&#39;, &#39;food&#39;, &#39;hime&#39;, &#39;stupid&#39;, &#39;to&#39;, &#39;garbage&#39;, &#39;flea&#39;, &#39;not&#39;, &#39;is&#39;, &#39;licks&#39;, &#39;how&#39;, &#39;park&#39;, &#39;worthless&#39;][1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0][0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0]</code></pre><p>可以看到，<code>词向量</code>已经创建好了，通过<code>1</code>或<code>0</code>表示文档中每个单词在词汇表中<code>出现</code>或<code>不出现</code>，因此词向量的长度与词汇表的长度是相同的。</p><h4 id="2-训练算法"><a href="#2-训练算法" class="headerlink" title="2. 训练算法"></a>2. 训练算法</h4><p>接下来通过Python3实现前面的伪代码，求每个类别中每个单词的<code>条件概率</code>，这实际上就是对算法进行训练，因为我们通过训练数据得到的各个条件概率将用于对新数据进行<code>预测</code>。 </p><p><code>训练算法</code>的实现代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 训练算法</span><span class="token comment" spellcheck="true"># trainMatrix: 训练数据，也就是前面得到的词向量</span><span class="token comment" spellcheck="true"># trainCategory: 训练数据的标签</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>trainMatrix<span class="token punctuation">,</span> trainCategory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 训练数据中包含的文档个数</span>    numTrainDocs <span class="token operator">=</span> len<span class="token punctuation">(</span>trainMatrix<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 每条训练数据中单词个数，等于词汇表的长度</span>    numWords <span class="token operator">=</span> len<span class="token punctuation">(</span>trainMatrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 训练数据中类别1的概率，也就是垃圾邮件的概率</span>    <span class="token comment" spellcheck="true"># 这里比较巧妙的使用了sum()函数得到类别1的文档个数</span>    pAbusive <span class="token operator">=</span> sum<span class="token punctuation">(</span>trainCategory<span class="token punctuation">)</span> <span class="token operator">/</span> float<span class="token punctuation">(</span>numTrainDocs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建两个向量，大小均为词汇表长度</span>    <span class="token comment" spellcheck="true"># p0Num向量表示为类别0的所有文档各个词出现的总次数</span>    p0Num <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>numWords<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># p1Num向量表示类别1的所有文档各个词出现的总次数</span>    p1Num <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>numWords<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># p0Denom为类别0的所有文档的所有词总数</span>    p0Denom <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token comment" spellcheck="true"># p1Denom为类别1的所有文档的所有词总数</span>    p1Denom <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token comment" spellcheck="true"># 循环所有文档，累计p0Num，p1Num，p0Denom，p1Denom</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>numTrainDocs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> trainCategory<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            p1Num <span class="token operator">+=</span> trainMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            p1Denom <span class="token operator">+=</span> sum<span class="token punctuation">(</span>trainMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            p0Num <span class="token operator">+=</span> trainMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            p0Denom <span class="token operator">+=</span> sum<span class="token punctuation">(</span>trainMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算各个类别的条件概率</span>    <span class="token comment" spellcheck="true"># p1Vect为类别1的条件概率</span>    p1Vect <span class="token operator">=</span> p1Num<span class="token operator">/</span>p1Denom    <span class="token comment" spellcheck="true"># p0Vect为类别0的条件概率</span>    p0Vect <span class="token operator">=</span> p0Num<span class="token operator">/</span>p0Denom    <span class="token comment" spellcheck="true"># 返回三个概率</span>    <span class="token keyword">return</span> p0Vect<span class="token punctuation">,</span> p1Vect<span class="token punctuation">,</span> pAbusive</code></pre><p>测试一下该函数。首先将训练文档转换为<code>文档向量</code>：</p><pre class=" language-python"><code class="language-python">trainMat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> postingDoc <span class="token keyword">in</span> listPosts<span class="token punctuation">:</span>    trainMat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>setOfWords2Vec<span class="token punctuation">(</span>myVocabList<span class="token punctuation">,</span> postingDoc<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>接下来运行训练函数：</p><pre class=" language-python"><code class="language-python">p0V<span class="token punctuation">,</span> p1V<span class="token punctuation">,</span> pAb <span class="token operator">=</span> train<span class="token punctuation">(</span>trainMat<span class="token punctuation">,</span> listClasses<span class="token punctuation">)</span></code></pre><p>打印三个概率来看看：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>pAb<span class="token punctuation">)</span></code></pre><pre><code>0.5</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>p0V<span class="token punctuation">)</span></code></pre><pre><code>[0.         0.04166667 0.04166667 0.04166667 0.04166667 0. 0.04166667 0.04166667 0.04166667 0.         0.04166667 0. 0.04166667 0.         0.04166667 0.04166667 0.04166667 0. 0.         0.04166667 0.         0.         0.04166667 0.04166667 0.04166667 0.         0.125      0.04166667 0.04166667 0.04166667 0.04166667 0.         0.04166667]</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>p1V<span class="token punctuation">)</span></code></pre><pre><code>[0.05263158 0.         0.         0.         0.10526316 0.10526316 0.         0.         0.         0.05263158 0.05263158 0.05263158 0.         0.05263158 0.05263158 0.         0.         0.05263158 0.05263158 0.05263158 0.05263158 0.15789474 0.         0. 0.         0.05263158 0.         0.         0.         0. 0.         0.05263158 0.        ]</code></pre><p>可以看到，有很多概率为<code>0</code>。而我们用朴素贝叶斯进行文档分类时，需要计算多个概率的<code>乘积</code>，也就是计算$P(w_1|c_i)P(w_2|c_i) … P(w_n|c_i)P(c_i)$。如果其中有一个概率为<code>0</code>，整个计算结果将也为<code>0</code>，这样的话一个词的概率有可能影响到整个结果。为了降低影响，可以将所有词出现次数初始化为<code>1</code>，并将分母初始化为<code>2</code>。 将<code>train()</code>函数的第<code>14，16，18，20</code>行分别修改为：</p><pre class=" language-python"><code class="language-python">p0Num <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>numWords<span class="token punctuation">)</span>p1Num <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>numWords<span class="token punctuation">)</span>p0Denom <span class="token operator">=</span> <span class="token number">2.0</span>p1Denom <span class="token operator">=</span> <span class="token number">2.0</span></code></pre><p>另外，由于大多数词出现次数会非常少，导致很多概率都非常小，最后很多概率的乘积结果会更小，Python中四舍五入后得到<code>0</code>，因此可能导致所有分类的概率都为<code>0</code>，从而无法用于判断哪个分类概率大，哪个小。为了避免这个影响，可以对概率乘积取<code>自然对数</code>。 </p><p>也就是： </p><p>$$ln(P(w_1|c_i)P(w_2|c_i) … P(w_n|c_i)P(c_i))$$ </p><p>根据代数对数公式：$ln(a*b) = ln(a) + ln(b)$ ，上面公式可以转换为： </p><p>$$ln(P(w_1|c_i)P(w_2|c_i) … P(w_n|c_i)P(c_i)) = ln(P(w_1|c_i)) + ln(P(w_2|c_i)) + … + ln(P(c_i))$$ </p><p>因此我们可以对每个概率求<code>自然对数</code>，最后再<code>求和</code>。 </p><p>将<code>train()</code>函数的第<code>31</code>和<code>33</code>行修改为如下，得到概率的<code>自然对数</code>。</p><pre class=" language-python"><code class="language-python">p1Vect <span class="token operator">=</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>p1Num<span class="token operator">/</span>p1Denom<span class="token punctuation">)</span>p0Vect <span class="token operator">=</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>p0Num<span class="token operator">/</span>p0Denom<span class="token punctuation">)</span></code></pre><p>再次列出修改后的完整的<code>train()</code>函数：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 训练算法</span><span class="token comment" spellcheck="true"># trainMatrix: 训练数据，也就是前面得到的词向量</span><span class="token comment" spellcheck="true"># trainCategory: 训练数据的标签</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>trainMatrix<span class="token punctuation">,</span> trainCategory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 训练数据中包含的文档个数</span>    numTrainDocs <span class="token operator">=</span> len<span class="token punctuation">(</span>trainMatrix<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 每条训练数据中单词个数，等于词汇表的长度</span>    numWords <span class="token operator">=</span> len<span class="token punctuation">(</span>trainMatrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 训练数据中类别1的概率，也就是垃圾邮件的概率</span>    <span class="token comment" spellcheck="true"># 这里比较巧妙的使用了sum()函数得到类别1的文档个数</span>    pAbusive <span class="token operator">=</span> sum<span class="token punctuation">(</span>trainCategory<span class="token punctuation">)</span> <span class="token operator">/</span> float<span class="token punctuation">(</span>numTrainDocs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建两个向量，大小均为词汇表长度</span>    <span class="token comment" spellcheck="true"># p0Num向量表示为类别0的所有文档各个词出现的总次数</span>    p0Num <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>numWords<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># p1Num向量表示类别1的所有文档各个词出现的总次数</span>    p1Num <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>numWords<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># p0Denom为类别0的所有文档的所有词总数</span>    p0Denom <span class="token operator">=</span> <span class="token number">2.0</span>    <span class="token comment" spellcheck="true"># p1Denom为类别1的所有文档的所有词总数</span>    p1Denom <span class="token operator">=</span> <span class="token number">2.0</span>    <span class="token comment" spellcheck="true"># 循环所有文档，累计p0Num，p1Num，p0Denom，p1Denom</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>numTrainDocs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> trainCategory<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            p1Num <span class="token operator">+=</span> trainMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            p1Denom <span class="token operator">+=</span> sum<span class="token punctuation">(</span>trainMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            p0Num <span class="token operator">+=</span> trainMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            p0Denom <span class="token operator">+=</span> sum<span class="token punctuation">(</span>trainMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算各个类别的条件概率</span>    <span class="token comment" spellcheck="true"># p1Vect为类别1的条件概率</span>    p1Vect <span class="token operator">=</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>p1Num<span class="token operator">/</span>p1Denom<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># p0Vect为类别0的条件概率</span>    p0Vect <span class="token operator">=</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>p0Num<span class="token operator">/</span>p0Denom<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回三个概率</span>    <span class="token keyword">return</span> p0Vect<span class="token punctuation">,</span> p1Vect<span class="token punctuation">,</span> pAbusive</code></pre><p>再次测试<code>train()</code>函数，得到类似如下结果：</p><pre class=" language-python"><code class="language-python">listPosts<span class="token punctuation">,</span> listClasses <span class="token operator">=</span> loadDataSet<span class="token punctuation">(</span><span class="token punctuation">)</span>myVocabList <span class="token operator">=</span> createVocabList<span class="token punctuation">(</span>listPosts<span class="token punctuation">)</span>trainMat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> postingDoc <span class="token keyword">in</span> listPosts<span class="token punctuation">:</span>    trainMat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>setOfWords2Vec<span class="token punctuation">(</span>myVocabList<span class="token punctuation">,</span> postingDoc<span class="token punctuation">)</span><span class="token punctuation">)</span>p0V<span class="token punctuation">,</span> p1V<span class="token punctuation">,</span> pAb <span class="token operator">=</span> train<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>trainMat<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>listClasses<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pAb<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p0V<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1V<span class="token punctuation">)</span></code></pre><pre><code>0.5[-2.56494936 -3.25809654 -2.56494936 -3.25809654 -3.25809654 -2.56494936 -2.56494936 -2.56494936 -2.56494936 -2.56494936 -2.56494936 -2.56494936 -2.56494936 -2.56494936 -1.87180218 -3.25809654 -3.25809654 -2.56494936 -3.25809654 -3.25809654 -2.56494936 -2.56494936 -3.25809654 -3.25809654 -2.56494936 -2.56494936 -2.56494936 -2.56494936 -2.56494936 -3.25809654 -3.25809654 -2.56494936 -2.56494936][-2.35137526 -2.35137526 -3.04452244 -1.65822808 -2.35137526 -3.04452244 -2.35137526 -3.04452244 -3.04452244 -3.04452244 -2.35137526 -3.04452244 -3.04452244 -3.04452244 -3.04452244 -2.35137526 -2.35137526 -3.04452244 -1.94591015 -2.35137526 -3.04452244 -3.04452244 -2.35137526 -2.35137526 -3.04452244 -3.04452244 -3.04452244 -3.04452244 -3.04452244 -2.35137526 -2.35137526 -3.04452244 -1.94591015]</code></pre><p>可以看到，所有概率的绝对值都远大于0，这样四舍五入后不会导致都得到0。这里虽然取自然对数后的值都小于0，但这并不会影响最终结果，因为我们最终是要<code>比较大小</code>，而不需要得到精确的各个值。 </p><p>接下来实现<code>分类器函数</code>：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 分类器函数</span><span class="token comment" spellcheck="true"># vec2Classify 待预测的词向量</span><span class="token comment" spellcheck="true"># p0Vec，p1Vec, pClass1分别为train()函数训练输出的三个概率值</span><span class="token keyword">def</span> <span class="token function">classify</span><span class="token punctuation">(</span>vec2Classify<span class="token punctuation">,</span> p0Vec<span class="token punctuation">,</span> p1Vec<span class="token punctuation">,</span> pClass1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 待预测数据为类别1的概率，这里利用了前面提到的对数公式</span>    p1 <span class="token operator">=</span> sum<span class="token punctuation">(</span>vec2Classify <span class="token operator">*</span> p1Vec<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>pClass1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 待预测数据为类别0的概率，这里利用了前面提到的对数公式</span>    p0 <span class="token operator">=</span> sum<span class="token punctuation">(</span>vec2Classify <span class="token operator">*</span> p0Vec<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> pClass1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果p1大于p0，这预测结果为类别1，否则为类别0</span>    <span class="token keyword">if</span> p1 <span class="token operator">></span> p0<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span></code></pre><h4 id="3-测试算法"><a href="#3-测试算法" class="headerlink" title="3. 测试算法"></a>3. 测试算法</h4><p>现在我们可以把前面实现的分类器进行测试了，用它来预测新数据的类别。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    listPosts<span class="token punctuation">,</span> listClasses <span class="token operator">=</span> loadDataSet<span class="token punctuation">(</span><span class="token punctuation">)</span>    myVocabList <span class="token operator">=</span> createVocabList<span class="token punctuation">(</span>listPosts<span class="token punctuation">)</span>    trainMat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> postingDoc <span class="token keyword">in</span> listPosts<span class="token punctuation">:</span>        trainMat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>setOfWords2Vec<span class="token punctuation">(</span>myVocabList<span class="token punctuation">,</span> postingDoc<span class="token punctuation">)</span><span class="token punctuation">)</span>    p0V<span class="token punctuation">,</span> p1V<span class="token punctuation">,</span> pAb <span class="token operator">=</span> train<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>trainMat<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>listClasses<span class="token punctuation">)</span><span class="token punctuation">)</span>    testEntry <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'love'</span><span class="token punctuation">,</span> <span class="token string">'my'</span><span class="token punctuation">,</span> <span class="token string">'dalmation'</span><span class="token punctuation">]</span>    thisDoc <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>setOfWords2Vec<span class="token punctuation">(</span>myVocabList<span class="token punctuation">,</span> testEntry<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>testEntry<span class="token punctuation">,</span> <span class="token string">'classified as: '</span><span class="token punctuation">,</span> classify<span class="token punctuation">(</span>thisDoc<span class="token punctuation">,</span> p0V<span class="token punctuation">,</span> p1V<span class="token punctuation">,</span> pAb<span class="token punctuation">)</span><span class="token punctuation">)</span>    testEntry <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'stupid'</span><span class="token punctuation">,</span> <span class="token string">'garbage'</span><span class="token punctuation">]</span>    thisDoc <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>setOfWords2Vec<span class="token punctuation">(</span>myVocabList<span class="token punctuation">,</span> testEntry<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>testEntry<span class="token punctuation">,</span> <span class="token string">'classified as: '</span><span class="token punctuation">,</span> classify<span class="token punctuation">(</span>thisDoc<span class="token punctuation">,</span> p0V<span class="token punctuation">,</span> p1V<span class="token punctuation">,</span> pAb<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出如下：</p><pre><code>[&#39;love&#39;, &#39;my&#39;, &#39;dalmation&#39;] classified as:  0[&#39;stupid&#39;, &#39;garbage&#39;] classified as:  1</code></pre><p>第一条数据预测为<code>0</code>，即<code>非垃圾邮件</code>。第二条数据预测结果为<code>1</code>，也就是<code>垃圾邮件</code>。可以看到我们的分类器对这两条数据的预测是正确的。</p><h4 id="4-优化算法"><a href="#4-优化算法" class="headerlink" title="4. 优化算法"></a>4. 优化算法</h4><p>前面我们将每个单词的出现与否作为一个特征，这种模型叫<code>词集模型</code>。但是这种模型有一个问题，当一个词在一个文档中出现不止一次时，词集模型将不能包含这种出现不止一次的特征信息。因此通常我们会使用<code>词袋模型</code>，这种模型中，会记录每个单词出现的<code>次数</code>，而不仅仅使用单词<code>出现与否</code>作为特征。 </p><p>为了实现词袋模型，我们需要对<code>setOfWords2Vec()</code>函数进行修改：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">setOfWords2Vec</span><span class="token punctuation">(</span>vocabList<span class="token punctuation">,</span> inputSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    returnVec <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>vocabList<span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> inputSet<span class="token punctuation">:</span>        <span class="token keyword">if</span> word <span class="token keyword">in</span> vocabList<span class="token punctuation">:</span>            returnVec<span class="token punctuation">[</span>vocabList<span class="token punctuation">.</span>index<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'the word: %s is not in my Vocabulary!'</span> <span class="token operator">%</span> word<span class="token punctuation">)</span>    <span class="token keyword">return</span> returnVec</code></pre><p>可以看到，我们仅仅修改了第<code>5</code>行代码，每当遇到一个单词时，会增加词向量中对应的值，而不只是把对应的值设为<code>1</code>。 </p><p>可以再次运行一下测试程序，你将看到预测结果跟之前是一致且正确的。</p><h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><p>完整代码请在<a href="https://github.com/longyg/Machine-Learning-Practice/tree/master/Bayes" target="_blank" rel="noopener">此处下载</a>。 </p><p><code>朴素贝叶斯算法</code>在分类应用中用的非常广泛，该算法核心是基于概率，通过计算各个类别的<code>条件概率</code>，以概率最大的类别作为预测的类别，因此该算法很容易理解，而且实现也很简单。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 朴素贝叶斯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《机器学习实战》读书笔记之三：决策树</title>
      <link href="/posts/ml/mlp-3-decision-tree.html"/>
      <url>/posts/ml/mlp-3-decision-tree.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p><code>决策树</code>算法用于解决分类问题。它的基本原理是，通过给定原始数据（即训练数据）构造一棵决策树，然后通过构造的决策树构建一个分类器，从而对未知数据进行分类。 该算法的关键是如何构造一棵合适的决策树，所谓合适，就是指找到一棵<code>最优的决策树</code>，从而使数据经过尽量少的分支最终得到数据的所属分类。 本文将详细介绍如何根据训练数据构造决策树，然后通过决策树创建分类器，最后通过实际案例测试分类器的预测效果。</p><h3 id="二、构造决策树"><a href="#二、构造决策树" class="headerlink" title="二、构造决策树"></a>二、构造决策树</h3><h4 id="1-什么是决策树"><a href="#1-什么是决策树" class="headerlink" title="1. 什么是决策树"></a>1. 什么是决策树</h4><p>何为<code>决策树</code>，我们通过实际例子可以很轻松理解。 </p><p>如下就是一棵决策树，用于判断某种海洋生物是否为鱼类： </p><p><a href="http://wx3.sinaimg.cn/mw690/bd7db87egy1ftytsxc52lj20h507k3z0.jpg" target="_blank" rel="noopener"><img src="http://wx3.sinaimg.cn/mw690/bd7db87egy1ftytsxc52lj20h507k3z0.jpg" alt></a> </p><p>从图中可以看到，该决策树通过两个属性来判断海洋生物是否为鱼类，两个属性分别为:</p><ul><li>不浮出水面是否可以生存</li><li>是否有脚蹼</li></ul><p>如果该生物不浮出水面不能生存，那该生物为非鱼类。如果不浮出水面可以生存，而且有脚蹼，那就是鱼类，否则为非鱼类。 </p><p>其中每个属性都只有两种可能的取值，因此每个属性框向下都只有两个分支。 </p><p>所以，不管决策树多么复杂，决策树始终由三个基本模块组成，：</p><ul><li><code>判断模块</code>：代表数据的属性或特征</li><li><code>终止模块</code>：最后的叶子节点，表示数据经过决策树后的最终分类</li><li><code>分支</code>：从一个判断模块到达下一个模块的分叉，可以是另一个判断模块或终止模块。属性有多少种取值就会有多少个分支。</li></ul><p>大家可能想到了，上面的决策树并不是判断海洋生物是否为鱼类的唯一决策树，我们可以调换属性判断顺序，上面的决策树是先判断属性“不浮出水面是否可以生存”，如果我们改为先判断属性“是否有脚蹼”，将得到一个完全不同的决策树，如下： </p><p><a href="http://wx4.sinaimg.cn/mw690/bd7db87egy1ftytswws1wj20h408mjrs.jpg" target="_blank" rel="noopener"><img src="http://wx4.sinaimg.cn/mw690/bd7db87egy1ftytswws1wj20h408mjrs.jpg" alt></a> </p><p>那么究竟在实际使用中，我们应该使用哪一种决策树呢？实际上这就是机器学习决策树算法要解决的核心问题：<code>构造最优决策树</code>。 </p><p>接下来我们将介绍如何构造最优决策树。</p><h4 id="2-构造最优决策树"><a href="#2-构造最优决策树" class="headerlink" title="2. 构造最优决策树"></a>2. 构造最优决策树</h4><p>应用机器学习的决策树算法，我们需要收集一定量的训练数据，通过训练数据构造<code>最优决策树</code>。 </p><p>如何构造最优决策树？ </p><p>核心就是从训练数据找出<code>划分数据集的最好特征</code>，然后划分数据集为多个子数据集。再递归地从子数据集找出划分子数据集的最好特征，划分子数据集，直到所有子数据集中的数据具有相同分类。 </p><p>因此为了构造最优决策树，实际上我们需要解决一个关键的算法问题：</p><ul><li>找出划分数据集的最好特征的算法</li></ul><p>接下来我们将实现这个关键算法，然后实现划分数据集，最后实现构造<code>最优决策树</code>。 </p><p>我们依然以前面的判断海洋生物是否为鱼类作为例子，假设我们有一组训练数据如下：</p><table><thead><tr><th>编号</th><th>不浮出水面是否可以生存</th><th>是否有脚蹼</th><th>是否为鱼类</th></tr></thead><tbody><tr><td>1</td><td>可以生存</td><td>有</td><td>鱼类</td></tr><tr><td>2</td><td>可以生存</td><td>有</td><td>鱼类</td></tr><tr><td>3</td><td>可以生存</td><td>没有</td><td>非鱼类</td></tr><tr><td>4</td><td>不能生存</td><td>有</td><td>非鱼类</td></tr><tr><td>5</td><td>不能生存</td><td>有</td><td>非鱼类</td></tr></tbody></table><p>通过上面给定的训练数据集，我们需要确定是以第一个特征优先分类，还是以第二个特征优先分类。 </p><p><strong>那么如何确定呢？</strong> </p><p>这里将要采用信息论理论：<code>香农熵</code>。就是可以将信息进行量化的理论，通过计算信息的熵来获知信息量。 </p><p>计算<code>香农熵</code>的公式为： </p><p>$$H = -\sum_{i=1}^{n}p(x_i)log_2p(x_i)$$ </p><p>其中$p(x_i)$表示数据集中第\(x_i\)种分类的概率。 </p><p>至于这个公式是怎么来的，这个大家不用去关心，其实我也没有去深入了解过。他是大牛克劳德-香农发明的，也是世人所公认的。 </p><p>它用于度量数据集的混乱度，<code>香农熵</code>越大，混乱度越高。而<code>混乱度越高</code>，说明数据集包含的<code>信息量越大</code>。反之，如果某个数据集<code>混乱度越低</code>（即数据集的分类更明朗），那它所承载的<code>信息量越小</code>。 </p><p>而我们的决策树的目的是要把混乱的数据集进行分类，最终让数据集变得分类明确。也就说，要尽量让分类后的数据集的香农熵小。 </p><p>以前面的数据集为例，我们来根据香农熵公式计算一下该数据集的香农熵。 </p><p>数据集包含两种分类：<code>鱼类</code>和<code>非鱼类</code>。其中: </p><ul><li><code>鱼类</code>有两条数据，概率为： </li></ul><p>$$p(鱼类) = 2 / 5 = 0.4$$ </p><ul><li><code>非鱼类</code>有3条数据，概率为： </li></ul><p>$$p(非鱼类) = 3 / 5 = 0.6$$ </p><p>代入香农熵公式： </p><p>$$H = - (p(鱼类)log_2p(鱼类) + (p(非鱼类)log_2p(非鱼类))$$ </p><p>$$= - (0.4 * log_20.4 + 0.6 * log_20.6)$$ </p><p>$$= -(-0.5287712379549449-0.44217935649972373)$$ </p><p>$$= 0.9709505944546686$$ </p><p>接下来，用Python3实现计算数据集的香农熵。创建<code>decision_tree.py</code>文件，定义计算香农熵的<code>calcShannonEnt()</code>函数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token comment" spellcheck="true"># 计算香农熵</span><span class="token keyword">import</span> math<span class="token comment" spellcheck="true"># 计算香农熵</span><span class="token keyword">def</span> <span class="token function">calcShannonEnt</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取数据集数据总个数</span>    numEntries <span class="token operator">=</span> len<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span>    labelCounts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> featVec <span class="token keyword">in</span> dataSet<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取数据的分类，数据集的最后一个数据即是该数据的分类</span>        currentLabel <span class="token operator">=</span> featVec<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> currentLabel <span class="token operator">not</span> <span class="token keyword">in</span> labelCounts<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            labelCounts<span class="token punctuation">[</span>currentLabel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        labelCounts<span class="token punctuation">[</span>currentLabel<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    shannonEnt <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> labelCounts<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 计算分类的概率</span>        prob <span class="token operator">=</span> float<span class="token punctuation">(</span>labelCounts<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> numEntries        <span class="token comment" spellcheck="true"># 使用香农熵公式计算香农熵</span>        shannonEnt <span class="token operator">-=</span> prob <span class="token operator">*</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>prob<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> shannonEnt</code></pre><p>然后创建前面示例的数据集：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">createDataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dataSet <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'可以生存'</span><span class="token punctuation">,</span> <span class="token string">'有'</span><span class="token punctuation">,</span> <span class="token string">"鱼类"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'可以生存'</span><span class="token punctuation">,</span> <span class="token string">'有'</span><span class="token punctuation">,</span> <span class="token string">"鱼类"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'可以生存'</span><span class="token punctuation">,</span> <span class="token string">'没有'</span><span class="token punctuation">,</span> <span class="token string">"非鱼类"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'不能生存'</span><span class="token punctuation">,</span> <span class="token string">'有'</span><span class="token punctuation">,</span> <span class="token string">"非鱼类"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'不能生存'</span><span class="token punctuation">,</span> <span class="token string">'有'</span><span class="token punctuation">,</span> <span class="token string">"非鱼类"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'不浮出水面是否可以生存'</span><span class="token punctuation">,</span> <span class="token string">'是否有脚蹼'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dataSet<span class="token punctuation">,</span> labels</code></pre><pre class=" language-python"><code class="language-python">dataSet<span class="token punctuation">,</span> labels <span class="token operator">=</span> createDataSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>calcShannonEnt<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre><code>0.9709505944546686</code></pre><p>可见，Python实现的函数的计算结果与前面的计算结果一致。 </p><p>我们也可以看到，<code>香农熵</code>的大小取决于两个因素：</p><ol><li>数据分类种类个数</li><li>每种分类的概率大小。</li></ol><p>数据<code>分类种类越多</code>，表示数据<code>混乱度越高</code>，因此<code>香农熵越大</code>。 </p><p>数据<code>分类越均匀</code>，<code>香农熵越大</code>。比如上面的例子，如果两种分类的其中每种分类的概率一样，都为<code>0.5</code>，香农熵将最大为<code>1.0</code>。 </p><p>为了确定用于划分数据集的最好特征，我们可以计算划分前与划分后的数据集的<code>信息增益</code>。所谓信息增益，就是划分前数据集的香农熵与划分后数据集的香农熵的<code>差值</code>： </p><p>$$I = H_{划分前} - H_{划分后}$$ </p><p>差值越大，信息增益越大。如果某个特征划分数据集后信息增益最大，那么该特征就是我们要寻找的划分数据集的<code>最佳特征</code>。 </p><p>下面我们来计算前面示例的两个特征分别划分数据集后的信息增益，然后比较信息增益大小，<code>信息增益最大的特征</code>，即为划分数据集的<code>最好特征</code>。 </p><p>按第一个特征“不浮出水面是否可以生存”划分数据集，结果如下： </p><p><a href="http://wx3.sinaimg.cn/large/bd7db87egy1fy2m5535vyj212z0is0uo.jpg" target="_blank" rel="noopener"><img src="http://wx3.sinaimg.cn/large/bd7db87egy1fy2m5535vyj212z0is0uo.jpg" alt></a> </p><p>信息增益为： </p><p>$$I_1 = H_{划分前} - H_{划分后}$$</p><p>$$= 0.9709505944546686 - 0.5509775004326937$$ </p><p>$$= 0.4199730940219749$$ </p><p>按第二个特征“是否有脚蹼”划分数据集，结果如下： </p><p><a href="http://wx1.sinaimg.cn/large/bd7db87egy1fy2m560278j212i0is75z.jpg" target="_blank" rel="noopener"><img src="http://wx1.sinaimg.cn/large/bd7db87egy1fy2m560278j212i0is75z.jpg" alt></a> </p><p>信息增益为： </p><p>$$I_2 = H_{划分前} - H_{划分后}$$ </p><p>$$= 0.9709505944546686 - 0.8$$ </p><p>$$= 0.1709505944546686$$ </p><p>比较按两种特征划分后的信息增益，由于$I_1 &gt; I_2$，因此，第一个特征“不浮出水面是否可以生存”为划分该数据集的<code>最好特征</code>。 </p><p>现在，相信你已经了解了通过计算<code>信息增益</code>来寻找划分数据集的<code>最好特征</code>的算法原理。接下来，我们用Python3实现该算法。 </p><p>首先定义<code>splitDataSet()</code>函数用于划分数据集：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 划分数据集</span><span class="token comment" spellcheck="true"># dataSet： 将被进行划分的数据集</span><span class="token comment" spellcheck="true"># axis: 特征索引，表示按第几个特征进行划分，从0开始</span><span class="token comment" spellcheck="true"># value: 特征的值，将把第axis个特征具有相同value的数据划分为同一个子集</span><span class="token keyword">def</span> <span class="token function">splitDataSet</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span> axis<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    retDataSet <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> featVec <span class="token keyword">in</span> dataSet<span class="token punctuation">:</span>        <span class="token keyword">if</span> featVec<span class="token punctuation">[</span>axis<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 去掉用于划分的特征，只保留还未用于划分的特征</span>            reducedFeatVec <span class="token operator">=</span> featVec<span class="token punctuation">[</span><span class="token punctuation">:</span>axis<span class="token punctuation">]</span>            reducedFeatVec<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>featVec<span class="token punctuation">[</span>axis <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            retDataSet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>reducedFeatVec<span class="token punctuation">)</span>    <span class="token keyword">return</span> retDataSet</code></pre><p>接下来，定义<code>chooseBestFeatureToSplit()</code>函数，实现寻找划分数据集的最好特征：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 选择划分数据集的最好特征</span><span class="token keyword">def</span> <span class="token function">chooseBestFeatureToSplit</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    numFeatures <span class="token operator">=</span> len<span class="token punctuation">(</span>dataSet<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 计算划分前的香农熵</span>    baseEntropy <span class="token operator">=</span> calcShannonEnt<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span>    bestInfoGain <span class="token operator">=</span> <span class="token number">0.0</span>    bestFeature <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true"># 循环用每个特征对数据集进行划分</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>numFeatures<span class="token punctuation">)</span><span class="token punctuation">:</span>        featList <span class="token operator">=</span> <span class="token punctuation">[</span>example<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataSet<span class="token punctuation">]</span>        uniqueVals <span class="token operator">=</span> set<span class="token punctuation">(</span>featList<span class="token punctuation">)</span>        newEntropy <span class="token operator">=</span> <span class="token number">0.0</span>        <span class="token comment" spellcheck="true"># 循环每个特征的所有取值，进行划分</span>        <span class="token keyword">for</span> value <span class="token keyword">in</span> uniqueVals<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 划分数据集，获得划分后的子集</span>            subDataSet <span class="token operator">=</span> splitDataSet<span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span> i<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 计算子集的数据比例</span>            prob <span class="token operator">=</span> len<span class="token punctuation">(</span>subDataSet<span class="token punctuation">)</span> <span class="token operator">/</span> float<span class="token punctuation">(</span>len<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 计算按特征i进行划分后，所有子集的总香农熵</span>            newEntropy <span class="token operator">+=</span> prob <span class="token operator">*</span> calcShannonEnt<span class="token punctuation">(</span>subDataSet<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 计算信息增益</span>        infoGain <span class="token operator">=</span> baseEntropy <span class="token operator">-</span> newEntropy        <span class="token comment" spellcheck="true"># 比较信息增益，将信息增益大的特征赋予bestFeature变量</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>infoGain <span class="token operator">></span> bestInfoGain<span class="token punctuation">)</span><span class="token punctuation">:</span>            bestInfoGain <span class="token operator">=</span> infoGain            bestFeature <span class="token operator">=</span> i    <span class="token keyword">return</span> bestFeature</code></pre><p>测试一下：</p><pre class=" language-python"><code class="language-python">bestFeature <span class="token operator">=</span> chooseBestFeatureToSplit<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bestFeature<span class="token punctuation">)</span></code></pre><p>输出：</p><pre><code> 0</code></pre><p>输出为<code>0</code>，表示第一个特征“不浮出水面是否可以生存”，与我们在前面的推导结果是一致的。 </p><p>现在，我们已经实现了决策树的核心算法：<code>找出划分数据集的最好特征</code>。接下来，我们将使用该算法构造决策树。 </p><p><code>构造决策树</code>的基本步骤为：</p><ol><li>寻找划分数据集的<code>最好特征</code></li><li>划分数据集</li><li>创建分支节点</li><li>循环每个子集，递归地重复步骤1-3，如果子集包含的数据都属于同一分类，则返回。</li></ol><p>但有一种情况，如果所有特征都被用于划分后，依然有某个子集的数据不完全属于同一分类，这种情况下，我们将直接返回该子集中出现次数最多的分类。 </p><p>因此，我们首先实现<code>majorityCnt()</code>函数用于获取出现次数最多的分类：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> operator<span class="token comment" spellcheck="true"># 返回分类列表中出现次数最多的分类</span><span class="token keyword">def</span> <span class="token function">majorityCnt</span><span class="token punctuation">(</span>classList<span class="token punctuation">)</span><span class="token punctuation">:</span>    classCount <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> vote <span class="token keyword">in</span> classList<span class="token punctuation">:</span>        <span class="token keyword">if</span> vote <span class="token operator">not</span> <span class="token keyword">in</span> classCount<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            classCount<span class="token punctuation">[</span>vote<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        classCount<span class="token punctuation">[</span>vote<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    sortedClassCount <span class="token operator">=</span> sorted<span class="token punctuation">(</span>classCount<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sortedClassCount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><p>定义<code>createTree()</code>函数创建决策树：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建决策树</span><span class="token keyword">def</span> <span class="token function">createTree</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取所有数据的分类，每条数据的最后一列为该数据的分类，因此可以通过索引-1获取。</span>    classList <span class="token operator">=</span> <span class="token punctuation">[</span>example<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataSet<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 如果分类列表中所有分类都相同，则直接返回</span>    <span class="token keyword">if</span> classList<span class="token punctuation">.</span>count<span class="token punctuation">(</span>classList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>classList<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> classList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 如果分类列表中分类不一样，且数据集中每条数据都只有一项数据了，</span>    <span class="token comment" spellcheck="true"># 这表示数据集中不包含特征数据了，也就是说所有特征都已经被用于划分数据集了。</span>    <span class="token comment" spellcheck="true"># 这种情况下，返回出现次数最多的分类</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>dataSet<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> majorityCnt<span class="token punctuation">(</span>classList<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 找出用于划分数据集的最好特征的索引</span>    bestFeature <span class="token operator">=</span> chooseBestFeatureToSplit<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 划分数据集的最好特征的名称</span>    bestFeatureLabel <span class="token operator">=</span> labels<span class="token punctuation">[</span>bestFeature<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 以最好特征名称为key，初始化决策树</span>    myTree <span class="token operator">=</span> <span class="token punctuation">{</span>bestFeatureLabel<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 找到最好特征后，将其从特征列表中删除，以免后续重复使用特征进行分类。</span>    <span class="token keyword">del</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span>bestFeature<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取最好特征所有的值</span>    featureValues <span class="token operator">=</span> <span class="token punctuation">[</span>example<span class="token punctuation">[</span>bestFeature<span class="token punctuation">]</span> <span class="token keyword">for</span> example <span class="token keyword">in</span> dataSet<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 去重</span>    uniqueVals <span class="token operator">=</span> set<span class="token punctuation">(</span>featureValues<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 循环特征的值</span>    <span class="token keyword">for</span> value <span class="token keyword">in</span> uniqueVals<span class="token punctuation">:</span>        subLabels <span class="token operator">=</span> labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 用前面找出的最好特征与特征值划分数据集，再递归地对子集构建决策树</span>        myTree<span class="token punctuation">[</span>bestFeatureLabel<span class="token punctuation">]</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> createTree<span class="token punctuation">(</span>splitDataSet<span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span> bestFeature<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> subLabels<span class="token punctuation">)</span>    <span class="token keyword">return</span> myTree</code></pre><p>测试 一下：</p><pre class=" language-python"><code class="language-python">tree <span class="token operator">=</span> createTree<span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span></code></pre><p>输出为：</p><pre><code>{&#39;不浮出水面是否可以生存&#39;: {&#39;可以生存&#39;: {&#39;是否有脚蹼&#39;: {&#39;有&#39;: &#39;鱼类&#39;, &#39;没有&#39;: &#39;非鱼类&#39;}}, &#39;不能生存&#39;: &#39;非鱼类&#39;}}</code></pre><p>输出为一个嵌套的字典，第一层字典的<code>key</code>为数据集的<code>最好特征</code>，值为<code>分支子树</code>。子树为多个字典，对应最好特征的多个值。</p><h3 id="三、创建决策树分类器"><a href="#三、创建决策树分类器" class="headerlink" title="三、创建决策树分类器"></a>三、创建决策树分类器</h3><p>到目前为止，我们已经构造出<code>最优决策树</code>。下一步，我们将使用决策树构建<code>分类器</code>，从而可以使用分类器对未知数据进行分类。 </p><p>定义<code>classify()</code>函数：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 决策树分类器</span><span class="token comment" spellcheck="true"># inputTree: 决策树</span><span class="token comment" spellcheck="true"># featLabels: 特征标签列表</span><span class="token comment" spellcheck="true"># testVec: 测试向量</span><span class="token keyword">def</span> <span class="token function">classify</span><span class="token punctuation">(</span>inputTree<span class="token punctuation">,</span> featLabels<span class="token punctuation">,</span> testVec<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取决策树的第一个key，就是第一个分类特征</span>    firstStr <span class="token operator">=</span> list<span class="token punctuation">(</span>inputTree<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取第一个分类特征的值，也就是其分支</span>    secondDict <span class="token operator">=</span> inputTree<span class="token punctuation">[</span>firstStr<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取第一个特征的在特征标签列表中的索引</span>    featIndex <span class="token operator">=</span> featLabels<span class="token punctuation">.</span>index<span class="token punctuation">(</span>firstStr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 循环第一个特征的分支树</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> secondDict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> testVec<span class="token punctuation">[</span>featIndex<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果分支是一个字典，说明还有包含子判断模块的子树</span>            <span class="token keyword">if</span> type<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'dict'</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 递归调用分类器，进入子树判断分类</span>                classLabel <span class="token operator">=</span> classify<span class="token punctuation">(</span>secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> featLabels<span class="token punctuation">,</span> testVec<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 否则说明已经找到最终分类，直接返回。</span>                classLabel <span class="token operator">=</span> secondDict<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">return</span> classLabel</code></pre><p>那么我们来测试一下分类器：</p><pre class=" language-python"><code class="language-python">result <span class="token operator">=</span> classify<span class="token punctuation">(</span>tree<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"不能生存"</span><span class="token punctuation">,</span> <span class="token string">"有"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>输出为：</p><pre><code>非鱼类</code></pre><p>给定特征数据，不浮出水面不能生存，有脚蹼，决策树分类器预测结果为非鱼类。 </p><p>有了这个分类器，我们可以对任意输入的数据进行预测。当然，对于这个预测海洋生物是否为鱼类的例子，实在是太简单了，因为只有两个特征，每个特征都只有两种取值，因此总的组合数据也就只有几条。完全没必要这么费力的创建决策树然后创建分类器。但是，因为简单，我们用这个例子来解释决策树算法的细节就更容易被理解。 </p><p>现实中，我们面对的数据集会比这个例子复杂得多，比如可能有成千上万个特征，每个特征都有很多取值。但是无论如何复杂，构造决策树的原理都是完全不变的。并且，我们实现的Python3代码是适用于任何复杂数据集的。</p><h3 id="四、决策树应用案例-预测隐形眼镜类型"><a href="#四、决策树应用案例-预测隐形眼镜类型" class="headerlink" title="四、决策树应用案例 - 预测隐形眼镜类型"></a>四、决策树应用案例 - 预测隐形眼镜类型</h3><p>本案例是通过决策树预测患者需要佩戴什么类型的隐形眼镜。 </p><p>我们有一份眼镜类型的数据集文件：<code>lenses.txt</code>，请<a href="https://github.com/longyg/Machine-Learning-Practice/blob/master/DecisionTree/lenses.txt" target="_blank" rel="noopener">点击链接</a>下载数据文件。 </p><p>包含4个特征，分别为<code>age</code>, <code>prescript</code>, <code>astigmatic</code>, <code>tearRate</code>。有些特征有两个取值，有些有三个取值。 </p><p>我们首先将数据文件解析为<code>dataSet</code>格式，然后使用第二节中实现的函数创建决策树和分类器。创建<code>lenses.py</code>文件：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> decision_tree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fr <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'lenses.txt'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取数据文件的每一行，然后以\t分割成列表</span>    lenses <span class="token operator">=</span> <span class="token punctuation">[</span>inst<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> inst <span class="token keyword">in</span> fr<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    lensesLabels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"prescript"</span><span class="token punctuation">,</span> <span class="token string">"astigmatic"</span><span class="token punctuation">,</span> <span class="token string">"tearRate"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 使用decision_tree实现的createTree()函数创建决策树</span>    lensesTree <span class="token operator">=</span> decision_tree<span class="token punctuation">.</span>createTree<span class="token punctuation">(</span>lenses<span class="token punctuation">,</span> lensesLabels<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lensesTree<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 注意，我们在使用分类器时，要重新传入分类标签列表，不能重用前面的分类标签列表。因为在创建决策树函数中，会删除标签列表里的数据。</span>    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"prescript"</span><span class="token punctuation">,</span> <span class="token string">"astigmatic"</span><span class="token punctuation">,</span> <span class="token string">"tearRate"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 使用分类器函数预测未知数据</span>    result <span class="token operator">=</span> decision_tree<span class="token punctuation">.</span>classify<span class="token punctuation">(</span>lensesTree<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"young"</span><span class="token punctuation">,</span> <span class="token string">"hyper"</span><span class="token punctuation">,</span> <span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"reduced"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>执行代码输出如下：</p><pre><code>{&#39;tearRate&#39;: {&#39;normal&#39;: {&#39;astigmatic&#39;: {&#39;yes&#39;: {&#39;prescript&#39;: {&#39;hyper&#39;: {&#39;age&#39;: {&#39;young&#39;: &#39;hard&#39;, &#39;pre&#39;: &#39;no lenses&#39;, &#39;presbyopic&#39;: &#39;no lenses&#39;}}, &#39;myope&#39;: &#39;hard&#39;}}, &#39;no&#39;: {&#39;age&#39;: {&#39;young&#39;: &#39;soft&#39;, &#39;pre&#39;: &#39;soft&#39;, &#39;presbyopic&#39;: {&#39;prescript&#39;: {&#39;hyper&#39;: &#39;soft&#39;, &#39;myope&#39;: &#39;no lenses&#39;}}}}}}, &#39;reduced&#39;: &#39;no lenses&#39;}}no lenses</code></pre><p>我们使用前面实现的<code>createTree()</code>函数构建了决策树，然后将其传入<code>classify()</code>函数用于预测未知隐形眼镜的类型。 </p><p>也可以看到，这里创建的<code>决策树</code>相对前面的决策树要更复杂一些，我们可以将其用决策树图展示出来看看： </p><p><a href="http://wx4.sinaimg.cn/large/bd7db87egy1fy2m56n1jhj20jj0d8gms.jpg" target="_blank" rel="noopener"><img src="http://wx4.sinaimg.cn/large/bd7db87egy1fy2m56n1jhj20jj0d8gms.jpg" alt></a></p><h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><p>本文所有代码放在github，<a href="https://github.com/longyg/Machine-Learning-Practice/tree/master/DecisionTree" target="_blank" rel="noopener">点击此处</a>查看完整代码。 </p><p><code>决策树算法</code>是一个非常简单，而且非常容易理解的算法。本文详细讲解了构建决策树的算法原理，对如何找出划分数据集的最好特征进行了推导，使用的是<code>ID3算法</code>（即通过计算数据集的<code>香农熵</code>从而计算出<code>信息增益</code>，通过比较信息增益来确定<code>最佳特征</code>），非常容易理解。当然实现决策树还有其他算法，后续继续讲解。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 决策树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy快速入门简明教程</title>
      <link href="/posts/data-analysis/numpy-quickstart-tutorial.html"/>
      <url>/posts/data-analysis/numpy-quickstart-tutorial.html</url>
      
        <content type="html"><![CDATA[<p>本教程是<code>Numpy</code>的入门教程，基于官方《<a href="https://docs.scipy.org/doc/numpy/user/quickstart.html" target="_blank" rel="noopener">Quickstart tutorial</a>》 <code>numpy</code>不是Python默认内置模块，所以在使用<code>numpy</code>之前，我们需要导入<code>numpy</code>模块：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</code></pre><h3 id="一、创建numpy数组"><a href="#一、创建numpy数组" class="headerlink" title="一、创建numpy数组"></a>一、创建<code>numpy</code>数组</h3><h4 id="1-使用numpy-array-函数¶"><a href="#1-使用numpy-array-函数¶" class="headerlink" title="1. 使用numpy.array()函数¶"></a>1. 使用numpy.array()函数<a href="http://127.0.0.1:8889/notebooks/LearnPython/numpy.ipynb#1.-使用numpy.array()函数" target="_blank" rel="noopener">¶</a></h4><h5 id="1-通过List创建numpy数组"><a href="#1-通过List创建numpy数组" class="headerlink" title="1)  通过List创建numpy数组"></a>1)  通过<code>List</code>创建numpy数组</h5><p>传入Python标准的list</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h5 id="2-通过tuple创建numpy数组"><a href="#2-通过tuple创建numpy数组" class="headerlink" title="2) 通过tuple创建numpy数组"></a>2) 通过<code>tuple</code>创建numpy数组</h5><p>传入tuple</p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h4 id="2-使用arange-函数创建数组"><a href="#2-使用arange-函数创建数组" class="headerlink" title="2. 使用arange()函数创建数组"></a>2. 使用<code>arange()</code>函数创建数组</h4><p><code>arange()</code>函数用来创建序列数组 </p><h5 id="1）-传入单个参数时，可以创建从0开始到传入参数的按1递增的序列数组"><a href="#1）-传入单个参数时，可以创建从0开始到传入参数的按1递增的序列数组" class="headerlink" title="1） 传入单个参数时，可以创建从0开始到传入参数的按1递增的序列数组"></a>1） 传入单个参数时，可以创建从0开始到传入参数的按1递增的序列数组</h5><pre class=" language-python"><code class="language-python">c <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span> <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span>  <span class="token number">5</span>  <span class="token number">6</span>  <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span> <span class="token number">18</span> <span class="token number">19</span><span class="token punctuation">]</span></code></pre><h5 id="2）-传入2个参数，可以创建从第1个参数开始到第2个参数的按1递增的序列数组"><a href="#2）-传入2个参数，可以创建从第1个参数开始到第2个参数的按1递增的序列数组" class="headerlink" title="2） 传入2个参数，可以创建从第1个参数开始到第2个参数的按1递增的序列数组"></a>2） 传入2个参数，可以创建从第1个参数开始到第2个参数的按1递增的序列数组</h5><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span> <span class="token number">18</span> <span class="token number">19</span><span class="token punctuation">]</span></code></pre><h5 id="3）-传入3个参数，可以创建从第1个参数开始到第2个参数的按第3个参数递增的序列数组"><a href="#3）-传入3个参数，可以创建从第1个参数开始到第2个参数的按第3个参数递增的序列数组" class="headerlink" title="3） 传入3个参数，可以创建从第1个参数开始到第2个参数的按第3个参数递增的序列数组"></a>3） 传入3个参数，可以创建从第1个参数开始到第2个参数的按第3个参数递增的序列数组</h5><pre class=" language-python"><code class="language-python">e <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p>输出：</p><pre><code>[10 13 16 19]</code></pre><p>当然也可以用该方法创建一个递减序列数组：</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></code></pre><p>输出：</p><pre><code>[20 17 14 11]</code></pre><h4 id="3-使用linspace-函数创建数组"><a href="#3-使用linspace-函数创建数组" class="headerlink" title="3. 使用linspace()函数创建数组"></a>3. 使用<code>linspace()</code>函数创建数组</h4><p><code>linspace()</code>同样可以像<code>arange()</code>函数那样创建序列数组。 在有些情况下，我们不知道递增数值是多少，而只想产生某个数值范围内的指定个数的序列数组。这种情况下， 使用<code>linspace()</code>比<code>arange()</code>函数更方便。因为<code>linspace()</code>会自动计算递增数值。 如下，生成了一个从0递增到2的包含9个元素的序列数组：</p><pre class=" language-python"><code class="language-python">e <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span></code></pre><p>输出：</p><pre><code>[0.   0.25 0.5  0.75 1.   1.25 1.5  1.75 2.  ]float64</code></pre><p>下面例子，通过<code>linspace()</code>函数生成0到2倍pi值的包含10个元素的递增序列数组，然后对生成的序列数组求sin值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> pie <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>pi<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>e <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p>输出：</p><pre><code>[0.         0.6981317  1.3962634  2.0943951  2.7925268  3.4906585 4.1887902  4.88692191 5.58505361 6.28318531][ 0.00000000e+00  6.42787610e-01  9.84807753e-01  8.66025404e-01  3.42020143e-01 -3.42020143e-01 -8.66025404e-01 -9.84807753e-01 -6.42787610e-01 -2.44929360e-16]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows主机与Docker容器文件夹共享</title>
      <link href="/posts/sharing/share-with-host-and-docker.html"/>
      <url>/posts/sharing/share-with-host-and-docker.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在windows下使用<code>Docker ToolBox</code>时，有时候我们需要将主机某个文件夹共享到docker容器中，方便在windows主机与docker容器之间同步文件夹数据。但是我们都知道Docker ToolBox会启动<code>virtualbox</code>虚拟机，docker实际上是运行在虚拟机上的，而不是直接运行在windows主机上，所以没办法直接通过<code>docker run</code>的<code>-v</code> 参数实现主机与docker容器文件夹共享。 </p><p>本文将介绍如何在windows下实现主机与docker容器之间的文件夹共享。 主要有两大步骤： </p><ol><li><p>配置windows主机与virtualbox虚拟机之间文件夹共享。 </p></li><li><p>配置virtualbox虚拟机与docker容器之间文件夹共享。 </p></li></ol><p>我们都知道<code>docker run</code>的<code>-v</code> 参数可以实现docker容器与宿主机之间目录共享。对于使用<code>Docker Toolbox</code>的情况，宿主机是并不是windows主机，而是在windows主机上通过virtualbox运行的虚拟机。因此，docker容器只能与虚拟机之间进行文件夹共享，要实现windows主机与docker容器之间文件夹共享，我们还需要配置windows主机与虚拟机之间文件夹共享，从而间接实现windows主机与docker容器之间文件夹共享。</p><h3 id="一、-配置windows主机与virtualbox虚拟机之间文件夹共享"><a href="#一、-配置windows主机与virtualbox虚拟机之间文件夹共享" class="headerlink" title="一、 配置windows主机与virtualbox虚拟机之间文件夹共享"></a>一、 配置windows主机与virtualbox虚拟机之间文件夹共享</h3><h4 id="1-在VirtualBox中添加共享文件夹"><a href="#1-在VirtualBox中添加共享文件夹" class="headerlink" title="1. 在VirtualBox中添加共享文件夹"></a>1. 在<code>VirtualBox</code>中添加共享文件夹</h4><p>首先，打开Oracle VM VirtualBox管理器：</p><p><a href="http://wx1.sinaimg.cn/mw690/bd7db87egy1ftq0x1omh4j202102hmx8.jpg" target="_blank" rel="noopener"><img src="http://wx1.sinaimg.cn/mw690/bd7db87egy1ftq0x1omh4j202102hmx8.jpg" alt></a> </p><p>选择<code>Docker ToolBox</code>默认创建的<code>default</code> 虚拟机，点击工具栏的“设置”按钮，打开设置窗口： </p><p><a href="http://wx4.sinaimg.cn/mw690/bd7db87egy1ftq0x217gkj201k01jmwy.jpg" target="_blank" rel="noopener"><img src="http://wx4.sinaimg.cn/mw690/bd7db87egy1ftq0x217gkj201k01jmwy.jpg" alt></a> </p><p>点击左侧菜单栏的“共享文件夹”打开共享文件夹设置面板。 </p><p><a href="http://wx3.sinaimg.cn/mw690/bd7db87egy1ftq0x33qtfj20uw0k5ju9.jpg" target="_blank" rel="noopener"><img src="http://wx3.sinaimg.cn/mw690/bd7db87egy1ftq0x33qtfj20uw0k5ju9.jpg" alt></a> </p><p>默认情况下，virtualbox已经配置了<code>c/Users</code>目录为共享文件夹，对应虚拟机里的共享目录为<code>/c/Users</code>。 </p><p>如果我们想共享其他文件夹，那么我们需要点击右侧的“添加共享文件夹”按钮： </p><p><a href="http://wx3.sinaimg.cn/mw690/bd7db87egy1ftq0x2iitoj200s00u0jw.jpg" target="_blank" rel="noopener"><img src="http://wx3.sinaimg.cn/mw690/bd7db87egy1ftq0x2iitoj200s00u0jw.jpg" alt></a> </p><p>添加一个共享文件夹配置，如下： </p><p><a href="http://wx3.sinaimg.cn/mw690/bd7db87egy1ftq0x45444j20k70c7ta1.jpg" target="_blank" rel="noopener"><img src="http://wx3.sinaimg.cn/mw690/bd7db87egy1ftq0x45444j20k70c7ta1.jpg" alt></a> </p><p>如上图所示，我添加了一个名称为<code>MyBlog</code> 的共享文件夹，指向windows主机的<code>E:\\workspace\\MyBlog</code> 目录。同时，勾选“自动挂载”和“固定分配”。 </p><blockquote><p>PS：我共享该文件夹的目的是，以后在我本机上对我的blog的修改就可以动态同步到docker容器中，达到实时生效的目的 </p></blockquote><p><a href="http://wx4.sinaimg.cn/mw690/bd7db87egy1ftq0x4p81bj20k20c5gmj.jpg" target="_blank" rel="noopener"><img src="http://wx4.sinaimg.cn/mw690/bd7db87egy1ftq0x4p81bj20k20c5gmj.jpg" alt></a> </p><p>点击<code>OK</code>保存。</p><h4 id="2-挂载共享文件夹"><a href="#2-挂载共享文件夹" class="headerlink" title="2. 挂载共享文件夹"></a>2. 挂载共享文件夹</h4><p>添加共享文件夹后，需要将其挂载到虚拟机上。 </p><h5 id="1-自动挂载到默认目录"><a href="#1-自动挂载到默认目录" class="headerlink" title="1) 自动挂载到默认目录"></a>1) 自动挂载到默认目录</h5><p>由于我们前面添加共享文件夹时勾选了<code>自动挂载</code>，当我们重启虚拟机后，共享文件夹就会被自动挂载到虚拟机上，不用手动挂载。 </p><p>所以接下来我们启动<code>Docker Quickstart Terminal</code>，运行如下命令重启虚拟机：</p><pre class=" language-bash"><code class="language-bash">docker-machine restart</code></pre><p>重启后，运行如下命令进入虚拟机：</p><pre class=" language-bash"><code class="language-bash">docker-machine <span class="token function">ssh</span></code></pre><p>进入虚拟机后，检查一下我们的共享文件夹是否自动挂载上了。共享文件夹会被自动挂载到根目录下，路劲为：<code>/&lt;共享文件夹名称&gt;</code> ，如下是我的例子：</p><pre class=" language-bash"><code class="language-bash">docker@default:~$ ll /MyBlogtotal 8-rwxrwxrwx    1 docker   staff         1183 Jun 11 14:07 MyBlog.iml-rwxrwxrwx    1 docker   staff         2263 Jun 11 14:05 pom.xmldrwxrwxrwx    1 docker   staff            0 Jun 11 14:05 src/drwxrwxrwx    1 docker   staff            0 Jun 11 14:09 target/</code></pre><p>可以看到，windows主机<code>E:\workspace\MyBlog</code> 里的内容已经共享到虚拟机<code>/MyBlog</code> 下了。 </p><h5 id="2-挂载到指定目录"><a href="#2-挂载到指定目录" class="headerlink" title="2) 挂载到指定目录"></a>2) 挂载到指定目录</h5><p>当然，我们也可以将共享文件夹挂载到虚拟机的指定目录下。 </p><p>通过<code>docker-machine ssh</code>命令进入虚拟机，然后在虚拟机中创建一个目录。我们将要把windows主机的共享文件夹挂载到该目录。例如，创建<code>/home/docker/MyBlog</code> :</p><pre class=" language-shell"><code class="language-shell">mkdir /home/omc/MyBlog</code></pre><p>我们现在查看该目录下是没有任何内容的：</p><pre class=" language-shell"><code class="language-shell">docker@default:~$ ll /home/docker/MyBlogtotal 0</code></pre><p>接下来，将windows主机的共享文件夹挂载到该目录，运行如下命令：</p><pre class=" language-shell"><code class="language-shell">sudo mount -t vboxsf MyBlog /home/docker/MyBlog</code></pre><p>然后查看<code>/home/docker/MyBlog</code>目录：</p><pre class=" language-shell"><code class="language-shell">docker@default:~$ ll /home/docker/MyBlog/total 8-rwxrwxrwx    1 root     root          1183 Jun 11 14:07 MyBlog.iml-rwxrwxrwx    1 root     root          2263 Jun 11 14:05 pom.xmldrwxrwxrwx    1 root     root             0 Jun 11 14:05 src/drwxrwxrwx    1 root     root             0 Jun 11 14:09 target/</code></pre><p>可以看到已经成功挂载了！ </p><p>但是，这种方式有一个弊端：<strong>每当重启虚拟机后，新创建的目录会丢失。</strong> </p><p>我们可以通过如下方式<strong>解决这个问题</strong>： </p><p>编辑<code>/mnt/sda1/var/lib/boot2docker/profile</code> 文件中：</p><pre class=" language-shell"><code class="language-shell">sudo vi /mnt/sda1/var/lib/boot2docker/profile</code></pre><p>在文件最后增加如下配置：</p><pre class=" language-shell"><code class="language-shell">mkdir /home/docker/MyBlogsudo mount -t vboxsf MyBlog /home/docker/MyBlog</code></pre><p>保存退出虚拟机，执行如下命令重启虚拟机：</p><pre class=" language-bash"><code class="language-bash">docker-machine restart</code></pre><p>重启后，再次执行<code>docker-machine ssh</code> 进入虚拟机，查看是否自动挂载到我们指定的目录<code>/home/docker/MyBlog</code> ：</p><pre class=" language-shell"><code class="language-shell">docker@default:~$ ll /home/docker/MyBlog/total 8-rwxrwxrwx    1 root     root          1183 Jun 11 14:07 MyBlog.iml-rwxrwxrwx    1 root     root          2263 Jun 11 14:05 pom.xmldrwxrwxrwx    1 root     root             0 Jun 11 14:05 src/drwxrwxrwx    1 root     root             0 Jun 11 14:09 target/</code></pre><p>可以看到，挂载成功！</p><h3 id="二、配置virtualbox虚拟机与docker容器之间文件夹共享"><a href="#二、配置virtualbox虚拟机与docker容器之间文件夹共享" class="headerlink" title="二、配置virtualbox虚拟机与docker容器之间文件夹共享"></a>二、配置virtualbox虚拟机与docker容器之间文件夹共享</h3><p>这个就很简单了，在执行<code>docker run</code>命令时，通过<code>-v</code>参数虚拟机某个目录挂载到docker容器中。 </p><p>如下，将前面在虚拟机中创建的<code>/home/docker/MyBlog</code>目录挂载到docker容器的<code>/usr/tmp/MyBlog</code>中：</p><pre class=" language-shell"><code class="language-shell">docker run -v /home/docker/MyBlog:/usr/tmp/MyBlog -i -t centos /bin/bash</code></pre><p>进入docker容器后，查看<code>/usr/tmp/MyBlog</code>目录：</p><pre class=" language-shell"><code class="language-shell">root@d478e4c6c7f2:/# ll /usr/tmp/MyBlog/total 20drwxrwxrwx 1 root root 4096 Jun 11 14:09 ./drwxr-xr-x 3 root root 4096 Jul 28 15:52 ../drwxrwxrwx 1 root root 4096 Jun 27 13:52 .idea/-rwxrwxrwx 1 root root 1183 Jun 11 14:07 MyBlog.iml*-rwxrwxrwx 1 root root 2263 Jun 11 14:05 pom.xml*drwxrwxrwx 1 root root    0 Jun 11 14:05 src/drwxrwxrwx 1 root root    0 Jun 11 14:09 target/</code></pre><p>可以看到，windows主机共享文件夹里的内容被成功同步到docker容器中了！</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《机器学习实战》读书笔记之二：k-近邻算法应用案例</title>
      <link href="/posts/ml/mlp-2-knn-application.html"/>
      <url>/posts/ml/mlp-2-knn-application.html</url>
      
        <content type="html"><![CDATA[<h3 id="应用案例一：使用k-近邻算法提高约会网站配对成功率"><a href="#应用案例一：使用k-近邻算法提高约会网站配对成功率" class="headerlink" title="应用案例一：使用k-近邻算法提高约会网站配对成功率"></a>应用案例一：使用k-近邻算法提高约会网站配对成功率</h3><h4 id="1-案例说明"><a href="#1-案例说明" class="headerlink" title="1. 案例说明"></a>1. 案例说明</h4><p>这个例子是海伦想通过在线约会网站寻找适合自己的约会对象，她认为有三种类型的约会对象：</p><ul><li>不喜欢的人</li><li>魅力一般的人 （也就是可能是她喜欢的人）</li><li>极具魅力的人 （也就是她喜欢的人）</li></ul><p>她想通过自己收集的数据对所有人进行归类，找到适合自己的约会对象。她收集的数据包含3个特征：</p><ul><li>每年获得的飞行常客里程数 （我觉得这个可能说明这个人经常出去旅行，海伦喜欢旅行）</li><li>玩视频游戏所耗时间百分比 （海伦喜欢自由时间多的人，这样就有时间陪她约会，哪怕是视频？脑补一下！）</li><li>每周消费的冰淇淋公升数 （这个… 说明海伦想找个吃货…只能说明她自己也是个吃货吧！）</li></ul><p>海伦收集的数据存储在一个文本文件中，每一行是是一个样本，每个样本前三个数据是3个特征值，最后一个数据是海伦对其进行的分类。</p><ul><li><code>largeDoses</code>: 极具魅力</li><li><code>smallDoses</code>：魅力一般</li><li><code>didntLike</code>：不喜欢</li></ul><p>示例数据如下：</p><pre><code>40920    8.326976    0.953952    largeDoses14488    7.153469    1.673904    smallDoses26052    1.441871    0.805124    didntLike75136    13.147394    0.428964    didntLike38344    1.669788    0.134296    didntLike72993    10.141740    1.032955    didntLike35948    6.830792    1.213192    largeDoses42666    13.276369    0.543880    largeDoses67497    8.631577    0.749278    didntLike...</code></pre><p>海伦总共收集了1000个样本，你可以从这里<a href="https://github.com/longyg/Machine-Learning-Practice/blob/master/kNN/Halen%20date/datingTestSet.txt" target="_blank" rel="noopener">下载数据文件</a></p><h4 id="2-解析数据"><a href="#2-解析数据" class="headerlink" title="2. 解析数据"></a>2. 解析数据</h4><p>有了数据文件后，我们需要解析该文件，将其解析为分类器函数可以接收的格式。还记得我们的分类器函数<code>classifier()</code>接收什么样的输入数据格式吧？包含两个参数：</p><ol><li>特征矩阵：<code>dataSet</code></li><li>分类标签列表(也可认为是向量)：<code>labels</code></li></ol><p>为了从数据文件中提取出这两个输入参数，我们实现以下函数<code>file2matrix()</code>,以文件名为参数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">file2matrix</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    fr <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    arrayOLines <span class="token operator">=</span> fr<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    numberOfLines <span class="token operator">=</span> len<span class="token punctuation">(</span>arrayOLines<span class="token punctuation">)</span>    returnMat <span class="token operator">=</span> zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>numberOfLines<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    classLabelVector <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> arrayOLines<span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        listFromLine <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        returnMat<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> listFromLine<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> listFromLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'didntLike'</span><span class="token punctuation">:</span>            classLabelVector<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> listFromLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'smallDoses'</span><span class="token punctuation">:</span>            classLabelVector<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> listFromLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'largeDoses'</span><span class="token punctuation">:</span>            classLabelVector<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> returnMat<span class="token punctuation">,</span> classLabelVector</code></pre><p>将数据文件放到该程序代码同一个目录下，名为：<code>datingTestSet.txt</code>，然后调用该函数看看解析结果：</p><pre class=" language-python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'datingTestSet.txt'</span>dataSet<span class="token punctuation">,</span> labels <span class="token operator">=</span> file2matrix<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span></code></pre><pre><code>[[4.0920000e+04 8.3269760e+00 9.5395200e-01] [1.4488000e+04 7.1534690e+00 1.6739040e+00] [2.6052000e+04 1.4418710e+00 8.0512400e-01] ... [2.6575000e+04 1.0650102e+01 8.6662700e-01] [4.8111000e+04 9.1345280e+00 7.2804500e-01] [4.3757000e+04 7.8826010e+00 1.3324460e+00]]</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span></code></pre><pre><code>[3, 2, 1, 1, 1, 1, 3, 3, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 3, 2, 1, 2, 3, 2, 3, 2, 3, 2, 1, 3, 1, 3, 1, 2, 1, 1, 2, 3, 3, 1, 2, 3, 3, 3, 1, 1, 1, 1, 2, 2, 1, 3, 2, 2, 2, 2, 3, 1, 2, 1, 2, 2, 2, 2, 2, 3, 2, 3, 1, 2, 3, 2, 2, 1, 3, 1, 1, 3, 3, 1, 2, 3, 1, 3, 1, 2, 2, 1, 1, 3, 3, 1, 2, 1, 3, 3, 2, 1, 1, 3, 1, 2, 3, 3, 2, 3, 3, 1, 2, 3, 2, 1, 3, 1, 2, 1, 1, 2, 3, 2, 3, 2, 3, 2, 1, 3, 3, 3, 1, 3, 2, 2, 3, 1, 3, 3, 3, 1, 3, 1, 1, 3, 3, 2, 3, 3, 1, 2, 3, 2, 2, 3, 3, 3, 1, 2, 2, 1, 1, 3, 2, 3, 3, 1, 2, 1, 3, 1, 2, 3, 2, 3, 1, 1, 1, 3, 2, 3, 1, 3, 2, 1, 3, 2, 2, 3, 2, 3, 2, 1, 1, 3, 1, 3, 2, 2, 2, 3, 2, 2, 1, 2, 2, 3, 1, 3, 3, 2, 1, 1, 1, 2, 1, 3, 3, 3, 3, 2, 1, 1, 1, 2, 3, 2, 1, 3, 1, 3, 2, 2, 3, 1, 3, 1, 1, 2, 1, 2, 2, 1, 3, 1, 3, 2, 3, 1, 2, 3, 1, 1, 1, 1, 2, 3, 2, 2, 3, 1, 2, 1, 1, 1, 3, 3, 2, 1, 1, 1, 2, 2, 3, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 3, 2, 3, 3, 3, 3, 1, 2, 3, 1, 1, 1, 3, 1, 3, 2, 2, 1, 3, 1, 3, 2, 2, 1, 2, 2, 3, 1, 3, 2, 1, 1, 3, 3, 2, 3, 3, 2, 3, 1, 3, 1, 3, 3, 1, 3, 2, 1, 3, 1, 3, 2, 1, 2, 2, 1, 3, 1, 1, 3, 3, 2, 2, 3, 1, 2, 3, 3, 2, 2, 1, 1, 1, 1, 3, 2, 1, 1, 3, 2, 1, 1, 3, 3, 3, 2, 3, 2, 1, 1, 1, 1, 1, 3, 2, 2, 1, 2, 1, 3, 2, 1, 3, 2, 1, 3, 1, 1, 3, 3, 3, 3, 2, 1, 1, 2, 1, 3, 3, 2, 1, 2, 3, 2, 1, 2, 2, 2, 1, 1, 3, 1, 1, 2, 3, 1, 1, 2, 3, 1, 3, 1, 1, 2, 2, 1, 2, 2, 2, 3, 1, 1, 1, 3, 1, 3, 1, 3, 3, 1, 1, 1, 3, 2, 3, 3, 2, 2, 1, 1, 1, 2, 1, 2, 2, 3, 3, 3, 1, 1, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 1, 2, 3, 2, 1, 1, 1, 1, 3, 3, 3, 3, 2, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 2, 3, 2, 1, 2, 2, 2, 3, 2, 1, 3, 2, 3, 2, 3, 2, 1, 1, 2, 3, 1, 3, 3, 3, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 3, 2, 1, 3, 3, 2, 2, 2, 3, 1, 2, 1, 1, 3, 2, 3, 2, 3, 2, 3, 3, 2, 2, 1, 3, 1, 2, 1, 3, 1, 1, 1, 3, 1, 1, 3, 3, 2, 2, 1, 3, 1, 1, 3, 2, 3, 1, 1, 3, 1, 3, 3, 1, 2, 3, 1, 3, 1, 1, 2, 1, 3, 1, 1, 1, 1, 2, 1, 3, 1, 2, 1, 3, 1, 3, 1, 1, 2, 2, 2, 3, 2, 2, 1, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 1, 3, 2, 3, 2, 1, 2, 1, 1, 1, 2, 3, 2, 2, 1, 2, 2, 1, 3, 1, 3, 3, 3, 2, 2, 3, 3, 1, 2, 2, 2, 3, 1, 2, 1, 3, 1, 2, 3, 1, 1, 1, 2, 2, 3, 1, 3, 1, 1, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 2, 2, 3, 1, 3, 1, 2, 3, 2, 2, 3, 1, 2, 3, 2, 3, 1, 2, 2, 3, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 3, 2, 1, 3, 3, 3, 1, 1, 3, 1, 2, 3, 3, 2, 2, 2, 1, 2, 3, 2, 2, 3, 2, 2, 2, 3, 3, 2, 1, 3, 2, 1, 3, 3, 1, 2, 3, 2, 1, 3, 3, 3, 1, 2, 2, 2, 3, 2, 3, 3, 1, 2, 1, 1, 2, 1, 3, 1, 2, 2, 1, 3, 2, 1, 3, 3, 2, 2, 2, 1, 2, 2, 1, 3, 1, 3, 1, 3, 3, 1, 1, 2, 3, 2, 2, 3, 1, 1, 1, 1, 3, 2, 2, 1, 3, 1, 2, 3, 1, 3, 1, 3, 1, 1, 3, 2, 3, 1, 1, 3, 3, 3, 3, 1, 3, 2, 2, 1, 1, 3, 3, 2, 2, 2, 1, 2, 1, 2, 1, 3, 2, 1, 2, 2, 3, 1, 2, 2, 2, 3, 2, 1, 2, 1, 2, 3, 3, 2, 3, 1, 1, 3, 3, 1, 2, 2, 2, 2, 2, 2, 1, 3, 3, 3, 3, 3, 1, 1, 3, 2, 1, 2, 1, 2, 2, 3, 2, 2, 2, 3, 1, 2, 1, 2, 2, 1, 1, 2, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 2, 3, 2, 3, 3, 2, 2, 1, 1, 1, 3, 3, 1, 1, 1, 3, 3, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 3, 1, 1, 2, 3, 2, 2, 1, 3, 1, 2, 3, 1, 2, 2, 2, 2, 3, 2, 3, 3, 1, 2, 1, 2, 3, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 3, 3, 3]</code></pre><p>现在我们已经成功解析了输入数据文件，接下来我们可以对这些数据进行一些初步分析。</p><h4 id="3-分析数据"><a href="#3-分析数据" class="headerlink" title="3. 分析数据"></a>3. 分析数据</h4><p>在机器学习中，要对大规模的数据集进行分析，我们一般采用图形化的方式来展示数据，这样会比较直观，通过图形可以方便的找出一些数据模式（即规律）。 下面我们将前面的数据集图形化，实现以下函数<code>showDataSet()</code>，将<code>file2matrix()</code>函数返回的两个结果作为参数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">def</span> <span class="token function">showDataSet</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    fig<span class="token punctuation">,</span> axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> sharex<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> sharey<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>dataSet<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dataSet<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">15.0</span><span class="token operator">*</span>array<span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">15.0</span><span class="token operator">*</span>array<span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'每年获得的飞行常客里程数与玩视频游戏所消耗时间百分比'</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'每年获得的飞行常客里程数'</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'玩视频游戏所消耗时间百分比'</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>dataSet<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dataSet<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">15.0</span><span class="token operator">*</span>array<span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">15.0</span><span class="token operator">*</span>array<span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'每年获得的飞行常客里程数与每周消费的冰激淋公升数'</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'每年获得的飞行常客里程数'</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'每周消费的冰激淋公升数'</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>dataSet<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dataSet<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">15.0</span><span class="token operator">*</span>array<span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">15.0</span><span class="token operator">*</span>array<span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'玩视频游戏所消耗时间百分比与每周消费的冰激淋公升数'</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'玩视频游戏所消耗时间百分比'</span><span class="token punctuation">)</span>    axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'每周消费的冰激淋公升数'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FangSong'</span><span class="token punctuation">]</span>    plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">showDataSet<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span></code></pre><p><a href="http://wx3.sinaimg.cn/mw690/bd7db87egy1fthw8ru8tkj20oz0gstfg.jpg" target="_blank" rel="noopener"><img src="http://wx3.sinaimg.cn/mw690/bd7db87egy1fthw8ru8tkj20oz0gstfg.jpg" alt></a> </p><p>我们可以从上面的图中看出一些规律。上面三个图分别取了三个特征中的两个进行绘制，这样更容易从二维图形中区分数据的类别。大概可以猜测一下，海伦喜欢的人，每年至少有一定的飞行记录，不能太少也不能太多，太少说明很少出去旅行，太多说明有可能是因公常年外出。不过这纯属我个人猜测，大家可以自行脑补！</p><h4 id="4-预处理数据"><a href="#4-预处理数据" class="headerlink" title="4. 预处理数据"></a>4. 预处理数据</h4><p>前面我们的电影分类例子中，特征是二维的，计算距离使用的是二维平面中两点之间的距离公式。但是这里海伦收集的数据是三维的，那么我们如何计算样本之间的距离呢？ </p><p>实际上，我们可以扩展前面的二维平面两点距离公式到任意维度，采用欧几里得距离公式。</p><p>假设一个<code>n</code>维空间的两个点表示为：</p><ul><li>点1: $(x_1, x_2, x_3, …, x_n)$</li><li>点2: $(y_1, y_2, y_3, …, y_n)$</li></ul><p>那么点1与点2的距离为： </p><p>$$\sqrt{(x_1 - y_1)^{2} + (x_2 - y_2)^{2} + (x_3 - y_3)^{2} + … + (x_n - y_n)^{2}}$$ </p><p>因此我们将上面公式应用于海伦收集的数据，例如我们可以计算数据文件中前两个样本之间的距离，样本数据为：</p><pre><code>40920    8.326976    0.953952    largeDoses14488    7.153469    1.673904    smallDoses</code></pre><p>应用上面的公式为： </p><p>$$\sqrt{(40920 - 14488)^{2} + (8.326976 - 7.153469)^{2} + (0.953952 - 1.673904)^{2}}$$</p><p>从上面公式可以发现，方程中数字差值最大的属性对计算结果影响最大。因为每年飞行里程数的数值一般情况下都是几百上千，甚至上万，而另外两个特征的数值一般情况下都很小。也就是说，每年飞行里程数对于计算结果的影响远远大于另外两个特征。 </p><p>如果我们直接使用这样的样本数据计算，会导致结果几乎由三个特征中的一个（也就是每年飞行里程数）决定了，而另外两个特征几乎不会影响计算结果。 </p><p>这明显是不可接受的，因为海伦认为这三个特征是同等重要的，因此这个特征应该具有相同权重。 </p><p>对于这种情况，我们需要对样本数据进行预处理，通常采用的方法是将数值进行归一化，比如将每个特征的取值范围处理为<code>0</code>到<code>1</code>或者<code>-1</code>到<code>1</code>之间。 </p><p>下面的公式可以将任意取值范围的数值转化为0到1区间内的值：</p><pre class=" language-python"><code class="language-python">newValue <span class="token operator">=</span> <span class="token punctuation">(</span>oldValue <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span></code></pre><p>其中<code>min</code>和<code>max</code>分别是数据集中的最小特征值和最大特征值，<code>oldValue</code>是数据集中原始特征值，<code>newValue</code>是进行归一化处理后的结果值，我们将使用这个预处理之后的数值进行分类计算。 </p><p>现在我们定义一个<code>autoNorm()</code>函数来实现上面的归一化公式:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">autoNorm</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    minVals <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    maxVals <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    ranges <span class="token operator">=</span> maxVals <span class="token operator">-</span> minVals    m <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    normDataSet <span class="token operator">=</span> dataSet <span class="token operator">-</span> tile<span class="token punctuation">(</span>minVals<span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    normDataSet <span class="token operator">=</span> normDataSet <span class="token operator">/</span> tile<span class="token punctuation">(</span>ranges<span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> normDataSet<span class="token punctuation">,</span> ranges<span class="token punctuation">,</span> minValsormDataSet<span class="token punctuation">,</span> ranges<span class="token punctuation">,</span> minVals <span class="token operator">=</span> autoNorm<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ormDataSet<span class="token punctuation">)</span></code></pre><pre><code>[[0.44832535 0.39805139 0.56233353] [0.15873259 0.34195467 0.98724416] [0.28542943 0.06892523 0.47449629] ... [0.29115949 0.50910294 0.51079493] [0.52711097 0.43665451 0.4290048 ] [0.47940793 0.3768091  0.78571804]]</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>ranges<span class="token punctuation">)</span></code></pre><pre><code>[9.1273000e+04 2.0919349e+01 1.6943610e+00]</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>minVals<span class="token punctuation">)</span></code></pre><pre><code>[0.       0.       0.001156]</code></pre><p><code>autoNorm()</code>函数中,首先使用numpy矩阵的<code>min()</code>和<code>max()</code>函数得到每个特征的最小和最大值，分别放在变量<code>minVals</code>和<code>maxVals</code>中。 </p><p><code>dataSet.min(0)</code>是从返回<code>dataSet</code>矩阵每一列的最小值，<code>dataSet.max(0)</code>返回矩阵每一列的最大值。 </p><p>因为每一列的最小值和最大值只有1个，而我们有三个特征值也就是三列，所以<code>minVals</code>和<code>maxVals</code>变量存放的是<code>1x3</code>的矩阵：</p><pre class=" language-python"><code class="language-python">minVals <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>minVals<span class="token punctuation">)</span></code></pre><pre><code>[0.       0.       0.001156]</code></pre><pre class=" language-python"><code class="language-python">maxVals <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>maxVals<span class="token punctuation">)</span></code></pre><pre><code>[9.1273000e+04 2.0919349e+01 1.6955170e+00]</code></pre><p>同理，<code>ranges</code>也是<code>1x3</code>的，因为两个矩阵之差得到的是相同维度的矩阵：</p><pre class=" language-python"><code class="language-python">ranges <span class="token operator">=</span> maxVals <span class="token operator">-</span> minVals<span class="token keyword">print</span><span class="token punctuation">(</span>ranges<span class="token punctuation">)</span></code></pre><pre><code>[9.1273000e+04 2.0919349e+01 1.6943610e+00]</code></pre><p>根据上面的归一化公式，我们需要用原始特征值减去最小值，然后除以每个特征的取值范围（即最大值减最小值）。由于我们的特征矩阵<code>dataSet</code>是一个<code>1000x3</code>的矩阵，因此我们需要将<code>minVals</code>和<code>ranges</code>重复变成同样大小的矩阵，这里我们依然使用了numpy的<code>tile()</code>函数来重复矩阵。我们需要首先得到<code>dataSet</code>的大小，通过矩阵的<code>shape</code>属性获取矩阵大小：</p><pre class=" language-python"><code class="language-python">m <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape\<span class="token punctuation">[</span><span class="token number">0</span>\<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><pre><code>1000</code></pre><p>然后重复最小特征矩阵<code>minVals</code> <code>m</code>次，注意是在行方向上重复<code>m</code>次，从而构造<code>1000x3</code>的矩阵：</p><pre class=" language-python"><code class="language-python">tmpMat <span class="token operator">=</span> tile<span class="token punctuation">(</span>minVals<span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tmpMat<span class="token punctuation">)</span></code></pre><pre><code>[[0.       0.       0.001156] [0.       0.       0.001156] [0.       0.       0.001156] ... [0.       0.       0.001156] [0.       0.       0.001156] [0.       0.       0.001156]]</code></pre><p>接下来用原始特征值减去最小值：</p><pre class=" language-python"><code class="language-python">normDataSet <span class="token operator">=</span> dataSet <span class="token operator">-</span> tile<span class="token punctuation">(</span>minVals<span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>normDataSet<span class="token punctuation">)</span></code></pre><pre><code>[[4.0920000e+04 8.3269760e+00 9.5279600e-01] [1.4488000e+04 7.1534690e+00 1.6727480e+00] [2.6052000e+04 1.4418710e+00 8.0396800e-01] ... [2.6575000e+04 1.0650102e+01 8.6547100e-01] [4.8111000e+04 9.1345280e+00 7.2688900e-01] [4.3757000e+04 7.8826010e+00 1.3312900e+00]]</code></pre><p>然后重复<code>ranges</code>矩阵<code>m</code>次，并用上一步求出的原始特征值与最小值的差值除以取值范围：</p><pre class=" language-python"><code class="language-python">normDataSet <span class="token operator">=</span> normDataSet <span class="token operator">/</span> tile<span class="token punctuation">(</span>ranges<span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>normDataSet<span class="token punctuation">)</span></code></pre><pre><code>[[0.44832535 0.39805139 0.56233353] [0.15873259 0.34195467 0.98724416] [0.28542943 0.06892523 0.47449629] ... [0.29115949 0.50910294 0.51079493] [0.52711097 0.43665451 0.4290048 ] [0.47940793 0.3768091  0.78571804]]</code></pre><p>我们已经完成了数据的预处理。对数据进行处理是机器学习中训练算法很关键的一步，因为数据的正确性直接影响算法的正确性。</p><h4 id="5-测试分类器"><a href="#5-测试分类器" class="headerlink" title="5. 测试分类器"></a>5. 测试分类器</h4><p>现在，我们已经对原始数据进行了预处理，接下来，我们可以用这些数据来测试我们前面实现的<code>kNN</code>算法分类器了。 </p><p>这里再一次将我们的分类器算法列出来，也就是我们前面详细讲解过的<code>classifier()</code>函数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> operator<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">classifier</span><span class="token punctuation">(</span>inX<span class="token punctuation">,</span> dataSet<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    dataSetSize <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    diffMat <span class="token operator">=</span> tile<span class="token punctuation">(</span>inX<span class="token punctuation">,</span> <span class="token punctuation">(</span>dataSetSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> dataSet    sqDiffMat <span class="token operator">=</span> diffMat<span class="token operator">**</span><span class="token number">2</span>    sqDistances <span class="token operator">=</span> sqDiffMat<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    distances <span class="token operator">=</span> sqDistances<span class="token operator">**</span><span class="token number">0.5</span>    sortedDistIndicies <span class="token operator">=</span> distances<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span>    classCount <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        voteIlabel <span class="token operator">=</span> labels<span class="token punctuation">[</span>sortedDistIndicies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        classCount<span class="token punctuation">[</span>voteIlabel<span class="token punctuation">]</span> <span class="token operator">=</span> classCount<span class="token punctuation">.</span>get<span class="token punctuation">(</span>voteIlabel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    sortedClassCount <span class="token operator">=</span> sorted<span class="token punctuation">(</span>classCount<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sortedClassCount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><p>我们需要从数据集中选出一部分作为分类器训练数据，一部分作为测试数据，用于测试分类器的正确率。一般情况下，我们使用错误率来检测分类器的效果。错误率就是分类器给出错误结果的次数除以测试样本总数，完美分类器的错误率为<code>0</code>，而错误率为<code>1</code>的分类器根本不能给出任何正确的结果。因此我们希望我们的分类器的错误率越小越好。 </p><p>现在我们定义一个<code>datingClassTest()</code>函数来计算分类器应用于海伦收集的约会数据集的错误率：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">datingClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    testRatio <span class="token operator">=</span> <span class="token number">0.1</span>    datingDataMat<span class="token punctuation">,</span> datingLabels <span class="token operator">=</span> file2matrix<span class="token punctuation">(</span><span class="token string">'datingTestSet.txt'</span><span class="token punctuation">)</span>    normMat<span class="token punctuation">,</span> ranges<span class="token punctuation">,</span> minVals <span class="token operator">=</span> autoNorm<span class="token punctuation">(</span>datingDataMat<span class="token punctuation">)</span>    m <span class="token operator">=</span> normMat<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    numTestVecs <span class="token operator">=</span> int<span class="token punctuation">(</span>m <span class="token operator">*</span> testRatio<span class="token punctuation">)</span>    trainDataMat <span class="token operator">=</span> normMat<span class="token punctuation">[</span>numTestVecs<span class="token punctuation">:</span>m<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    trainLabels <span class="token operator">=</span> datingLabels<span class="token punctuation">[</span>numTestVecs<span class="token punctuation">:</span>m<span class="token punctuation">]</span>    k <span class="token operator">=</span> <span class="token number">3</span>    errorCount <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>numTestVecs<span class="token punctuation">)</span><span class="token punctuation">:</span>        testIdata <span class="token operator">=</span> normMat<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        classResult <span class="token operator">=</span> classifier<span class="token punctuation">(</span>testIdata<span class="token punctuation">,</span> trainDataMat<span class="token punctuation">,</span> trainLabels<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"分类器预测结果是: "</span><span class="token punctuation">,</span> classResult<span class="token punctuation">,</span> <span class="token string">" 实际结果是: "</span><span class="token punctuation">,</span> datingLabels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classResult <span class="token operator">!=</span> datingLabels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            errorCount <span class="token operator">+=</span> <span class="token number">1.0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"总的错误率是: "</span><span class="token punctuation">,</span> errorCount <span class="token operator">/</span> float<span class="token punctuation">(</span>numTestVecs<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">datingClassTest<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>分类器预测结果是:  3  实际结果是:  3分类器预测结果是:  2  实际结果是:  2分类器预测结果是:  1  实际结果是:  1分类器预测结果是:  1  实际结果是:  1分类器预测结果是:  1  实际结果是:  1...分类器预测结果是:  2  实际结果是:  2分类器预测结果是:  1  实际结果是:  1分类器预测结果是:  3  实际结果是:  1总的错误率是:  0.05</code></pre><p>可以看到，分类器对于海伦收集的数据的分类错误率是<code>5%</code>，这个结果还不错。我们可以改变测试数据比例变量<code>testRatio</code>的值，可以发现错误率会随着变量值的变化而变化。 </p><p>由于分类器的错误率还不错，那么我们现在可以输入任意未知约会对象的属性，由分类软件来帮助海伦判断对象是否是海伦喜欢的类型。 </p><p>那么我们来设计一个分类软件，允许用户输入某个人的信息，程序返回预测结果：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">classifyPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resultList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'你应该不喜欢他'</span><span class="token punctuation">,</span> <span class="token string">'你可能会有一点喜欢他'</span><span class="token punctuation">,</span> <span class="token string">'他应该是你喜欢的人'</span><span class="token punctuation">]</span>    percentTats <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"玩视频游戏所消耗时间百分比？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ffMiles <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"每年获得的飞行常客里程数？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    iceCream <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"每周消费的冰淇淋公升数？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    datingDataMat<span class="token punctuation">,</span> datingLabels <span class="token operator">=</span> file2matrix<span class="token punctuation">(</span><span class="token string">'datingTestSet.txt'</span><span class="token punctuation">)</span>    normMat<span class="token punctuation">,</span> ranges<span class="token punctuation">,</span> minVals <span class="token operator">=</span> autoNorm<span class="token punctuation">(</span>datingDataMat<span class="token punctuation">)</span>    inArr <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span>ffMiles<span class="token punctuation">,</span> percentTats<span class="token punctuation">,</span> iceCream<span class="token punctuation">]</span><span class="token punctuation">)</span>    preProcessInArr <span class="token operator">=</span> <span class="token punctuation">(</span>inArr <span class="token operator">-</span> minVals<span class="token punctuation">)</span> <span class="token operator">/</span> ranges    classifierResult <span class="token operator">=</span> classifier<span class="token punctuation">(</span>preProcessInArr<span class="token punctuation">,</span> normMat<span class="token punctuation">,</span> datingLabels<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">> 预测结果："</span><span class="token punctuation">,</span> resultList<span class="token punctuation">[</span>classifierResult <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">classifyPerson<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>玩视频游戏所消耗时间百分比？30每年获得的飞行常客里程数？1500每周消费的冰淇淋公升数？2&gt;&gt; 预测结果： 他应该是你喜欢的人</code></pre><p>我们已经基于机器学习的<code>kNN</code>算法构建了一个完整的应用程序，它完全可以被应用于实际中，只是对于现实情况，可能不仅仅三个特征，可能会有很多特征属性来区分一个约会对象的类型。但是不管有多少特征，我们都可以采用同样的分类器来进行预测。 </p><p>从<a href="https://github.com/longyg/Machine-Learning-Practice/blob/master/kNN/Halen%20date/dating.py" target="_blank" rel="noopener">这里下载</a>完整代码实现dating.py。</p><h3 id="应用案例二：手写识别系统"><a href="#应用案例二：手写识别系统" class="headerlink" title="应用案例二：手写识别系统"></a>应用案例二：手写识别系统</h3><h4 id="1-案例说明-1"><a href="#1-案例说明-1" class="headerlink" title="1. 案例说明"></a>1. 案例说明</h4><p>本案例将实现一个手写识别系统，为了简单起见，本案例只实现了识别数字<code>0</code>到<code>9</code>。在应用我们的分类器之前，为了方便将图像数据处理成分类器识别的数据集，我们将图像处理成<code>32x32</code>的文本文件。什么意思？就是说我们的每个文本文件包含<code>32</code>行，<code>32</code>列，每个索引位置由<code>0</code>或<code>1</code>填充，代表一个手写数字的图像。 </p><p>你可以在<a href="https://github.com/longyg/Machine-Learning-Practice/tree/master/kNN/%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB" target="_blank" rel="noopener">这里下载</a>我们已经处理好的所有文件，然后打开任意一个文件进行观察。例如下面是一个手写数字3的图像处理成的文本文件内容（文件<code>3_97.txt</code>）：</p><pre><codecode></pre><p>如果你仔细看这个文本内容，把所有<code>1</code>连接起来观察，可以看出来它就是数字<code>3</code>。同样你可以打开其他任意文件进行观察。</p><h4 id="2-处理数据"><a href="#2-处理数据" class="headerlink" title="2. 处理数据"></a>2. 处理数据</h4><p>在前面提供的<a href="https://github.com/longyg/Machine-Learning-Practice/tree/master/kNN/%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB" target="_blank" rel="noopener">下载链接</a>中，包含两类文件分别放在两个不同目录下： </p><ol><li><p>目录<code>trainingDigits</code>下包含的是用于训练的样本文件，大约2000个例子，包含了所有从0到9的数字样本，其中每个数字大约200个样本。 </p></li><li><p>目录<code>testDigits</code>下包含的是用于测试的样本文件，大约有900个。 </p></li></ol><p>由于每个文本文件存储的是<code>32x32</code>的矩阵数据，我们需要将其格式化处理为一个向量，这样才能使用我们的分类器。由于<code>32x32 = 1024</code>，因此我们将其转换为<code>1x1024</code>的向量。 </p><p>所以我们首先定义一个函数<code>img2vector()</code>，将文本文件<code>32x32</code>的数据内容转换为<code>1x1024</code>的向量。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">img2vector</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    vector <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            vector<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">*</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> int<span class="token punctuation">(</span>line<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> vector</code></pre><p>该函数首先使用numpy的<code>zeros()</code>函数创建一个<code>1x1024</code>的数组（即向量），全部由<code>0</code>填充。然后打开输入文件，循环读取文件包含数据的前<code>32</code>行，并将每行包含数据的前<code>32</code>个字符（即前32列）分别填充到由<code>zeros()</code>函数创建的<code>1x1024</code>数组中，这样就将文本文件32行32列的所有数据存储到了<code>1x1024</code>的数组中，最后返回该<code>1x1024</code>数组。</p><h4 id="3-测试分类器"><a href="#3-测试分类器" class="headerlink" title="3. 测试分类器"></a>3. 测试分类器</h4><p>接下来我们开始测试我们之前实现的<code>kNN</code>算法分类器，因此我们定义一个测试函数<code>handwritingClassTest()</code>：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">handwritingClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    trainingFileList <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>trainingDir<span class="token punctuation">)</span>    m <span class="token operator">=</span> len<span class="token punctuation">(</span>trainingFileList<span class="token punctuation">)</span>    trainingMat <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        fileName <span class="token operator">=</span> trainingFileList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        fileStr <span class="token operator">=</span> fileName<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        classNumber <span class="token operator">=</span> int<span class="token punctuation">(</span>fileStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>classNumber<span class="token punctuation">)</span>        trainingMat<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> img2vector<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>trainingDir<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span>    testFileList <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>testDir<span class="token punctuation">)</span>    errorCount <span class="token operator">=</span> <span class="token number">0.0</span>    mTest <span class="token operator">=</span> len<span class="token punctuation">(</span>testFileList<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>mTest<span class="token punctuation">)</span><span class="token punctuation">:</span>        fileName <span class="token operator">=</span> testFileList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        fileStr <span class="token operator">=</span> fileName<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        classNumber <span class="token operator">=</span> int<span class="token punctuation">(</span>fileStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        vectorUnderTest <span class="token operator">=</span> img2vector<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>testDir<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> classifier<span class="token punctuation">(</span>vectorUnderTest<span class="token punctuation">,</span> trainingMat<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"分类器预测结果: %d, 实际答案是: %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> classNumber<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> result <span class="token operator">!=</span> classNumber<span class="token punctuation">:</span>             errorCount <span class="token operator">+=</span> <span class="token number">1.0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n预测错误数: %d"</span> <span class="token operator">%</span> errorCount<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n错误率为: %f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>errorCount<span class="token operator">/</span>float<span class="token punctuation">(</span>mTest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>程序使用<code>os</code>模块的<code>listdir()</code>函数分别读取<code>trainingDigits</code>下的训练样本文件，以及<code>testDigits</code>下的测试样本文件，分别存储在不同的列表中。 </p><p>根据训练样本列表的大小<code>m</code>构造一个<code>mx1024</code>的矩阵，也就是训练数据集，用于存储所有训练样本数据，其中每一行为一个图像的数据。程序会调用前面实现的<code>img2vector()</code>函数循环将每个训练文本文件转换为<code>1x1024</code>的向量，然后填充到<code>mx1024</code>的矩阵中的对应行。 </p><p>注意，比较特殊的是，每个文本文件的文件名是固定格式，包含了图像的标签信息。例如前面例子打开的<code>3_97.txt</code>，从文件名可以看出，这个文件的label是<code>3</code>，它是数字<code>3</code>的第<code>97</code>个样本。因此程序中通过解析文件名获得所有数据的<code>label</code>。 </p><p>类似地，程序使用同样的方法循环解析出<code>testDigits</code>目录下的所有测试样本文件，分别调用分类器函数<code>classifier()</code>得到每个测试样本的预测结果，将预测结果和实际答案打印输出。 </p><p>程序还统计了预测错误的总数，最后通过错误总数除以测试数据总数得到预测错误率。 </p><p>整个案例的Python3代码实现在<code>recongnition.py</code>中，可以从<a href="https://github.com/longyg/Machine-Learning-Practice/blob/master/kNN/%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB/recongnition.py" target="_blank" rel="noopener">这里下载</a>。 </p><p>运行程序可以得到类似如下输出：</p><pre class=" language-python"><code class="language-python">分类器预测结果<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 实际答案是<span class="token punctuation">:</span> <span class="token number">0</span>分类器预测结果<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 实际答案是<span class="token punctuation">:</span> <span class="token number">0</span>分类器预测结果<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 实际答案是<span class="token punctuation">:</span> <span class="token number">0</span>分类器预测结果<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 实际答案是<span class="token punctuation">:</span> <span class="token number">0</span>分类器预测结果<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 实际答案是<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>分类器预测结果<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> 实际答案是<span class="token punctuation">:</span> <span class="token number">9</span>分类器预测结果<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> 实际答案是<span class="token punctuation">:</span> <span class="token number">9</span>分类器预测结果<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> 实际答案是<span class="token punctuation">:</span> <span class="token number">9</span>分类器预测结果<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> 实际答案是<span class="token punctuation">:</span> <span class="token number">9</span>预测错误数<span class="token punctuation">:</span> <span class="token number">10</span>错误率为<span class="token punctuation">:</span> <span class="token number">0.010571</span></code></pre><p>可以看到大约900个测试样本，只有10个预测错误，错误率为<code>1%</code>，这是一个不错的结果。</p><h3 id="k-近邻算法总结"><a href="#k-近邻算法总结" class="headerlink" title="k-近邻算法总结"></a>k-近邻算法总结</h3><p>从前面的案例可以看出：</p><ol><li><code>k-近邻</code>算法执行效率较低。因为算法对于每个测试数据，都要计算其与所有训练样本数据的距离。比如训练数据有2000个，测试数据有900个，就要执行<code>2000x900</code>次距离公式的运算。而如果每个样本有<code>1024</code>个维度（即特征），那么每次距离公式的运算都要进行1024维的运算，这将是不小的运算量。</li><li><code>k-近邻</code>算法的开销较大。因为程序需要保存所有训练样本数据，如果训练数据集很大的话，将需要大量的存储空间。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《机器学习实战》读书笔记之一：k-近邻算法原理与代码实现详解</title>
      <link href="/posts/ml/mlp-1-knn.html"/>
      <url>/posts/ml/mlp-1-knn.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>本系列文章是学习《机器学习实战》一书的读书笔记，并非按原文照抄，而是在理解原书的基础上融入了本人个人理解。同时，原书代码是基于Python2实现的，而本系列文章所有代码是用Python3实现的，因此代码与原书也会稍有不同。如果你使用本系列文章的代码，请一定在Python3下运行，否则你会遇到意想不到的问题。 </p><p>此文是《机器学习实战》的读书笔记的第一篇，介绍该书中讲解的第一个机器学习算法：<code>k-近邻算法</code>，也称<code>kNN</code>（k-NearestNeighbor的缩写）算法。</p><h3 id="二、算法原理"><a href="#二、算法原理" class="headerlink" title="二、算法原理"></a>二、算法原理</h3><p>将输入数据的每个特征数据与训练样本集对应的特征数据进行比较，从而提取出样本集中特征最相似（即最邻近）的k个数据，将这k个数据中比例最高的分类标签作为输入数据的分类标签。 由于每个训练样本数据都是有标签的，所以<code>kNN</code>算法是监督学习的一种算法。</p><h4 id="1-举例说明"><a href="#1-举例说明" class="headerlink" title="1. 举例说明"></a>1. 举例说明</h4><p>假设有一组电影分类的样本数据集，根据电影中打斗镜头数和接吻镜头数的不同，被区分为动作片和爱情片。 </p><p>有如下7部电影样本数据，其中6部已知类型，1部未知类型。我们希望从这6部电影中找到某种规律，从而预测未知类型的“电影7”属于什么类型。</p><table><thead><tr><th>电影名称</th><th>打斗镜头数</th><th>接吻镜头数</th><th>电影类型</th></tr></thead><tbody><tr><td>电影1</td><td>3</td><td>104</td><td>爱情片</td></tr><tr><td>电影2</td><td>2</td><td>100</td><td>爱情片</td></tr><tr><td>电影3</td><td>1</td><td>81</td><td>爱情片</td></tr><tr><td>电影4</td><td>101</td><td>10</td><td>动作片</td></tr><tr><td>电影5</td><td>99</td><td>5</td><td>动作片</td></tr><tr><td>电影6</td><td>98</td><td>2</td><td>动作片</td></tr><tr><td>电影7</td><td>18</td><td>90</td><td>？</td></tr></tbody></table><p>将上面样本数据在图中表示出来： </p><p>完整代码在<a href="https://github.com/longyg/Machine-Learning-Practice/blob/master/kNN/showDataSet.py" target="_blank" rel="noopener">这里</a>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">)</span>colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token operator">=</span>colors<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'打斗镜头数'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"接吻镜头数"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FangSong'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a href="http://wx2.sinaimg.cn/mw690/bd7db87egy1fsvwj6chebj20hs0d50st.jpg" target="_blank" rel="noopener"><img src="http://wx2.sinaimg.cn/mw690/bd7db87egy1fsvwj6chebj20hs0d50st.jpg" alt></a> </p><p>图中6个黑色的点表示上面样本数据集中的6部已知类型的电影，其中3部爱情片，3部动作片。红色的点表示我们将要预测的未知类型的“电影7”。 </p><p>根据<code>kNN</code>算法原理，我们需要首先计算出图中红色点与所有黑色点的距离。大家都还记得计算两个点之间的距离公式吧。 如果点1记为（$x_1$，$y_1$），点2记为（$x_2$，$y_2$），那么点1与点2的距离为： </p><p>$$\sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^{2}}$$ </p><p>通过距离公式计算得到所有6个黑色点到红色点的距离如下表：</p><table><thead><tr><th>电影名称</th><th>与电影7的距离计算公式</th><th>与电影7的距离</th></tr></thead><tbody><tr><td>电影1</td><td>$\sqrt{(3-18)^{2} + (104-90)^{2}}$</td><td>20.5</td></tr><tr><td>电影2</td><td>$\sqrt{(2-18)^{2} + (100-90)^{2}}$</td><td>18.7</td></tr><tr><td>电影3</td><td>$\sqrt{(1-18)^{2} + (81-90)^{2}}$</td><td>19.2</td></tr><tr><td>电影4</td><td>$\sqrt{(101-18)^{2} + (10-90)^{2}}$</td><td>115.3</td></tr><tr><td>电影5</td><td>$\sqrt{(99-18)^{2} + (5-90)^{2}}$</td><td>117.4</td></tr><tr><td>电影6</td><td>$\sqrt{(98-18)^{2} + (2-90)^{2}}$</td><td>118.9</td></tr></tbody></table><p>按照距离递增排序，可以找到k个距离最近的电影。 假设<code>k=3</code>，那么距离最近的3部电影是<code>电影2</code>，<code>电影3</code>和<code>电影1</code>。从输入数据集中知道，这三部电影都是爱情片，因此我们判定<code>电影7</code>是爱情片。 注意，<code>kNN</code>算法是按照距离最近的<code>k</code>个数据的类型来决定未知数据类型的。如果<code>k</code>个距离最近的数据不是唯一类型，将把<code>k</code>个数据中比例最高的类型作为未知数据的类型。 例如，如果我们把k设为4，得到距离最近的4部电影分别是<code>电影2</code>，<code>电影3</code>，<code>电影1</code>和<code>电影4</code>。这4部电影中，其中有三部爱情片，比例是75%，只有一部是动作片，比例是25%。因此我们判定未知电影还是爱情片。</p><h3 id="三、算法实现"><a href="#三、算法实现" class="headerlink" title="三、算法实现"></a>三、算法实现</h3><p>根据前面的算法原理以及例子，我们将k-近邻算法用Python实现。实现代码中主要进行以下操作：</p><ol><li>计算已知类别数据集中每个点与未知点的距离</li><li>按照距离递增排序</li><li>选取与未知点距离最小的k个点</li><li>确定前k个点中所有类别的比例，</li><li>返回前k个点比例最高的类别，作为未知点的预测分类。</li></ol><h4 id="1-Python3代码实现"><a href="#1-Python3代码实现" class="headerlink" title="1. Python3代码实现"></a>1. Python3代码实现</h4><p>创建<code>knn.py</code>文件并输入如下代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> operator<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">classifier</span><span class="token punctuation">(</span>inX<span class="token punctuation">,</span> dataSet<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    dataSetSize <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    diffMat <span class="token operator">=</span> tile<span class="token punctuation">(</span>inX<span class="token punctuation">,</span> <span class="token punctuation">(</span>dataSetSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> dataSet    sqDiffMat <span class="token operator">=</span> diffMat <span class="token operator">**</span> <span class="token number">2</span>    sqDistances <span class="token operator">=</span> sqDiffMat<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    distances <span class="token operator">=</span> sqDistances <span class="token operator">**</span> <span class="token number">0.5</span>    sortedDistIndicies <span class="token operator">=</span> distances<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span>    classCount <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        voteIlabel <span class="token operator">=</span> labels<span class="token punctuation">[</span>sortedDistIndicies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        classCount<span class="token punctuation">[</span>voteIlabel<span class="token punctuation">]</span> <span class="token operator">=</span> classCount<span class="token punctuation">.</span>get<span class="token punctuation">(</span>voteIlabel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    sortedClassCount <span class="token operator">=</span> sorted<span class="token punctuation">(</span>classCount<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key <span class="token operator">=</span> operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sortedClassCount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">createDataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dataSet <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dataSet<span class="token punctuation">,</span> labels<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    dataSet<span class="token punctuation">,</span> labels <span class="token operator">=</span> createDataSet<span class="token punctuation">(</span><span class="token punctuation">)</span>    input <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    k <span class="token operator">=</span> <span class="token number">4</span>    output <span class="token operator">=</span> classifier<span class="token punctuation">(</span>input<span class="token punctuation">,</span> dataSet<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> k<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span></code></pre><h4 id="2-运行代码"><a href="#2-运行代码" class="headerlink" title="2. 运行代码"></a>2. 运行代码</h4><p>在命令行当前目录下执行上面python脚本，并将未知电影的打斗镜头数和接吻镜头数作为参数传递给脚本，结果将输出如下：</p><pre class=" language-bash"><code class="language-bash">C:\tmp<span class="token operator">></span> knn.py 18 90爱情片</code></pre><p>可见，上面的代码输出未知电影为“爱情片”，结果与我们之前推导的结果完全一致。 现在我们可以用这个程序来预测任意的输入数据了，例如：</p><pre class=" language-bash"><code class="language-bash">C:\tmp<span class="token operator">></span> knn.py 10 100爱情片C:\tmp<span class="token operator">></span> knn.py 90 10动作片</code></pre><p>从<a href="https://github.com/longyg/Machine-Learning-Practice/blob/master/kNN/knn.py" target="_blank" rel="noopener">这里下载</a><code>knn.py</code>的完整代码。</p><h4 id="3-代码解析"><a href="#3-代码解析" class="headerlink" title="3. 代码解析"></a>3. 代码解析</h4><p>程序首先导入依赖模块，本算法将用到最重要的<code>numpy</code>，以及<code>operator</code>和<code>sys</code>模块，因此将他们导入。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> operator<span class="token keyword">import</span> sys</code></pre><p>上面的核心代码在分类器函数<code>classifier()</code>中，有4个输入参数，分别为：</p><ul><li><code>inX</code>: 输入数据，将要预测的数据，用数组表示，如[18, 90]</li><li><code>dataSet</code>: 训练数据集，即已知类型的数据，用numpy的矩阵表示</li><li><code>labels</code>: 训练数据集的分类，用数组表示，数组中每一个值表示<code>dataSet</code>中对应的数据的分类。</li><li><code>k</code>：k-近邻算法的k值</li></ul><p><code>classifier()</code>函数第一行获取<code>dataSet</code>数据集的数据个数，使用了numpy数组的<code>shape</code>属性。<code>dataSet</code>是传入的参数，它是由<code>createDataSet()</code>函数创建的numpy数组（二维矩阵）:</p><pre class=" language-python"><code class="language-python">dataSet <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span>  3 104<span class="token punctuation">]</span> <span class="token punctuation">[</span>  2 100<span class="token punctuation">]</span> <span class="token punctuation">[</span>  1  81<span class="token punctuation">]</span> <span class="token punctuation">[</span>101  10<span class="token punctuation">]</span> <span class="token punctuation">[</span> 99   5<span class="token punctuation">]</span> <span class="token punctuation">[</span> 98   2<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>numpy的<code>array()</code>函数可以通过传入一个python标准的list来创建一个numpy数组，numpy数组可以是多维的，对于二维数组也可称为矩阵。而我们的输入数据集<code>dataSet</code>就是一个二维数组，即是一个6x2的矩阵，6表示总共有6个数据样本，2表示每个数据样本有2列，即2个特征（打斗镜头数和接吻镜头数）。所以我们的数据集<code>dataSet</code>是一个6行2列的矩阵。</p><p><code>dataSet.shape</code>是numpy提供的，可以获取numpy数组的维数，因为dataSet是一个6行2列的矩阵，因此dataSet.shape输出如下：</p><pre class=" language-python"><code class="language-python">dataSet<span class="token punctuation">.</span>shape</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>6, 2<span class="token punctuation">)</span></code></pre><p>而<code>classifier()</code>函数第一行调用<code>dataSet.shape[0]</code>，表示返回第一维的大小：</p><pre class=" language-python"><code class="language-python">dataSetSize <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dataSetSize<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">6</code></pre><p><code>classifier()</code>函数第二行使用了numpy的<code>tile()</code>函数，该函数原型为<code>numpy.tile(A,reps)</code>，接收两个参数，表示把A根据reps重复输出。请参见<a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.tile.html" target="_blank" rel="noopener">numpy.tile</a>对该函数的详细介绍。 </p><p><code>classifier()</code>函数中先按如下调用<code>tile()</code>函数：</p><pre class=" language-python"><code class="language-python">tile<span class="token punctuation">(</span>inX<span class="token punctuation">,</span> <span class="token punctuation">(</span>dataSetSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>第一个参数是由命令行输入的参数构成的Python标准list:</p><pre class=" language-python"><code class="language-python">input <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>假如输入18, 90，则input为：</p><pre class=" language-python"><code class="language-python">inX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>inX<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>18, 91<span class="token punctuation">]</span></code></pre><p>我们先看看<code>tile(inX, (dataSetSize, 1))</code>输出长什么样子：</p><pre class=" language-python"><code class="language-python">tmpMat <span class="token operator">=</span> tile<span class="token punctuation">(</span>inX<span class="token punctuation">,</span> <span class="token punctuation">(</span>dataSetSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tmpMat<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span>18 91<span class="token punctuation">]</span> <span class="token punctuation">[</span>18 91<span class="token punctuation">]</span> <span class="token punctuation">[</span>18 91<span class="token punctuation">]</span> <span class="token punctuation">[</span>18 91<span class="token punctuation">]</span> <span class="token punctuation">[</span>18 91<span class="token punctuation">]</span> <span class="token punctuation">[</span>18 91<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>可以看到，<code>tile()</code>函数将输入的list在行方向上重复了6次，列方向上1次，从而变成了一个6行2列的矩阵。 </p><p>接下来，用新构造的矩阵与数据集<code>dataSet</code>做减法。矩阵的减法大家都还记得吧，就是对应位置的数值做减法，因此得到相减之后的矩阵<code>diffMat</code>如下。</p><pre class=" language-python"><code class="language-python">diffMat <span class="token operator">=</span> tmpMat <span class="token operator">-</span> dataSet<span class="token keyword">print</span><span class="token punctuation">(</span>diffMat<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> 15 -13<span class="token punctuation">]</span> <span class="token punctuation">[</span> 16  -9<span class="token punctuation">]</span> <span class="token punctuation">[</span> 17  10<span class="token punctuation">]</span> <span class="token punctuation">[</span>-83  81<span class="token punctuation">]</span> <span class="token punctuation">[</span>-81  86<span class="token punctuation">]</span> <span class="token punctuation">[</span>-80  89<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>由于矩阵减法要求两个矩阵具有相同维数，因此我们也可以理解为什么需要先用<code>tile()</code>函数构造一个与<code>dataSet</code>相同维数的矩阵了吧。 接下来，对<code>diffMat</code>做平方运算，也就是对<code>diffMat</code>矩阵的每一个数做平方运算，得到<code>sqDiffMat</code>如下：</p><pre class=" language-python"><code class="language-python">sqDiffMat <span class="token operator">=</span> diffMat<span class="token operator">**</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>sqDiffMat<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> 225  169<span class="token punctuation">]</span> <span class="token punctuation">[</span> 256   81<span class="token punctuation">]</span> <span class="token punctuation">[</span> 289  100<span class="token punctuation">]</span> <span class="token punctuation">[</span>6889 6561<span class="token punctuation">]</span> <span class="token punctuation">[</span>6561 7396<span class="token punctuation">]</span> <span class="token punctuation">[</span>6400 7921<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>接下来，对<code>sqDiffMat</code>矩阵求和。这里使用了numpy的<code>sum()</code>函数，请参见<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html" target="_blank" rel="noopener">numpy.sum</a>对该函数的详细介绍。 </p><p><code>sum()</code>函数的<code>axis</code>参数指定对哪一维数据求和，如果不指定<code>axis</code>，将对整个矩阵所有数据求和。<code>axis=0</code>表示对矩阵的第一维数据求和，对于上面的二维矩阵，就是对每一列求和。<code>axis=1</code>表示将矩阵的第二维数据求和，对于上面的二维矩阵，也就是对每一行求和，比如第一行的两个数相加得到第一个值，225 + 169 = 394，以此类推对所有行求和，最后得到一个数组如下：</p><pre class=" language-python"><code class="language-python">sqDistances <span class="token operator">=</span> sqDiffMat<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sqDistances<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>  394   337   389 13450 13957 14321<span class="token punctuation">]</span></code></pre><p>接下来对求和后的数组<code>sqDistances</code>求平方根，得到所有点与未知点的距离：</p><pre class=" language-python"><code class="language-python">distances <span class="token operator">=</span> sqDistances<span class="token operator">**</span><span class="token number">0.5</span><span class="token keyword">print</span><span class="token punctuation">(</span>distances<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span> 19.84943324  18.35755975  19.72308292 115.97413505 118.13974776 119.67038063<span class="token punctuation">]</span></code></pre><p>至此，我们已经求出了数据集<code>dataSet</code>中所有数据与输入数据之间的距离，<code>distances</code>数组中的每一个数就是<code>dataSet</code>中每一组数据与输入数据的距离。 </p><p>可以看到，我们使用numpy的数组操作，代码非常简单，一次性可以求出所有数据到输入数据的距离，而不用通过遍历来求每个数据到输入数据的距离。 </p><p>接下来，对上面求出来的距离进行排序。首先使用numpy的<code>argsort()</code>函数对distances排序，这个函数返回数组数值从小到大的索引值：</p><pre class=" language-python"><code class="language-python">sortedDistIndicies <span class="token operator">=</span> distances<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sortedDistIndicies<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>1 2 0 3 4 5<span class="token punctuation">]</span></code></pre><p>从上面输出可以看出，索引为1（也就是数组的第2个，因为索引是从0开始的，）的数值最小，排在第一位，我们回头去看看distances数组，确实是数组的第2个数最小，为<code>18.35755975</code>。索引为2（数组的第3个数）的数值倒数第二小，排在第二位，数值为<code>19.72308292</code>。以此类推，可以得到上面相同的输出，从而也证明了<code>argsort()</code>函数的正确性。 </p><p>接下来，程序通过for循环来找出距离最近的前k个数的类别，并统计每种类别的个数。 </p><p>本程序中，k被设置为固定值4，所以程序只需要循环4次对前面已经排好序的数组进行统计。而labels是<code>createDataSet()</code>函数设置的，对应着dataSet中每组数组的类型。</p><pre class=" language-python"><code class="language-python">k <span class="token operator">=</span> <span class="token number">4</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">]</span></code></pre><p>程序定义了一个集合<code>classCount</code>用于存放统计结果。每次循环先获取当前的类型，再对这个类型进行累加，最后将统计结果保存到集合classCount中。</p><pre class=" language-python"><code class="language-python">classCount <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>    voteIlabel <span class="token operator">=</span> labels<span class="token punctuation">[</span>sortedDistIndicies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    classCount<span class="token punctuation">[</span>voteIlabel<span class="token punctuation">]</span> <span class="token operator">=</span> classCount<span class="token punctuation">.</span>get<span class="token punctuation">(</span>voteIlabel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>我们打印<code>classCount</code>将得到如下输出：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>classCount<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">'爱情片'</span><span class="token keyword">:</span> 3, <span class="token string">'动作片'</span><span class="token keyword">:</span> 1<span class="token punctuation">}</span></code></pre><p>从输出可以看出，经过统计后，前k（也就是4）个距离最近的数据中，类型为动作片的个数为1，类型为爱情片的个数为3。 </p><p>最后，程序对<code>classCount</code>集合进行排序，按照集合value值从高到低排序，得到一个排好序的tuple列表。这里用到了Python内置的<code>sorted</code>函数。请参见<a href="https://www.cnblogs.com/brad1994/p/6697196.html" target="_blank" rel="noopener">Python 内置函数sorted()在高级用法</a></p><pre class=" language-python"><code class="language-python">sortedClassCount <span class="token operator">=</span> sorted<span class="token punctuation">(</span>classCount<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sortedClassCount<span class="token punctuation">)</span> </code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'爱情片'</span>, 3<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'动作片'</span>, 1<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>最后我们只需要返回排好序的tuple列表的第一个，则得到<code>tuple(&#39;爱情片&#39;,3)</code>，再返回这个tuple的第一个，则得到程序预测的结果类型。</p><pre class=" language-python"><code class="language-python">type <span class="token operator">=</span> sortedClassCount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">爱情片</code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建solo个人博客网站</title>
      <link href="/posts/frontend/build-solo-blog.html"/>
      <url>/posts/frontend/build-solo-blog.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很久就想搭建一个自己的专属博客网站，用来记录与分享一些技术相关的文章，算做一个备忘录，以便把自己所学进行系统梳理，整理成文，方便以后回顾与巩固。本文记录了我从零搭建该博客网站，从购买服务器，到配置服务器，再到完成个人博客网站的搭建，总共两小时完成。 </p><p>要成功搭建一个网站，需要完成以下几个主要步骤： </p><ol><li><p>购买服务器 </p></li><li><p>购买域名及备案 </p></li><li><p>安装依赖软件 </p></li><li><p>安装博客程序 </p></li><li><p>登录博客后台设置网站信息 </p></li></ol><p>本文接下来将依次详细介绍每一个步骤。</p><h3 id="1-购买服务器"><a href="#1-购买服务器" class="headerlink" title="1. 购买服务器"></a>1. 购买服务器</h3><p>我购买的阿里云服务器ECS，操作系统镜像选择的Ubuntu系统。以前也没有使用过其他的服务器，没法比较优劣。想来阿里云不会差，毕竟是大厂的。 </p><p>点击<a href="https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=g89o8zwv" target="_blank" rel="noopener">这里</a>去阿里云官网上选择一款合适的服务器吧。购买后，登录阿里云管理控制台，进入<code>云服务器ECS</code>就可以看到你的服务器实例。实例会自动启动，几分钟就运行起来了。当你看到状态是运行中，表明已经启动成功了。你也可以看到这个实例的公网IP，你可以用远程SSH工具登录到这个IP进行服务器管理。 </p><p>另外，很重要很重要的是，你需要添加安全组规则，就是添加外部可以访问的端口。默认只开启了<code>22</code>端口。对于搭建网站，你必须要开通<code>80</code>端口，否则网站将无法访问。你可以开通其他端口，比如<code>MySQL</code>的端口，以便以后远程登录数据库查看数据。</p><h3 id="2-购买域名与备案"><a href="#2-购买域名与备案" class="headerlink" title="2. 购买域名与备案"></a>2. 购买域名与备案</h3><p>服务器购买好后，你需要选择一个域名。这个不用多说，去阿里云旗下<a href="https://wanwang.aliyun.com/?spm=5176.8142029.388261.293.5e1f6d3exjjxUP" target="_blank" rel="noopener">万网</a>购买一个。 </p><p>购买后，你需要进行备案。备案对于中国大陆的服务器是必须的，否则就算你域名解析成功了，也是会被和谐掉的，所以去<a href="https://beian.aliyun.com/?spm=5176.100251.0.0.72014f158KiBjf" target="_blank" rel="noopener">这里</a>备案吧！</p><h3 id="3-安装依赖软件"><a href="#3-安装依赖软件" class="headerlink" title="3. 安装依赖软件"></a>3. 安装依赖软件</h3><p>由于<code>Solo</code>是基于Java的开源博客系统，安装<code>Solo</code>之前，我们需要先安装如下依赖软件： </p><ol><li><p>Java </p></li><li><p>MySQL </p></li><li><p>Nginx</p></li></ol><h4 id="3-1-安装Java"><a href="#3-1-安装Java" class="headerlink" title="3.1 安装Java"></a>3.1 安装Java</h4><p>因为<code>Solo</code>是用Java开发的，我们要运行<code>Solo</code>必须的安装Java运行环境。在Oracle官网<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载页面</a>下载Linux版的JDK压缩包,然后上传到服务器。 </p><p>我在服务器上创建了一个新目录<code>/opt/java</code>，然后将压缩包拷贝到这个目录，然后解压：</p><pre class=" language-shell"><code class="language-shell">tar -zxvf jdk-8u171-linux-x64.tar.gz</code></pre><p>接下来设置环境变量，用vi编辑器打开<code>/etc/profile</code>文件：</p><pre class=" language-shell"><code class="language-shell">vi /etc/profile</code></pre><p>在文件开头添加如下内容：</p><pre class=" language-shell"><code class="language-shell">JAVA_HOME=/opt/java/jdk1.8.0_171 JRE_HOME=/opt/java/jdk1.8.0_171/jre PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib export JAVA_HOME JRE_HOME PATH CLASSPATH</code></pre><p>然后保存别执行以下命令使其生效：</p><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><p>最后在任意目录执行下面命令来测试Java是否安装成功：</p><pre class=" language-shell"><code class="language-shell">java -version</code></pre><p>如果你看到类似下面的输出，说明已经安装成功了：</p><pre class=" language-shell"><code class="language-shell">java version "1.8.0_171" Java(TM) SE Runtime Environment (build 1.8.0_171-b11) Java HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode)</code></pre><h4 id="3-2-安装MySQL"><a href="#3-2-安装MySQL" class="headerlink" title="3.2 安装MySQL"></a>3.2 安装MySQL</h4><p><code>Solo</code>默认使用的<code>H2</code>内存DB，我建议最好改用<code>MySQL</code>。</p><h5 id="3-2-1-安装MySQL"><a href="#3-2-1-安装MySQL" class="headerlink" title="3.2.1 安装MySQL"></a>3.2.1 安装MySQL</h5><p>首先分别执行下面三条命令：</p><pre class=" language-shell"><code class="language-shell">sudo apt-get install mysql-server sudo apt isntall mysql-client sudo apt install libmysqlclient-dev</code></pre><p>安装过程中，要求设置<code>root</code>用户的密码，请一定记住这个密码。 </p><p>安装成功后可以通过下面的命令测试是否安装成功：</p><pre class=" language-shell"><code class="language-shell">sudo netstat -tap | grep mysql</code></pre><p>输出类似如下：</p><pre class=" language-shell"><code class="language-shell">tcp6 0 0 localhost:mysql *:* LISTEN 19839/mysqld</code></pre><p>你也可以执行以下命令测试是否可以进入<code>MySQL</code>：</p><pre class=" language-shell"><code class="language-shell">mysql -uroot -p你的密码</code></pre><h5 id="3-2-2-开启MySQL远程访问"><a href="#3-2-2-开启MySQL远程访问" class="headerlink" title="3.2.2 开启MySQL远程访问"></a>3.2.2 开启MySQL远程访问</h5><p><code>MySQL</code>安装后默认是没有打开远程访问的，从上面的输出可以看出，它只允许<code>localhost</code>也就是本机访问。 </p><p>我们可以编辑<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>文件：</p><pre class=" language-shell"><code class="language-shell">vi /etc/mysql/mysql.conf.d/mysqld.cnf</code></pre><p>将<code>bind-address = 127.0.0.1</code>注释掉：</p><pre class=" language-shell"><code class="language-shell">#bind-address = 127.0.0.1</code></pre><p>保存退出，然后执行如下命令进入<code>MySQL</code>：</p><pre class=" language-shell"><code class="language-shell">mysql -uroot -p你的密码</code></pre><p>然后执行以下命令进行授权：</p><pre class=" language-shell"><code class="language-shell">grant all on *.* to root@'%' identified by '你的密码' with grant option; flush privileges;</code></pre><p>然后执行<code>quit</code>命令退出<code>MySQL</code>，执行以下命令重启<code>MySQL</code>服务：</p><pre class=" language-shell"><code class="language-shell">service mysql restart</code></pre><p>此时，再次运行<code>ps</code>命令：</p><pre class=" language-shell"><code class="language-shell">sudo netstat -tap | grep mysql</code></pre><p>输出如下，你会看到它已经不再只是监听<code>localhost</code>了：</p><pre class=" language-shell"><code class="language-shell">tcp6 0 0 [::]:mysql [::]:* LISTEN 19839/mysqld</code></pre><p>现在你可以使用<code>MySQL</code>客户端测试一下是否可以从你的电脑访问服务器上的<code>MySQL</code>服务了。</p><h4 id="3-3-安装Ngnix"><a href="#3-3-安装Ngnix" class="headerlink" title="3.3 安装Ngnix"></a>3.3 安装Ngnix</h4><p><code>Solo</code>会在自带的<code>Jetty</code>中运行，并默认监听<code>8080</code>端口，然而我们希望通过默认的<code>80</code>访问我们的网站，所以我们需要安装一个web server来做请求转发。 </p><p>Ubuntu系统中安装<code>Nginx</code>超简单，一条命令搞定：</p><pre class=" language-shell"><code class="language-shell">sudo apt-get install nginx</code></pre><p>安装好后<code>nginx</code>会自动启动，运行<code>ps</code>命令可以查看<code>nginx</code>进程:</p><pre class=" language-shell"><code class="language-shell">> ps -ef | grep nginx root     20435     1 0 Jun25 ? 00:00:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on; www-data 20436 20435 0 Jun25 ? 00:00:01 nginx: worker process</code></pre><p>接下来我们需要配置请求转发，打开<code>nginx</code>配置文件：</p><pre class=" language-shell"><code class="language-shell">vi /etc/nginx/nginx.conf</code></pre><p>在<code>http</code>节点内最后加上如下内容：</p><pre class=" language-shell"><code class="language-shell">server {        listen                  80;        server_name             www.yglong.com;        location / {                proxy_pass              http://127.0.0.1:8080;                proxy_redirect          off;                proxy_set_header        Host $host;                proxy_set_header        X-Real-IP $remote_addr;                proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;        }}</code></pre><p>保存退出，重启<code>nginx</code>服务:</p><pre class=" language-shell"><code class="language-shell">service nginx restart</code></pre><h3 id="4-安装博客程序"><a href="#4-安装博客程序" class="headerlink" title="4. 安装博客程序"></a>4. 安装博客程序</h3><p>接下来就是安装博客程序了。有很多的开源博客程序，目前最火的应该是<code>WordPress</code>，用PHP开发的开源博客系统。但是由于我不熟悉PHP，所以选择了一款Java开源博客系统：<a href="https://solo.b3log.org/" target="_blank" rel="noopener">Solo</a>。 </p><p>点击这个<a href="https://pan.baidu.com/s/1dzk7SU" target="_blank" rel="noopener">下载链接</a>，或者通过上面的官网再进入Github找到下载链接，下载到Solo的war包。然后通过FTP工具上传到服务器。 </p><p>上传Solo包后，创建一个新目录<code>/opt/solo</code>，将Solo war包拷贝到这个目录下，然后解压：</p><pre class=" language-shell"><code class="language-shell">jar -xvf solo-2.9.1.war</code></pre><p>解压后，进入<code>latke.properties</code>文件：</p><pre class=" language-shell"><code class="language-shell">vi /opt/solo/WEB-INF/classes/latke.properties</code></pre><p>修改<code>serverHost</code>和<code>serverPort</code>：</p><pre class=" language-shell"><code class="language-shell">#### Server ##### Browser visit protocolserverScheme=http# Browser visit domain nameserverHost=www.yglong.com# Browser visit port, 80 as usual, THIS IS NOT SERVER LISTEN PORT!serverPort=80</code></pre><p>保存并退出，进入<code>local.properties</code>文件：</p><pre class=" language-shell"><code class="language-shell">vi /opt/solo/WEB-INF/classes/local.properties</code></pre><p>注释掉H2 DB的配置，并配置MySQL：</p><pre class=" language-shell"><code class="language-shell">#### H2 runtime #####runtimeDatabase=H2#jdbc.username=root#jdbc.password=#jdbc.driver=org.h2.Driver#jdbc.URL=jdbc:h2:~/solo_h2/db#jdbc.pool=h2#### MySQL runtime ####runtimeDatabase=MYSQLjdbc.username=rootjdbc.password=你的MySQL密码jdbc.driver=com.mysql.jdbc.Driverjdbc.URL=jdbc:mysql://localhost:3306/solo?useUnicode=yes&amp;characterEncoding=utf8jdbc.pool=druid</code></pre><p>保存退出。 接下来创建数据库，首先执行下面命令进入<code>MySQL</code>：</p><pre class=" language-shell"><code class="language-shell">mysql -uroot -p你的密码</code></pre><p>然后执行下面命令创建数据库，数据库名字与<code>local.properties</code>里配置的名字要一样：</p><pre class=" language-shell"><code class="language-shell">CREATE DATABASE IF NOT EXISTS solo DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></pre><p>退出<code>MySQL</code>，最后执行下面命令启动<code>Solo</code>：</p><pre class=" language-shell"><code class="language-shell">nohup java -cp WEB-INF/lib/*:WEB-INF/classes org.b3log.solo.Starter &</code></pre><h3 id="5-登录博客后台设置网站信息"><a href="#5-登录博客后台设置网站信息" class="headerlink" title="5. 登录博客后台设置网站信息"></a>5. 登录博客后台设置网站信息</h3><p>现在可以输入你的域名访问你的网站了。首次访问时，需要初始化网站。你需要设置你的管理员帐号，然后开始初始化，<code>Solo</code>会自动在<code>MySQL</code>中建立数据库表。初始化成功后就自动进入你的网站了。 </p><p>进入<code>Solo</code>后台管理控制台，进入<code>工具</code>-&gt;<code>偏好设定</code>，你可以修改你的网站名称等其他基本网站信息。 </p><p>就这样，你的网站已经基本搭建完成了。 </p><p>最后剩下的，也是经营个人网站最重要的，就是你需要坚持不断的发布有质量的，原创的好文！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 个人博客网站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
