<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>干货！史上最详细脑图《大型网站技术架构》</title>
      <link href="/posts/architecture/big-website-architecture.html"/>
      <url>/posts/architecture/big-website-architecture.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍一下"><a href="#一、介绍一下" class="headerlink" title="一、介绍一下"></a>一、介绍一下</h3><p>《大型网站技术架构》这本书可能很多人都看过，小编个人觉得真的是非常不错的一本书。</p><p>看完这本书后，你会对如何设计大型网站架构，有非常清晰的思路。</p><p>如果还没有读过的小伙伴，赶紧去读一读吧。</p><blockquote><p>PS：小编这里有这本书的Kiddle电子版，如有需要可联系我获取哦！</p></blockquote><p><img src="/posts/architecture/big-website-architecture/book.jpg" alt></p><h3 id="二、架构思路"><a href="#二、架构思路" class="headerlink" title="二、架构思路"></a>二、架构思路</h3><h4 id="1-大型网站系统特点"><a href="#1-大型网站系统特点" class="headerlink" title="1. 大型网站系统特点"></a>1. 大型网站系统特点</h4><p>既然谈的是大型网站架构，所谓”大型”网站，首先需要了解大型网站系统具有什么样的特点。</p><p>一般大型网站系统都具有如下共同特点：</p><ul><li><p>高并发，大流量</p></li><li><p>高可用</p></li><li><p>海量数据</p></li><li><p>用户分布广，网络情况复杂</p></li><li><p>安全环境恶劣</p></li><li><p>需求快速变更，发布频繁</p></li><li><p>渐进式发展和演化</p></li></ul><h4 id="2-大型网站架构核心要素"><a href="#2-大型网站架构核心要素" class="headerlink" title="2. 大型网站架构核心要素"></a>2. 大型网站架构核心要素</h4><p>基于大型网站系统的特点，需要围绕这些特点来设计系统架构。 基于此，可以概括出设计大型网站需要考虑的核心架构要素。</p><p>设计大型网站系统的核心架构要素：</p><ul><li><p>高性能</p></li><li><p>高可用性</p></li><li><p>可伸缩性</p></li><li><p>可扩展性</p></li><li><p>安全性</p></li></ul><p>  本书的核心内容其实就是针对这几个核心架构要素一一展开。   </p><h3 id="三、设计『-高性能-』的网站架构"><a href="#三、设计『-高性能-』的网站架构" class="headerlink" title="三、设计『 高性能 』的网站架构"></a>三、设计『 高性能 』的网站架构</h3><p>对于大型网站，设计高性能的架构一般从以下几个方面考虑：</p><ul><li><p>优化网站响应速度</p></li><li><p>优化网站处理并发请求的能力</p></li><li><p>优化数据存储的性能</p></li></ul><p>所谓高性能，</p><p>从网站的用户角度来看，无非就是访问网站的『 <strong>响应速度要快</strong> 』。</p><p>从系统角度看，由于同时访问的用户数巨大，因此同时到达系统服务器的『 <strong>并发请求数</strong> 』非常大。</p><p>从后端数据存储来看，优化『 <strong>海量数据存储</strong> 』的能力，避免后端数据存储性能缓慢而成为系统性能瓶颈。</p><h4 id="1-优化网站响应速度"><a href="#1-优化网站响应速度" class="headerlink" title="1. 优化网站响应速度"></a>1. 优化网站响应速度</h4><blockquote><p><strong>重要提示：</strong></p><p>网站性能优化第一定律：优先考虑使用缓存技术优化性能</p></blockquote><p>优化网站响应速度的主要手段是使用『 <strong>缓存</strong> 』，使用缓存是提高网站响应速度效果最显著的办法。</p><p>例如对于前端，可以使用<code>CDN</code>，反向代理，这些都是利用的缓存技术。</p><p>对于应用服务器的性能优化，一个主要的手段也是使用缓存，在提高响应速度的同时，也减轻了对后端数据库的压力。</p><p>如果是有海量数据的超大型系统，甚至需要用到分布式缓存系统。</p><p>另外一个优化响应速度的手段是『 <strong>异步消息处理</strong> 』。异步消息处理是指，在应用服务器与后端服务之间使用消息队列，应用服务器总是将用户请求扔进消息队列，并立即返回用户，后端服务异步从消息队列中取出请求数据进行处理。由于请求发送到消息队列后就立即返回了，因此用户会感知到更快的响应速度。</p><p>使用消息队列还具有削峰的作用，当瞬间有大量请求到达系统后，这些请求数据会进入消息队列，而不会瞬间涌入后端服务器，从而起到保护后端服务的作用。</p><h4 id="2-优化网站处理并发请求的能力"><a href="#2-优化网站处理并发请求的能力" class="headerlink" title="2. 优化网站处理并发请求的能力"></a>2. 优化网站处理并发请求的能力</h4><p>除此之外，还要支持巨大的并发请求数，一般手段是使用『 <strong>集群</strong> 』。</p><p>应用服务器一般需要从单台服务器扩展为多台服务器，构成应用服务器集群，然后引入负载均衡服务器，将用户请求分摊到不同的应用服务器进行处理。</p><p>集群可以很容易进行伸缩（增加或减少服务器数量），因此可以有效支持在不同场景下的不同并发请求量。如秒杀场景下，可以快速增加服务器到集群中，从而分摊用户请求，减轻其他服务器的压力。</p><h4 id="3-优化数据存储的性能"><a href="#3-优化数据存储的性能" class="headerlink" title="3. 优化数据存储的性能"></a>3. 优化数据存储的性能</h4><p>单从优化数据存储性能方面来看，主要的优化手段有：</p><ul><li><p>使用性能更高的硬盘，如使用固态硬盘，读写速度更快。</p></li><li><p>替换传统关系型数据库，使用<code>NoSQL</code>数据库。<code>NoSQL</code>数据库的数据读写速度一般优于传统关系型数据库。</p></li><li><p>使用分布式文件系统。分布式文件系统具有并发读写能力，因此可以有效提高数据存储的并发能力。</p></li></ul><h3 id="四、设计『-高可用-』的网站架构"><a href="#四、设计『-高可用-』的网站架构" class="headerlink" title="四、设计『 高可用 』的网站架构"></a>四、设计『 高可用 』的网站架构</h3><blockquote><p><strong>重要提示：</strong></p><p>实现高可用架构的主要手段是数据和服务的『 <strong>冗余备份</strong> 』和『 <strong>失效转移</strong> 』</p></blockquote><p>所谓高可用，即在任何时刻，应该尽量保证系统是可用的。</p><p>使用集群实现数据和服务的冗余备份，当集群中某个服务器宕机时，失效转移机制会将用户请求分发到集群中其他可用服务器上，从而可以保证用户请求被正确处理。</p><p>使用集群有个前提条件是，各个服务器上运行的服务应尽量是无状态的这样各个服务器之间就不会存在差异。但是对于应用服务器，如果保存了用户<code>Session</code>数据，那么它们就是有状态的。这种情况下需要考虑如何处理<code>Session</code>状态数据。可以采用独立的分布式<code>Session</code>服务器集群来专门缓存用户<code>Session</code>数据，从而使应用服务器变成无状态的。</p><p>冗余备份与失效转移手段适用于网站系统的各个逻辑层，包括应用层，服务层和数据层。</p><h3 id="五、设计『-可伸缩-』的网站架构"><a href="#五、设计『-可伸缩-』的网站架构" class="headerlink" title="五、设计『 可伸缩 』的网站架构"></a>五、设计『 可伸缩 』的网站架构</h3><p>系统的可伸缩性，通常容易与可扩展性混淆。</p><p>可伸缩性意味着当网站流量变大时，可以很容易通过增加系统部署实例来支持。可扩展性意味着系统架构可以很容易扩展，从而支持新业务功能系统。</p><p>为达到可伸缩的目的，通常需要将系统进行拆分。纵向进行逻辑分层，如分为应用层，服务层和数据层。横向进行业务分割，把不同的业务功能拆分出来，并且独立部署。</p><p>对于拆分出来的单一功能，也需要采用集群方式进行部署。但是对于不同类型的集群，实现伸缩的方式不太一样。</p><p>对于应用服务器集群，通常使用『 <strong>负载均衡</strong> 』来实现伸缩。当有新服务器加入集群时，负载均衡可以自动将用户请求分发到新服务器。</p><p>对于分布式缓存集群，当有新服务器加入集群时，为了保证缓存命中率，通常使用『 <strong>一致性</strong> 』算法，从而使请求能够绝大部分指向已经缓存了所需数据的服务器。</p><p>对于数据存储服务器集群，对传统关系数据库来说，通常的手段是进行『 <strong>主、从数据库复制</strong> 』实现读写分离，或者『 <strong>数据分库分片</strong> 』等。然而对于<code>NoSQL</code>数据库，很多<code>NoSQL</code>数据库天生就是为可伸缩海量数据存储而设计的，如<code>HBase</code>。</p><h3 id="六、设计『-可扩展-』的网站架构"><a href="#六、设计『-可扩展-』的网站架构" class="headerlink" title="六、设计『 可扩展 』的网站架构"></a>六、设计『 可扩展 』的网站架构</h3><p>网站系统架构应该是易于扩展的。通常的设计手段包括：</p><ul><li><p>使用分布式消息队列降低系统与系统之间的耦合性。</p><p>当开发新系统后，只需要订阅消息队列的数据即可进行整合，而不需要修改已有其他系统。</p></li><li><p>利用分布式服务抽取可复用的服务。</p><p>对于通用业务功能，可以把它们抽取成可复用的服务。 对于新业务需求，通常可以使用这些可复用的服务，进行简单的组装即可实现。</p></li><li><p>使用具有可扩展的数据库。</p><p>如使用支持<code>ColumnFamily</code>结构的<code>NoSQL</code>数据库，可以在现有数据表结构之上增删数据列。</p></li><li><p>开放平台。</p><p>通过开放平台接入第三方开发者开发的系统，扩展系统周边应用，形成生态圈。</p></li></ul><h3 id="七、设计『-安全-』的网站架构"><a href="#七、设计『-安全-』的网站架构" class="headerlink" title="七、设计『 安全 』的网站架构"></a>七、设计『 安全 』的网站架构</h3><p>系统安全性，对于任何网站系统都是至关重要的。</p><p>对于大型网站，由于用户分布广，网络安全环境会更加复杂和恶劣，设计具有良好安全性的网站架构会更加具有挑战性。</p><p>一般可以考虑以下几个方面：</p><ul><li><p>防御常见的网站攻击手段。如<code>XSS</code>，注入攻击，<code>CSRF</code>攻击等。</p></li><li><p>信息加密。对在网络中传输的数据进行加密后再传输。</p></li><li><p>信息过滤。过滤掉垃圾信息，防止垃圾信息进入系统内部。</p></li></ul><h3 id="八、思维导图"><a href="#八、思维导图" class="headerlink" title="八、思维导图"></a>八、思维导图</h3><p>以下是我亲自整理的思维导图:</p><p><img src="/posts/architecture/big-website-architecture/xmind.png" alt></p><p>如果上面的大图看着不方便，我也把它放在了Github，访问我的<a href="https://github.com/longyg/Study" target="_blank" rel="noopener" ">Github地址</a>下载，然后用<code>XMind</code>打开轻松看，包括图里的详细标注也可以看得到啦。</p>]]></content>
      
      
      <categories>
          
          <category> 软件架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 书籍推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动实现Java线性表</title>
      <link href="/posts/java/java-list-impl.html"/>
      <url>/posts/java/java-list-impl.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、-线性表接口定义"><a href="#一、-线性表接口定义" class="headerlink" title="一、 线性表接口定义"></a>一、 线性表接口定义</h3><p>一般情况下，一个线性表需要具有如下基本功能：</p><ul><li>添加或插入元素</li><li>删除元素</li><li>查找元素</li><li>返回线性表中元素个数</li><li>判断线性表是否为空</li><li>清空线性表</li></ul><p>因此，我们首先定义如下接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>collection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 往线性表中添加元素     * @param element     */</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在线性表的指定索引处插入元素     * @param element     * @param index     */</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>E element<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从线性表中删除元素     * @param element     * @return 返回删除的元素     */</span>    E <span class="token function">remove</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除指定索引处的元素     * @param index     * @return 返回删除的元素     */</span>    E <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从线性表种查找元素     * @param element     * @return 返回元素在线性表中的索引     */</span>    <span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取指定索引处的元素     * @param index     * @return 返回指定索引处的元素     */</span>    E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取线性表中的元素个数     * @return     */</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断线性表是否为空     * @return     */</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 清空线性表     */</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="二、线性表实现"><a href="#二、线性表实现" class="headerlink" title="二、线性表实现"></a>二、线性表实现</h3><h4 id="实现一：基于数组的顺序存储结构"><a href="#实现一：基于数组的顺序存储结构" class="headerlink" title="实现一：基于数组的顺序存储结构"></a>实现一：基于数组的顺序存储结构</h4><p>最常见的线性表实现是基于数组的顺序存储结构。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基于数组的顺序存储结构实现的线性表 * @param &lt;E> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SequenceList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DEFAULT_SIZE <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SequenceList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        capacity <span class="token operator">=</span> DEFAULT_SIZE<span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">></span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                capacity <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            data <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            Object[] oldData = data;</span><span class="token comment" spellcheck="true">//            data = new Object[capacity];</span><span class="token comment" spellcheck="true">//            for (int i = 0; i &lt; size; i++) {</span><span class="token comment" spellcheck="true">//                data[i] = oldData[i];</span><span class="token comment" spellcheck="true">//            }</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">insert</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>E element<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of array bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token punctuation">,</span> data<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> E <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of array bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        E oldValue <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of array bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        for (int i = 0; i &lt; size; i++) {</span><span class="token comment" spellcheck="true">//            data[i] = null;</span><span class="token comment" spellcheck="true">//        }</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SequenceList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequenceList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"gang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ni"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"gang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token string">"yong"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"gang"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"gang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="实现二：基于单链表的链式存储结构"><a href="#实现二：基于单链表的链式存储结构" class="headerlink" title="实现二：基于单链表的链式存储结构"></a>实现二：基于单链表的链式存储结构</h4><p>我们也可以基于单向链表的链式存储结构来实现线性表。让每个元素都保留指向下一个元素的引用，从而构成一个链表。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>collection<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基于单链表的链式存储结构实现的线性表 * @param &lt;E> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedSeqList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Node first<span class="token punctuation">;</span>    <span class="token keyword">private</span> Node last<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        E data<span class="token punctuation">;</span>        Node next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>E data<span class="token punctuation">,</span> Node next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">LinkedSeqList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        first <span class="token operator">=</span> null<span class="token punctuation">;</span>        last <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 尾插法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            last <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            last<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>E element<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of array bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> preNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node current <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>                preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>                size<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        Node toDel <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            toDel <span class="token operator">=</span> first<span class="token punctuation">;</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> first<span class="token punctuation">;</span>            Node curNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    toDel <span class="token operator">=</span> curNode<span class="token punctuation">;</span>                    preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> toDel<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    toDel<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    preNode <span class="token operator">=</span> curNode<span class="token punctuation">;</span>                    curNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>toDel <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> toDel<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> E <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node toDel <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            toDel <span class="token operator">=</span> first<span class="token punctuation">;</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            toDel <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> toDel<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            toDel<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> toDel<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node curr <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curr <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node currNode <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currNode <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> currNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                currNode <span class="token operator">=</span> currNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        first <span class="token operator">=</span> null<span class="token punctuation">;</span>        last <span class="token operator">=</span> null<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node curr <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实现三：基于双向链表的链式存储结构"><a href="#实现三：基于双向链表的链式存储结构" class="headerlink" title="实现三：基于双向链表的链式存储结构"></a>实现三：基于双向链表的链式存储结构</h4><p>我们也可以基于双向链表实现线性表。每个元素不仅保留指向下一个元素的引用，也保留了指向前一个元素的引用，从而构成一个双向的链表。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>javabasic<span class="token punctuation">.</span>collection<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基于双向链表的链式存储结构实现的线性表 * @param &lt;E> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DuLinkedList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> header<span class="token punctuation">;</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> tail<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> E data<span class="token punctuation">;</span>        <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pre<span class="token punctuation">;</span>        <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>E data<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pre<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> pre<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">DuLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        header <span class="token operator">=</span> null<span class="token punctuation">;</span>        tail <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 尾插法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> l <span class="token operator">=</span> tail<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> l<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            header <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        if (header == null) {</span><span class="token comment" spellcheck="true">//            header = new Node(element, null, null);</span><span class="token comment" spellcheck="true">//            tail = header;</span><span class="token comment" spellcheck="true">//        } else {</span><span class="token comment" spellcheck="true">//            Node newNode = new Node(element, tail, null);</span><span class="token comment" spellcheck="true">//            tail.next = newNode;</span><span class="token comment" spellcheck="true">//            tail = newNode;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        size++;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>E element<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of array bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> null<span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>            header <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tail <span class="token operator">=</span> header<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node next <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> preNode<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>            preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            next<span class="token punctuation">.</span>pre <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> toDel <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>header<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            toDel <span class="token operator">=</span> header<span class="token punctuation">;</span>            header <span class="token operator">=</span> header<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> header<span class="token punctuation">;</span>            Node curNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    toDel <span class="token operator">=</span> curNode<span class="token punctuation">;</span>                    preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> toDel<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    toDel<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> preNode<span class="token punctuation">;</span>                    toDel<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                    toDel<span class="token punctuation">.</span>pre <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    preNode <span class="token operator">=</span> curNode<span class="token punctuation">;</span>                    curNode <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>toDel <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> toDel<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> E <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> toDel <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            toDel <span class="token operator">=</span> header<span class="token punctuation">;</span>            header <span class="token operator">=</span> header<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            header<span class="token punctuation">.</span>pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node preNode <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            toDel <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> toDel<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>toDel<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                toDel<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> preNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            toDel<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>            toDel<span class="token punctuation">.</span>pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> toDel<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">locate</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node curr <span class="token operator">=</span> header<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curr <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"input index is out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从头节点正向搜索</span>            Node cur <span class="token operator">=</span> header<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> cur<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从尾节点反向搜索</span>            Node cur <span class="token operator">=</span> tail<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> cur<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node <span class="token operator">=</span> <span class="token function">getNodeByIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        header <span class="token operator">=</span> null<span class="token punctuation">;</span>        tail <span class="token operator">=</span> null<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node curr <span class="token operator">=</span> header<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见排序算法Java实现</title>
      <link href="/posts/java/java-sorting.html"/>
      <url>/posts/java/java-sorting.html</url>
      
        <content type="html"><![CDATA[<p>本文总结常见排序算法，并用Java语言实现这些算法。</p><h3 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1. 选择排序"></a>1. 选择排序</h3><h4 id="1-1-直接选择排序"><a href="#1-1-直接选择排序" class="headerlink" title="1.1 直接选择排序"></a>1.1 直接选择排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>select<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 选择排序之：直接选择排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 优化后的算法, 减少了交换次数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                data<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">selectSort2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="1-2-堆排序"><a href="#1-2-堆排序" class="headerlink" title="1.2 堆排序"></a>1.2 堆排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>select<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 选择排序之：堆排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从小到大排序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先建大顶堆</span>            <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再把堆的root节点与数组的最后一个元素交换</span>            <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从大到小排序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">heapSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先建小顶堆</span>            <span class="token function">buildMinHeap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再把堆的root节点与数组的最后一个元素交换</span>            <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 建大顶堆</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果当前k节点存在子节点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 初始化biggerIndex为左子节点的索引</span>                <span class="token keyword">int</span> biggerIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果当前k节点存在右子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>biggerIndex <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 比较左右子节点大小</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>biggerIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>biggerIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果右子节点大，把biggerIndex设为右子节点的索引</span>                        biggerIndex<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 比较k节点与最大子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>biggerIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果k比子节点小，则交换</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">,</span> biggerIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 交换后需要循环子树，重新调整子树</span>                    k <span class="token operator">=</span> biggerIndex<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 避免死循环</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 建小顶堆</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buildMinHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果当前k节点存在子节点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 初始化lowerIndex为左子节点的索引</span>                <span class="token keyword">int</span> lowerIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果当前k节点存在右子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lowerIndex <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 比较左右子节点大小</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>lowerIndex<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>lowerIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果右子节点小，把lowerIndex设为右子节点的索引</span>                        lowerIndex<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 比较k节点与最大子节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>lowerIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果k比子节点大，则交换</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">,</span> lowerIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 交换后需要循环子树，重新调整子树</span>                    k <span class="token operator">=</span> lowerIndex<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 避免死循环</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">heapSort2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-交换排序"><a href="#2-交换排序" class="headerlink" title="2. 交换排序"></a>2. 交换排序</h3><h4 id="2-1-冒泡排序"><a href="#2-1-冒泡排序" class="headerlink" title="2.1 冒泡排序"></a>2.1 冒泡排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>exchange<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 交换排序之：冒泡排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标记是否进行了交换</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果没有进行过交换，说明数组已经是有序的了，即可提前结束</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-快速排序"><a href="#2-2-快速排序" class="headerlink" title="2.2 快速排序"></a>2.2 快速排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>exchange<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 交换排序之：快速排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">subSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end  <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                start<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">>=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                start<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> end<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h3><h4 id="3-1-直接插入排序"><a href="#3-1-直接插入排序" class="headerlink" title="3.1 直接插入排序"></a>3.1 直接插入排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>insert<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 插入排序之：直接插入排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectInsertSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">directInsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果比前一个数小，说明需要插入前面的有序序列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">directInsertSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-二分插入排序"><a href="#3-2-二分插入排序" class="headerlink" title="3.2 二分插入排序"></a>3.2 二分插入排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>insert<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 插入排序之：二分插入排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryInsertSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">binaryInsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> high <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// mid 为low和high的中间索引</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果tmp值大于中间元素的值</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 下一躺将在索引大于mid那一半中搜索</span>                    low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 下一躺将在索引小于mid那一半中搜索</span>                    high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将low到i处的所有元素向后整体移一位</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> low<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将tmp插入合适位置</span>            data<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">binaryInsertSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-Shell排序"><a href="#3-3-Shell排序" class="headerlink" title="3.3 Shell排序"></a>3.3 Shell排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">.</span>insert<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 插入排序之：Shell排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> data<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            h <span class="token operator">=</span> h <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h = "</span> <span class="token operator">+</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>i <span class="token operator">-</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> h<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 整体后移h格</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">;</span> j <span class="token operator">-=</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        data<span class="token punctuation">[</span>j <span class="token operator">+</span> h<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    data<span class="token punctuation">[</span>j <span class="token operator">+</span> h<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            h <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-归并排序"><a href="#4-归并排序" class="headerlink" title="4. 归并排序"></a>4. 归并排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 归并排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取中间索引</span>            <span class="token keyword">int</span> center <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对左边一半数组进行递归排序</span>            <span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对右边一半数组进行递归排序</span>            <span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 合并左右已排序的数组</span>            <span class="token function">merge</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> center<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> center<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> center <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 临时数组，用于保存merge后的数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmpArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 临时数组的索引变量</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> center <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmpArr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                tmpArr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果左边有多余元素，依次放入临时数组</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> center<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmpArr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果右边有多余元素，依次放入临时数组</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmpArr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将临时数组的内容复制回原数组</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> tmpArr<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-桶式排序"><a href="#5-桶式排序" class="headerlink" title="5. 桶式排序"></a>5. 桶式排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 桶式排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BucketSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmpArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 桶数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>max <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 桶数组记录每个元素出现的次数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buckets<span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>buckets<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max <span class="token operator">-</span> min<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> buckets<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>buckets<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> tmpArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            data<span class="token punctuation">[</span><span class="token operator">--</span>buckets<span class="token punctuation">[</span>tmpArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmpArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> min<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-基数排序"><a href="#6-基数排序" class="headerlink" title="6. 基数排序"></a>6. 基数排序</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> longyg<span class="token punctuation">.</span>algorithm<span class="token punctuation">.</span>sorting<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 基数排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiKeyRadixSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> radix<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 基于桶式排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>radix<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>buckets<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> subKey <span class="token operator">=</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>rate<span class="token punctuation">)</span> <span class="token operator">%</span> radix<span class="token punctuation">;</span>                buckets<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> radix<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                buckets<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> buckets<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> buckets<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> subKey <span class="token operator">=</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">/</span> rate<span class="token punctuation">)</span> <span class="token operator">%</span> radix<span class="token punctuation">;</span>                data<span class="token punctuation">[</span><span class="token operator">--</span>buckets<span class="token punctuation">[</span>subKey<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rate <span class="token operator">*=</span> radix<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1110</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识总结</title>
      <link href="/posts/java/java-basic-summary.html"/>
      <url>/posts/java/java-basic-summary.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-substring-方法"><a href="#1-substring-方法" class="headerlink" title="1. substring()方法"></a>1. substring()方法</h3><p><code>String</code>类的<code>substring()</code>方法在JDK6与JDK7的区别:</p><ul><li><strong>JDK6</strong>：截取的<code>String</code>对象会共享字符数组 (对于从很长的字符串中截取很小的字符串时，可能会引起内存泄漏，因为内部使用的字符数组不能被回收）</li><li><strong>JDK7</strong>：截取的<code>String</code>对象会创建新的字符数组</li></ul><h3 id="2-Integer缓存机制"><a href="#2-Integer缓存机制" class="headerlink" title="2. Integer缓存机制"></a>2. Integer缓存机制</h3><ul><li>当整数在-128到127范围时，会使用缓存的<code>Integer</code>对象，而不会新建对象。</li><li>缓存机制只有在自动装箱场景下有用。如：<code>Integer i = 10</code></li><li><code>Byte</code>, <code>Short</code>, <code>Long</code>, <code>Character</code>都有类似缓存机制。<code>Character</code>适用范围为<code>0</code>到<code>127</code>.</li></ul><h3 id="3-浮点型"><a href="#3-浮点型" class="headerlink" title="3. 浮点型"></a>3. 浮点型</h3><h3 id="4-SynchronizedList与Vector区别"><a href="#4-SynchronizedList与Vector区别" class="headerlink" title="4. SynchronizedList与Vector区别"></a>4. SynchronizedList与Vector区别</h3><ul><li><code>SynchronizedList</code>可以将所有<code>List</code>的子类转成线程安全类</li><li><code>SynchronizedList</code>遍历时需要手动进行同步，<code>Vector</code>的遍历方法加了同步锁</li><li><code>SynchronizedList</code>可以指定锁定的对象</li></ul><h3 id="5-常见垃圾回收器"><a href="#5-常见垃圾回收器" class="headerlink" title="5. 常见垃圾回收器"></a>5. 常见垃圾回收器</h3><ul><li><p><strong>串行回收器 （-XX:+UseSerialGC）</strong></p><p>Young：</p><ul><li><p>串行</p></li><li><p>复制算法： 1个<code>Eden</code>区，2个<code>Survivor</code>区</p></li></ul><p>Old：</p><ul><li><p>串行</p></li><li><p>标记压缩算法</p></li></ul></li><li><p><strong>并行回收器 (-XX:+UseParallelGC)</strong></p><p>Young:</p><ul><li><p>多CPU并行</p></li><li><p>复制算法 （与串行相同）</p></li></ul><p>Old：与串行回收器相同</p></li><li><p><strong>并行压缩回收器（-XX:+UseParallelOldGC)</strong></p><p>Young: 与并行回收器相同</p><p>Old：并行</p></li><li><p><strong>并发标识清理回收器（CMS）-XX:+UseConcMarkSweepGC</strong></p><p>Young: 与并行回收器相同</p><p>Old：并发</p></li></ul><h3 id="6-类型自动提升"><a href="#6-类型自动提升" class="headerlink" title="6. 类型自动提升"></a>6. 类型自动提升</h3><p>当表达式中包含多个基本类型时，会发生自动提升</p><ul><li><code>byte</code>，<code>short</code>和<code>char</code>会被提升为<code>int</code></li><li>提升到与表达式中最高等级操作数同样的类型：<br><code>byte</code> -&gt; <code>short</code><br><code>char</code> -&gt; <code>int</code> -&gt; <code>long</code> -&gt; <code>float</code> -&gt; <code>double</code></li></ul><h3 id="7-隐式类型转换"><a href="#7-隐式类型转换" class="headerlink" title="7. 隐式类型转换"></a>7. 隐式类型转换</h3><p>复合赋值运算符（如<code>+=</code>， <code>-=</code>， <code>*=</code>）会进行隐式类型转换。</p><ul><li><p>会自动将计算结果值强制类型转换为左侧变量的类型</p><p>  e.g,:</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">short</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不等于 i = i + 2, 会报编译错误</span></code></pre></li></ul><h3 id="8-类型擦除"><a href="#8-类型擦除" class="headerlink" title="8. 类型擦除"></a>8. 类型擦除</h3><p>当把有泛型类型的对象赋值给一个没有泛型类型的变量（原始类型），泛型类型信息将被擦除。</p><h3 id="9-switch语句"><a href="#9-switch语句" class="headerlink" title="9. switch语句"></a>9. switch语句</h3><ul><li><p><code>switch</code>语句只支持：<code>byte</code>, <code>char</code>, <code>short</code>, <code>int</code>, <code>Character</code>, <code>Byte</code>, <code>Short</code>, <code>Integer</code>, <code>String</code>, <code>enum</code></p></li><li><p>在<code>switch</code>语句中使用枚举类时，<code>case</code>分支中访问枚举值时不能使用枚举类名作为限定，而要直接使用枚举值。</p></li></ul><h3 id="11-if-else语句"><a href="#11-if-else语句" class="headerlink" title="11. if/else语句"></a>11. if/else语句</h3><p><code>if/else</code>语句使用的基本规则：总是优先把包含范围小的条件放在前面</p><h3 id="12-循环语句"><a href="#12-循环语句" class="headerlink" title="12. 循环语句"></a>12. 循环语句</h3><p>如果在for, while或do循环中不使用花括号时，第一个语句不能是局部变量声明语句</p><h3 id="13-instanceof"><a href="#13-instanceof" class="headerlink" title="13. instanceof"></a>13. instanceof</h3><ul><li><p>如果引用变量为<code>null</code>，则永远返回<code>false</code></p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> s <span class="token keyword">instanceof</span> <span class="token class-name">String</span>  <span class="token comment" spellcheck="true">// 返回false</span></code></pre></li><li><p>编译时判断编译类型，运行时才判断引用变量引用的对象实际类型</p></li></ul><h3 id="14-单例模式"><a href="#14-单例模式" class="headerlink" title="14. 单例模式"></a>14. 单例模式</h3><p>单例模式的类一般需要实现一个私有的<code>readResolve()</code>方法，防止反序列化时产生新的对象。</p><h3 id="15-方法重载"><a href="#15-方法重载" class="headerlink" title="15. 方法重载"></a>15. 方法重载</h3><ul><li>调用方法时传入的实际参数会被向上转型为方法的形参类型</li><li>编译时匹配类型更精确的方法进行调用，即传入参数与形参类型更接近</li><li>如果多个参数匹配结果产生冲突，则无法通过编译</li><li>被重载的方法必须改变参数列表，其他修改是optional的</li></ul><h3 id="16-方法重写"><a href="#16-方法重写" class="headerlink" title="16. 方法重写"></a>16. 方法重写</h3><ul><li>参数列表必须完全与被重写方法的相同。</li><li>返回类型必须是被重写方法的相同类型或派生类型（子类，实现类）</li><li>访问权限不能比被重写方法低</li><li>子类必须具有访问父类方法的权限，才能重写父类方法</li><li><code>final</code>方法不能被重写</li></ul><h3 id="17-非静态内部类"><a href="#17-非静态内部类" class="headerlink" title="17. 非静态内部类"></a>17. 非静态内部类</h3><ul><li>编译器会默认为内部类的构造器添加外部类作为第一个参数</li><li>不能有静态成员变量</li></ul><h3 id="18-static"><a href="#18-static" class="headerlink" title="18. static"></a>18. static</h3><ul><li>只能用于修饰类内部成员：Field，方法，内部类，初始化块，内部枚举类</li><li>静态方法由变量的声明类型调用</li><li>静态内部类无法访问外部类的非静态成员</li></ul><h3 id="19-异常"><a href="#19-异常" class="headerlink" title="19. 异常"></a>19. 异常</h3><ul><li><code>catch</code>捕获多个异常时，应先捕获子类异常，再捕获父类异常，否则会报编译错误</li><li>可以在程序任何地方catch 任何运行时异常（<code>RuntimeException</code>及其子类异常），或者异常超类<code>Exception</code></li><li><code>catch</code>只能捕获<code>try</code>块内程序可能抛出的非运行时异常或其父类异常</li><li>子类重写父类方法时，不能声明抛出比父类方法类型更多，范围更大的异常</li></ul><h3 id="20-性能测试工具"><a href="#20-性能测试工具" class="headerlink" title="20. 性能测试工具"></a>20. 性能测试工具</h3><ul><li>LoadRunner</li><li>JMeter</li></ul><h3 id="21-自动化测试工具"><a href="#21-自动化测试工具" class="headerlink" title="21. 自动化测试工具"></a>21. 自动化测试工具</h3><ul><li>WinRunner</li><li>QTP</li><li>Selenium</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keycloak与React集成应用（下篇）：基于角色的访问控制</title>
      <link href="/posts/frontend/keycloak-react-integration-02.html"/>
      <url>/posts/frontend/keycloak-react-integration-02.html</url>
      
        <content type="html"><![CDATA[<p>在上一篇《<a href="http://www.yglong.com/keycloak-react-integration-01.html" target="_blank" rel="noopener">Keycloak与React集成应用（上篇）：用户登录</a>》中，我们介绍了如何将keycloak集成到基于React的前端应用中，实现用户登录验证功能。本文将在上一篇实现的已有功能之上，继续实现用户访问控制的功能，演示如何使用keycloak轻松地对应用的访问进行控制。</p><h3 id="基于角色的访问控制（RBAC）"><a href="#基于角色的访问控制（RBAC）" class="headerlink" title="基于角色的访问控制（RBAC）"></a>基于角色的访问控制（RBAC）</h3><p><code>Keycloak</code>设计非常灵活，支持多种访问控制方式，其中最简单的方式是基于角色的访问控制。 </p><p>本文将演示这种最简单的，基于角色的访问控制。 </p><p>在上一篇已有的用户登录验证功能之上，我们进一步实现对登录用户的访问进行控制。例如某些用户只能访问应用的某些页面。 </p><p>我们将基于用户所分配的角色来限制用户可以访问的内容。 例如对于本应用，我们最终实现的效果描述如下：</p><ul><li>用户<code>demo</code>只分配了访问product页面的角色（<code>Product_Role</code>），因此当使用<code>demo</code>用户登入应用后，菜单中只显示了<code>Product</code>菜单项，该用户只能访问product页面，如下图所示：</li></ul><p><img src="/posts/frontend/keycloak-react-integration-02/only-product-role.png" alt></p><ul><li>如果<code>demo</code>用户试图手动在浏览器地址栏中输入访问admin页面的url，将看到如下图所示的“对不起，你没有权限访问该页面！”的提示页面：</li></ul><p><img src="/posts/frontend/keycloak-react-integration-02/permission-denied.png" alt></p><ul><li>而当使用同时具有<code>Product_Role</code>和<code>Admin_Role</code>角色的<code>admin</code>用户登录应用后，将可以同时看到<code>Product</code>和<code>Admin</code>两个菜单项，并且两个页面都可以访问，如下图所示：</li></ul><p><img src="/posts/frontend/keycloak-react-integration-02/admin-role.png" alt></p><h3 id="配置Keycloak"><a href="#配置Keycloak" class="headerlink" title="配置Keycloak"></a>配置Keycloak</h3><p>现在让我们来实现上述的访问控制功能吧。 </p><p>首先，我们需要在keycloak中创建用户及角色，并为每个用户分配适当的角色。 </p><p>在上一篇中我们已经创建了<code>demo</code>用户，现在我们再创建一个<code>admin</code>用户。 </p><p>然后创建角色。在Keycloak的<code>Administration Console</code>中，选择<code>demo</code>realm，选择左侧菜单中的<code>Roles</code>，点击<code>Add Role</code>按钮，分别创建两个角色：<code>Product_Role</code>和<code>Admin_Role</code>，创建后如下图所示： </p><p><img src="/posts/frontend/keycloak-react-integration-02/create-role.png" alt> </p><p>接着我们为创建的两个用户分配角色。 </p><p>选择菜单中的<code>Users</code>，点击<code>View all users</code>，将显示所有用户。 </p><p>选择某个用户，例如<code>admin</code>，然后选择<code>Role Mappings</code>选项卡，为用户分配角色。如下图所示，我们为<code>admin</code>用户同时分配了<code>Product_Role</code>和<code>Admin_Role</code>: </p><p><img src="/posts/frontend/keycloak-react-integration-02/assign-role.png" alt> </p><p>同样的步骤，我们为<code>demo</code>用户只分配<code>Product_Role</code>，为了演示使用demo用户访问admin页面时，显示权限不足的提示页面。</p><h3 id="在React应用中实现访问控制"><a href="#在React应用中实现访问控制" class="headerlink" title="在React应用中实现访问控制"></a>在React应用中实现访问控制</h3><p>接下来，让我们编写代码，在React应用中实现前面所演示的访问控制效果。</p><h4 id="创建访问控制配置文件"><a href="#创建访问控制配置文件" class="headerlink" title="创建访问控制配置文件"></a>创建访问控制配置文件</h4><p>首先，我们在<code>public</code>下创建一个访问控制的配置文件<code>access_config.json</code>，内容如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"/app/product/index"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Product_Role"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"/app/admin/index"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Admin_Role"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>配置文件表明，访问product页面必须要有<code>Product_Role</code>角色，访问admin页面必须要有<code>Admin_Role</code>角色。当然我们也可以配置访问某个页面需要具有多个角色。</p><h4 id="加载配置文件，实现访问控制判断方法"><a href="#加载配置文件，实现访问控制判断方法" class="headerlink" title="加载配置文件，实现访问控制判断方法"></a>加载配置文件，实现访问控制判断方法</h4><p>我们再次回到上一篇创建的<code>src/keycloak.js</code>文件中，为<code>KeycloakClient</code>类实现两个新的方法：</p><ul><li>加载访问控制配置文件的方法：<code>loadAccessConfig()</code></li><li>判断是否可以访问某页面的方法： <code>isAccessable()</code></li></ul><p>首先，在<code>KeycloakClient</code>类中添加读取配置文件的方法：</p><pre class=" language-javascript"><code class="language-javascript">    loadAccessConfig <span class="token operator">=</span> <span class="token punctuation">(</span>configUrl<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> configUrl<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Accept'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> config <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig <span class="token operator">=</span> config            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：在方法中使用了同步Ajax请求下载配置文件。 我们需要在构造函数中调用上面的方法，使得在实例化<code>KeycloakClient</code>对象时加载配置文件：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initialized <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keycloak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keycloak</span><span class="token punctuation">(</span><span class="token string">'/keycloak.json'</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadAccessConfig</span><span class="token punctuation">(</span><span class="token string">'/access_config.json'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>接着，在<code>KeycloakClient</code>中添加判断是否可以访问某页面的方法：</p><pre class=" language-javascript"><code class="language-javascript">    isAccessable <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> requiredRoles <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig<span class="token punctuation">[</span>path<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requiredRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> requiredRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">hasRealmRole</span><span class="token punctuation">(</span>requiredRoles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span></code></pre><p>该方法中，我们根据传入的访问路径，从加载的访问控制配置中查找访问该页面需要具有哪些角色，然后调用keycloak内置的<code>hasRealmRole()</code> 方法逐个判断该用户是否具有所要求的所有角色。一旦该用户没有某个要求的角色，就返回<code>false</code>，表示该用户没有访问该页面的权限。 </p><p>最后<code>src/keycloak.js</code>文件的完整代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Keycloak <span class="token keyword">from</span> <span class="token string">'keycloak-js'</span><span class="token keyword">class</span> <span class="token class-name">KeycloakClient</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initialized <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keycloak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keycloak</span><span class="token punctuation">(</span><span class="token string">'/keycloak.json'</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadAccessConfig</span><span class="token punctuation">(</span><span class="token string">'/access_config.json'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    init <span class="token operator">=</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>onLoad<span class="token punctuation">:</span> <span class="token string">"login-required"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>authenticated <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>initialized <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    loadAccessConfig <span class="token operator">=</span> <span class="token punctuation">(</span>configUrl<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> configUrl<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Accept'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> config <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig <span class="token operator">=</span> config            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    isAccessable <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> requiredRoles <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>accessConfig<span class="token punctuation">[</span>path<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requiredRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> requiredRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">hasRealmRole</span><span class="token punctuation">(</span>requiredRoles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> keycloakClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeycloakClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> keycloakClient</code></pre><h4 id="实现权限不足提示页面"><a href="#实现权限不足提示页面" class="headerlink" title="实现权限不足提示页面"></a>实现权限不足提示页面</h4><p>实现访问控制的核心方法已经实现了，接下来让我们在应用中使用它实现页面的访问控制。 </p><p>在这之前，由于我们需要在用户没有访问某页面的权限时，提示权限不足的页面。因此我们需要先实现一个显示权限不足的新页面。 </p><p>在<code>src/components</code>下新建一个<code>pages</code>目录，在其中新建一个<code>Denied.jsx</code>文件，我们在其中实现一个<code>Denied</code>的React组件，用于显示权限不足的信息，代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Denied</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"denied"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>对不起，你没有权限访问该页面！<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="修改路由，根据权限判断结果进行跳转"><a href="#修改路由，根据权限判断结果进行跳转" class="headerlink" title="修改路由，根据权限判断结果进行跳转"></a>修改路由，根据权限判断结果进行跳转</h4><p>那么，当用户访问某页面时，如何实现根据判断结果实现不同的跳转呢？我们可以修改路由组件的行为来实现。 </p><p>让我们再次回到<code>src/routes/index.js</code>文件中。在上一篇中，我们创建了一个扩展路由组件<code>Route</code>的<code>PropsRoute</code>组件，它实现了将keycloak对象通过props传递到<code>Route</code>的目标组件中（即，component属性指定的组件）。 </p><p>我们可以在该扩展组件的基础之上进一步扩展，加入判断访问权限的逻辑。 </p><p>为了更好的说明组件的含义，我们更改了扩展组件的名字为<code>PrivateRoute</code> ，代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PrivateRoute <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span> path<span class="token punctuation">,</span> component<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> keycloakClient<span class="token punctuation">.</span><span class="token function">isAccessable</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Route             <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>            render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Component<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Route             <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>            render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Denied <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Denied<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>可以看到，我们调用了前面实现的<code>isAccessable()</code> 方法对传入的path进行判断，如果有权限，返回一个渲染目标组件的<code>Route</code>，如果没有权限，则返回渲染<code>Denied</code>组件的Route。 </p><p>然后，我们将路由组件的代码进行修改，使其使用新修改的<code>PrivateRoute</code>组件替代上一篇的<code>PropsRoute</code>组件。 </p><p>修改后的<code>src/routes/index.js</code>完整代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Switch<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> ProductIndex <span class="token keyword">from</span> <span class="token string">'../components/product/ProductIndex'</span><span class="token keyword">import</span> AdminIndex <span class="token keyword">from</span> <span class="token string">'../components/admin/AdminIndex'</span><span class="token keyword">import</span> keycloakClient <span class="token keyword">from</span> <span class="token string">'../keycloak'</span><span class="token keyword">import</span> Denied <span class="token keyword">from</span> <span class="token string">'../components/pages/Denied'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyRouter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>Switch<span class="token operator">></span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Route exact path="/app/product/index" component={ProductIndex}>&lt;/Route> */</span><span class="token punctuation">}</span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Route exact path="/app/admin/index" component={AdminIndex}>&lt;/Route> */</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span>PrivateRoute exact path<span class="token operator">=</span><span class="token string">"/app/product/index"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ProductIndex<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>PrivateRoute exact path<span class="token operator">=</span><span class="token string">"/app/admin/index"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>AdminIndex<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> PrivateRoute <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span> path<span class="token punctuation">,</span> component<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> keycloakClient<span class="token punctuation">.</span><span class="token function">isAccessable</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Route             <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>            render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Component<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Route             <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>            render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Denied <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Denied<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="根据权限判断结果显示不同菜单项"><a href="#根据权限判断结果显示不同菜单项" class="headerlink" title="根据权限判断结果显示不同菜单项"></a>根据权限判断结果显示不同菜单项</h4><p>最后，我们在<code>src/App.js</code>中实现根据权限判断结果，显示不同的菜单项。最后达到只显示有权限访问的页面对应的菜单项。 </p><p>类似上面的扩展路由组件，我们创建一个扩展<code>Link</code>的组件<code>PrivateLink</code> 组件。代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PrivateLink <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>to<span class="token punctuation">:</span> path<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> keycloakClient<span class="token punctuation">.</span><span class="token function">isAccessable</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span>path<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>        <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></code></pre><p>扩展组件中，同时使用了前面提供的<code>isAccessable()</code> 方法判断是否可以访问传入的path，如果可以访问，就返回Link组件。如果不可以访问，就返回空，从而不显示内容。 </p><p>然后，我们把<code>App</code>组件中的<code>Link</code>组件替换为新建的<code>PrivateLink</code> 扩展组件。 </p><p>最后<code>src/App.js</code>的完整代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.png'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Routes <span class="token keyword">from</span> <span class="token string">'./routes'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> keycloakClient <span class="token keyword">from</span> <span class="token string">'./keycloak'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>tokenParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>tokenParsed<span class="token punctuation">.</span>preferred_username    <span class="token punctuation">}</span>    <span class="token keyword">return</span> user  <span class="token punctuation">}</span>  <span class="token function">onLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"App-logo"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>h2<span class="token operator">></span>Welcome to Keycloak<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-navi"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Link to="/app/product/index" className="navi">Product&lt;/Link> */</span><span class="token punctuation">}</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Link to="/app/admin/index" className="navi">Admin&lt;/Link> */</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>PrivateLink to<span class="token operator">=</span><span class="token string">"/app/product/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Product<span class="token operator">&lt;</span><span class="token operator">/</span>PrivateLink<span class="token operator">></span>            <span class="token operator">&lt;</span>PrivateLink to<span class="token operator">=</span><span class="token string">"/app/admin/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Admin<span class="token operator">&lt;</span><span class="token operator">/</span>PrivateLink<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-user-info"</span><span class="token operator">></span>            Login User<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onLogout<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"btn btn-success"</span> <span class="token operator">></span>Logout<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-content"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Routes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Routes<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> PrivateLink <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>to<span class="token punctuation">:</span> path<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> keycloakClient<span class="token punctuation">.</span><span class="token function">isAccessable</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span>path<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>        <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></code></pre><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p>至此，keycloak的配置，以及React中的代码已经全部实现，我们再次启动应用来看看效果吧：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre><p>如果一切顺利，你应该可以看到与本文开始所演示的完全相同的效果。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文介绍了使用<code>keycloak</code>实现基于角色的访问控制功能，这是<code>keycloak</code>提供的最简单的访问控制的方式。 </p><p>实际上，keycloak还提供了更细粒度的访问控制方式，如基于权限（<code>permission</code>）的访问控制，它结合了资源（<code>resource</code>），<code>scope</code>和<code>policy</code>，可以实现更细粒度的访问控制。这是Keycloak提供的授权服务（<code>Authorization Service</code>）的高级功能。我会在后续的文章中介绍此功能。 本文的完整代码请参考<a href="https://github.com/longyg/keycloak-react-example" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keycloak </tag>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keycloak与React集成应用（上篇）：用户登录</title>
      <link href="/posts/frontend/keycloak-react-integration-01.html"/>
      <url>/posts/frontend/keycloak-react-integration-01.html</url>
      
        <content type="html"><![CDATA[<p><code>Keycloak</code>是一个开源的身份和访问管理系统，它可以轻松与任何web应用集成，从而为web应用提供访问控制管理功能。 具体的<code>Keycloak</code>介绍请参见<a href="https://www.keycloak.org/" target="_blank" rel="noopener">官方网站</a>。 本文的目的不是介绍<code>keycloak</code>的原理，而是介绍如何将<code>keycloak</code>与基于<code>React</code>的应用进行集成。 本文将实现一个具体的<code>React</code>应用，然后与<code>keycloak</code>集成，最终实现访问该<code>React</code>应用时的用户登录与验证功能。</p><h3 id="Keycloak安装与配置"><a href="#Keycloak安装与配置" class="headerlink" title="Keycloak安装与配置"></a>Keycloak安装与配置</h3><p><code>Keycloak</code>以独立的服务的方式运行，它通过独立的服务向单个或多个应用提供集中式的服务。因此我们首先需要安装部署<code>Keycloak</code>服务。</p><h4 id="Keycloak安装"><a href="#Keycloak安装" class="headerlink" title="Keycloak安装"></a>Keycloak安装</h4><p>首先在官方网站的<a href="https://www.keycloak.org/downloads.html" target="_blank" rel="noopener">下载页面</a>下载<code>Keycloak</code>的软件包。 </p><p><img src="/posts/frontend/keycloak-react-integration-01/download-keycloak.png" alt> </p><p>下载后解压到某目录，然后打开<code>cmd</code>进入<code>bin</code>目录。 <code>Keycloak</code>支持集群模式和单机模式，我们以单机模式运行<code>Keycloak</code>，运行如下命令：</p><pre class=" language-bash"><code class="language-bash">.\standalone.bat</code></pre><p>如果你看到类似如下的输出，就说明<code>Keycloak</code>成功安装并启动起来了：</p><pre class=" language-bash"><code class="language-bash">22:01:27,605 INFO  <span class="token punctuation">[</span>org.jboss.as<span class="token punctuation">]</span> <span class="token punctuation">(</span>Controller Boot Thread<span class="token punctuation">)</span> WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management22:01:27,605 INFO  <span class="token punctuation">[</span>org.jboss.as<span class="token punctuation">]</span> <span class="token punctuation">(</span>Controller Boot Thread<span class="token punctuation">)</span> WFLYSRV0051: Admin console listening on http://127.0.0.1:999022:01:27,606 INFO  <span class="token punctuation">[</span>org.jboss.as<span class="token punctuation">]</span> <span class="token punctuation">(</span>Controller Boot Thread<span class="token punctuation">)</span> WFLYSRV0025: Keycloak 6.0.1 <span class="token punctuation">(</span>WildFly Core 8.0.0.Final<span class="token punctuation">)</span> started <span class="token keyword">in</span> 24304ms - Started 580 of 842 services <span class="token punctuation">(</span>560 services are lazy, passive or on-demand<span class="token punctuation">)</span></code></pre><p>接下来，我们在浏览器中输入url：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>，打开Keycloak管理界面。 </p><p>首次打开界面时，需要创建一个管理账户。 </p><p>创建好账户后，点击“Administration Console”： </p><p><img src="/posts/frontend/keycloak-react-integration-01/admin-console.png" alt> </p><p>输入用户名密码，点击登录： </p><p><img src="/posts/frontend/keycloak-react-integration-01/login-admin-console.png" alt> </p><p>登入后，进入Keycloak管理控制台首页： </p><p><img src="/posts/frontend/keycloak-react-integration-01/kc-home-page.png" alt></p><h4 id="Keycloak配置"><a href="#Keycloak配置" class="headerlink" title="Keycloak配置"></a>Keycloak配置</h4><p>接下来介绍如何在<code>Keycloak</code>管理控制台中进行配置。 </p><p>首次进入控制台，<code>Keycloak</code>默认有一个名为<code>master</code>的realm。我们需要创建我们自己的realm。例如我们这里创建一个名为<code>demo</code>的realm。 </p><p>接下来创建用户，我们可以创建一个或多个用户，注意创建的用户只能登录用户所在的realm。这里我们创建一个用户<code>demo</code>。 </p><p>创建realm和用户后，我们需要为我们的react应用创建一个client，这里命名为<code>keycloak-react-example</code>。创建client后，还需要设置几个必须的参数，参考下图：</p><p> <img src="/posts/frontend/keycloak-react-integration-01/kc-create-client.png" alt> </p><p> 注意，对于web前端应用，<code>Access Type</code>必须是<code>public</code>。 </p><p> <code>Web Origins</code>虽然不是必须的，但是一般都需要设置，以避免因跨域而无法访问的问题。</p><h3 id="开发React应用"><a href="#开发React应用" class="headerlink" title="开发React应用"></a>开发React应用</h3><p>接下来，我们开发一个简单的React应用。</p><h4 id="应用效果"><a href="#应用效果" class="headerlink" title="应用效果"></a>应用效果</h4><p>首先来看看我们的应用的最终效果吧！ </p><p><img src="/posts/frontend/keycloak-react-integration-01/keycloak-react-app.gif" alt></p><p>应用功能包括：</p><ul><li>每当访问应用时，总是会被导向到用户登录界面，要求输入用户名及密码登录应用。</li><li>登录应用后，会自动重定向到 product 页面。</li><li>点击<code>Product</code>或<code>Admin</code>菜单，可以进入 product 或 admin 页面。</li><li>在 product 或 admin 任何页面，点击<code>Logout</code>按钮，就可以退出登录，会被自动重定向到用户登录页面。</li><li>输入用户名密码再次登录，会默认进入刚才退出时访问的页面。</li></ul><h4 id="功能页面开发"><a href="#功能页面开发" class="headerlink" title="功能页面开发"></a>功能页面开发</h4><p>首先，我们开发功能页面，也就是product和admin页面。我们暂时不集成<code>Keycloak</code>，待功能页面开发好后，再集成keycloak。 </p><p>要开发React应用，首选使用<code>create-react-app</code>脚手架。首先安装<code>create-react-app</code>（前提是你已经安装了npm）：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g create-react-app</code></pre><p>接下来，使用<code>create-react-app</code>脚手架创建我们的应用项目结构：</p><pre class=" language-bash"><code class="language-bash">create-create-app keycloak-react-example</code></pre><p>运行命令后可以帮我们创建一个应用骨架，包括必须的一些目录结构及文件。 我们最终实现的代码结构如下所示：</p><p><img src="/posts/frontend/keycloak-react-integration-01/project-structure.png" alt> </p><p>我们需要首先在根目录下的package.json中添加依赖：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"keycloak-example"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"^16.8.6"</span><span class="token punctuation">,</span>    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^16.8.6"</span><span class="token punctuation">,</span>    <span class="token property">"react-scripts"</span><span class="token operator">:</span> <span class="token string">"0.9.5"</span><span class="token punctuation">,</span>    <span class="token property">"react-router"</span><span class="token operator">:</span> <span class="token string">"5.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"react-router-dom"</span><span class="token operator">:</span> <span class="token string">"5.0.1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-scripts test --env=jsdom"</span><span class="token punctuation">,</span>    <span class="token property">"eject"</span><span class="token operator">:</span> <span class="token string">"react-scripts eject"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建的项目结构中主要包括<code>public</code>和<code>src</code>两个目录，主要的代码都在<code>src</code>目录下。 </p><p><code>public</code>下的<code>index.html</code>是应用的入口html文件。 </p><p><code>src/components</code>下包括product和admin的功能页面。<code>src/images</code>下存放应用使用的图片。<code>src/routes</code>下包含了定义应用导航的代码文件。 </p><p><code>src/index.js</code>是应用的入口js文件，我们首先在里面实现通过React在DOM中渲染我们的应用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Page <span class="token keyword">from</span> <span class="token string">'./Page'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Component <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span>Page<span class="token punctuation">)</span></code></pre><p><code>index.js</code>中使用<code>render</code>方法渲染<code>Page.js</code>中定义的<code>Page</code>组件，<code>Page.js</code>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Page</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>Router<span class="token operator">></span>                <span class="token operator">&lt;</span>Switch<span class="token operator">></span>                    <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/app/product/index"</span> push <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>                    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/app"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>App<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们在<code>Page.js</code>中定义了两个路由，第一个<code>&lt;Route&gt;</code> 表示当我们访问应用根<code>/</code>时，自动重定向到product页面。 第二个<code>&lt;Route&gt;</code>表示会以<code>App.js</code>里定义的<code>App</code>组件渲染任何URL以<code>/app</code>开头的页面。 </p><p><code>App.js</code>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.png'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Routes <span class="token keyword">from</span> <span class="token string">'./routes'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">"demo"</span>    <span class="token keyword">return</span> user  <span class="token punctuation">}</span>  <span class="token function">onLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// To do</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"App-logo"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>h2<span class="token operator">></span>Welcome to Keycloak<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-navi"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/app/product/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Product<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/app/admin/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Admin<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-user-info"</span><span class="token operator">></span>            Login User<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onLogout<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"btn btn-success"</span> <span class="token operator">></span>Logout<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-content"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Routes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Routes<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>App</code>组件实现了我们应用的主页面结构，上面是一个<code>Header</code>，下面是应用的主体内容。 </p><p><code>Header</code>中部显示应用logo，左侧显示导航菜单，右侧显示当前登录用户，以及<code>Logout</code>按钮，这样用户就可以方便的从系统退出登录。</p><blockquote><p><strong>注意</strong>：我们现在还没有最终实现获取用户的<code>getLoginUser()</code>方法，只是简单的返回一个字符串，这样可以保证应用可以正常的运行并显示。 </p><p>类似地，登出系统的<code>onLogout()</code>方法也只是一个空方法，我们目前让它不做任何事情，这样可以保证应用可以正常运行。 </p><p>我们稍后在集成<code>Keycloak</code>时会实现这两个方法。</p></blockquote><p>左侧的导航菜单定义了两个不同的<code>Link</code>，当我们点击某个菜单时，将导航到相应的页面。 </p><p>页面下方的主体内容部分将显示当前选中菜单对应的页面内容，但是我们只有一行简单的代码<code>&lt;Routes&gt;&lt;/Routes&gt;</code> 。让我们看看<code>src/routes/index.js</code>的代码内容：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Switch<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> ProductIndex <span class="token keyword">from</span> <span class="token string">'../components/product/ProductIndex'</span><span class="token keyword">import</span> AdminIndex <span class="token keyword">from</span> <span class="token string">'../components/admin/AdminIndex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyRouter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>Switch<span class="token operator">></span>                <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/app/product/index"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ProductIndex<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>                <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/app/admin/index"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>AdminIndex<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，我们在这里对导航菜单的路由进行了定义。两个<code>Link</code>分别对应不同的组件，组件的内容将在主体部分显示。 </p><p>下面是<code>ProductIndex</code>和<code>AdminIndex</code>组件的代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> product <span class="token keyword">from</span> <span class="token string">'../../images/product.jpg'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ProductIndex</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"product"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>Product show<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">}</span> width<span class="token operator">=</span><span class="token string">"50%"</span> alt<span class="token operator">=</span><span class="token string">"product"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> admin <span class="token keyword">from</span> <span class="token string">'../../images/admin.jpg'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">AdminIndex</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"admin"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>Administration console<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>admin<span class="token punctuation">}</span> width<span class="token operator">=</span><span class="token string">"50%"</span> alt<span class="token operator">=</span><span class="token string">"admin"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们只是为了演示不同菜单对应不同页面，而页面中并没有什么实际的内容。 </p><p>最后，应用用到的图片我们放在<code>src/images</code>下。各个页面用到的CSS代码放在<code>src/App.css</code>中。 </p><p>现在我们的应用已经实现了，我们可以运行它来先看看效果：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre><p>启动后，会默认打开浏览器并访问：<a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>。不出意外的话，浏览器会马上重定向到<a href="http://localhost:3000/#/app/product/index" target="_blank" rel="noopener">http://localhost:3000/#/app/product/index</a>，且可以正常看到我们的应用页面如下： </p><p><img src="/posts/frontend/keycloak-react-integration-01/product-index.png" alt></p><h3 id="集成Keycloak"><a href="#集成Keycloak" class="headerlink" title="集成Keycloak"></a>集成Keycloak</h3><p>我们的应用功能页面已经实现，接下来我们集成<code>Keycloak</code>实现用户登录登出功能。</p><h4 id="引入keycloak-js"><a href="#引入keycloak-js" class="headerlink" title="引入keycloak-js"></a>引入keycloak-js</h4><p>首先我们需要在<code>package.json</code>中引入<code>keycloak</code>的依赖：</p><pre class=" language-json"><code class="language-json">  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"^16.8.6"</span><span class="token punctuation">,</span>    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^16.8.6"</span><span class="token punctuation">,</span>    <span class="token property">"react-scripts"</span><span class="token operator">:</span> <span class="token string">"0.9.5"</span><span class="token punctuation">,</span>    <span class="token property">"keycloak-js"</span><span class="token operator">:</span> <span class="token string">"6.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"react-router"</span><span class="token operator">:</span> <span class="token string">"5.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"react-router-dom"</span><span class="token operator">:</span> <span class="token string">"5.0.1"</span>  <span class="token punctuation">}</span></code></pre><p>运行如下命令安装<code>keycloak</code>依赖包：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre><h4 id="导入keycloak配置"><a href="#导入keycloak配置" class="headerlink" title="导入keycloak配置"></a>导入keycloak配置</h4><p>接下来，我们需要回到<code>Keycloak</code>的<code>Administration Console</code>下载keycloak配置文件。 </p><p>登录<code>Administration Console</code>（注意：这里要使用第一次创建的管理帐号），点击左侧菜单中的<code>Clients</code>，选择我们创建的client：<code>keycloak-react-example</code>，点击<code>Installation</code>选项卡，在<code>Format Option</code>下拉选项中选择<code>Keycloak OIDC JSON</code>，点击出现的<code>Download</code>按钮，下载<code>keycloak.json</code>文件，内容如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"realm"</span><span class="token operator">:</span> <span class="token string">"demo"</span><span class="token punctuation">,</span>  <span class="token property">"auth-server-url"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/auth"</span><span class="token punctuation">,</span>  <span class="token property">"ssl-required"</span><span class="token operator">:</span> <span class="token string">"external"</span><span class="token punctuation">,</span>  <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"keycloak-react-example"</span><span class="token punctuation">,</span>  <span class="token property">"public-client"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"confidential-port"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre><p>最后，把下载的<code>keycloak.json</code>拷贝到应用的<code>public</code>目录下。</p><h4 id="实现keycloak初始化"><a href="#实现keycloak初始化" class="headerlink" title="实现keycloak初始化"></a>实现keycloak初始化</h4><p>接下来，我们在<code>src</code>下创建<code>keycloak.js</code>文件，在其中实现keycloak的初始化等相关代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Keycloak <span class="token keyword">from</span> <span class="token string">'keycloak-js'</span><span class="token keyword">class</span> <span class="token class-name">KeycloakClient</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initialized <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keycloak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keycloak</span><span class="token punctuation">(</span><span class="token string">'/keycloak.json'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    init <span class="token operator">=</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>onLoad<span class="token punctuation">:</span> <span class="token string">"login-required"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>authenticated <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>initialized <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keycloak<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> keycloakClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeycloakClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> keycloakClient</code></pre><p>我们首先定义了一个<code>KeycloakClient</code>类来包装keycloak相关的一些对象和方法。 类构造器函数中初始化两个属性：</p><ul><li><code>initialized</code> 表示keycloak是否已初始化。</li><li><code>keycloak</code> 对象是使用Keycloak库提供的类创建的对象，我们需要传递前面下载的keycloak配置文件作为其构造函数的参数。<code>keycloak</code> 对象中包含了很多属性和方法，具体内容可以查阅Keycloak官方文档。我们暂时只会用到其中的<code>init</code> 方法。</li></ul><p>接着我们定义了<code>init</code>方法，传入了一个callback函数作为参数。方法中调用了前面创建的keycloak对象的init方法进行初始化，因为我们传入了<code>{onLoad: &quot;login-required&quot;}</code> 参数，keycloak将检查是否已登录，如果没有，keycloak会自动重定向到登录页面，等待用户登录。当用户输入正确的用户名及密码登录成功后，就会触发<code>success()</code> 里的回调函数。我们在success回调函数里设置initialized属性，并执行callback函数。</p><h4 id="修改src-index-js"><a href="#修改src-index-js" class="headerlink" title="修改src/index.js"></a>修改src/index.js</h4><p>现在，我们需要修改<code>src/index.js</code>，修改后<code>src/index.js</code>如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Page <span class="token keyword">from</span> <span class="token string">'./Page'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> keycloakClient <span class="token keyword">from</span> <span class="token string">'./keycloak'</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">,</span> keycloak<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Component keycloak<span class="token operator">=</span><span class="token punctuation">{</span>keycloak<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keycloakClient<span class="token punctuation">.</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>  keycloakClient<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">(</span>keycloak<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span>Page<span class="token punctuation">,</span> keycloak<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>我们首先引入<code>keycloak.js</code>，然后调用初始化函数，并在callback函数里调用<code>render(Page, keycloak)</code> ，将初始化后的keycloak对象作为参数传递给render的组件：<code>Page</code>。这样可以保证只有在keycloak初始化成功后才渲染应用组件。 </p><p>可以看到我们将keycloak对象作为props传给了Page组件：<code>&lt;Component keycloak={keycloak} /&gt;</code> 。 </p><p>我们需要这么做，因为我们希望把这个keycloak对象通过props传递给<code>App</code>子组件，然后从中取出当前的登录用户名进行显示，以及调用keycloak对象的<code>logout</code>方法实现退出登录。</p><h4 id="修改Page组件"><a href="#修改Page组件" class="headerlink" title="修改Page组件"></a>修改Page组件</h4><p>现在，我们只是把keycloak作为<code>Page</code>的props传递给了<code>Page</code>组件，但<code>App</code>组件还无法获取它。 接下来，我们将通过改造<code>Page</code>组件，实现将keycloak从<code>Page</code>组件传递给<code>App</code>子组件。 </p><p>改造后的<code>src/Page.js</code>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Page</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>Router<span class="token operator">></span>                <span class="token operator">&lt;</span>Switch<span class="token operator">></span>                    <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/app/product/index"</span> push <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>                    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Route path="/app" component={App}>&lt;/Route> */</span><span class="token punctuation">}</span>                    <span class="token operator">&lt;</span>PropsRoute path<span class="token operator">=</span><span class="token string">"/app"</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> component<span class="token operator">=</span><span class="token punctuation">{</span>App<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>PropsRoute<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> PropsRoute <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>component<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Route             <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>            render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Component<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>可以看到我们注释掉了<code>&lt;Route path=&quot;/app&quot; component={App}&gt;&lt;/Route&gt;</code> ，使用一行新的代码替换了它：<code>&lt;PropsRoute path=&quot;/app&quot; {...this.props} component={App}&gt;&lt;/PropsRoute&gt;</code> </p><p>我们使用了自定义的<code>PropsRoute</code>组件，它扩展了<code>Route</code>。它可以把所有props传递给component指定的组件。</p><h4 id="修改App组件"><a href="#修改App组件" class="headerlink" title="修改App组件"></a>修改App组件</h4><p>现在我们可以在<code>App</code>组件中获取<code>Page</code>的props了，而我们在<code>index.js</code>里把keycloak对象传递给了<code>Page</code>组件，因此我们可以在<code>App</code>组件获取keycloak对象了。 </p><p>最后，我们可以改造<code>src/App.js</code>，实现之前的两个方法：<code>getLoginUser()</code>和<code>onLogout()</code>。 </p><p>改造后的代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.png'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Routes <span class="token keyword">from</span> <span class="token string">'./routes'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>tokenParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>tokenParsed<span class="token punctuation">.</span>preferred_username    <span class="token punctuation">}</span>    <span class="token keyword">return</span> user  <span class="token punctuation">}</span>  <span class="token function">onLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-header"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"App-logo"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>h2<span class="token operator">></span>Welcome to Keycloak<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-navi"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/app/product/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Product<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/app/admin/index"</span> className<span class="token operator">=</span><span class="token string">"navi"</span><span class="token operator">></span>Admin<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-user-info"</span><span class="token operator">></span>            Login User<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onLogout<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"btn btn-success"</span> <span class="token operator">></span>Logout<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App-content"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Routes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Routes<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，我们从props对象中获取了keycloak对象，并从keycloak对象中获取了登录用户名<code>keycloak.tokenParsed.preferred_username</code> 。在<code>onLogout()</code>方法中，我们使用了keycloak的自带logout方法<code>keycloak.logout()</code> 。</p><h3 id="测试应用"><a href="#测试应用" class="headerlink" title="测试应用"></a>测试应用</h3><p>现在，我们可以再次启动应用：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre><p>如果一切顺利的话，你将看到与我们前面所展示的应用效果完全一样的效果。 本文完整代码请参考<a href="https://github.com/longyg/keycloak-react-example" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keycloak </tag>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据处理速记手册</title>
      <link href="/posts/data-analysis/data-handle-manual.html"/>
      <url>/posts/data-analysis/data-handle-manual.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>持续更新中……</strong></p></blockquote><p>本文记录机器学习中常见的处理数据的方法，作为一个速查手册。包含了<code>Pandas</code>，<code>Numpy</code>，<code>Matplotlib</code>等各种库的实用方法。</p><h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h3><h4 id="1-查看某列的唯一取值"><a href="#1-查看某列的唯一取值" class="headerlink" title="1.  查看某列的唯一取值"></a>1.  查看某列的唯一取值</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-统计数据集的空值列"><a href="#2-统计数据集的空值列" class="headerlink" title="2. 统计数据集的空值列"></a>2. 统计数据集的空值列</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>或</p><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="3-统计指定列包含空值的行数"><a href="#3-统计指定列包含空值的行数" class="headerlink" title="3. 统计指定列包含空值的行数"></a>3. 统计指定列包含空值的行数</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="4-统计每列值不为空的行数"><a href="#4-统计每列值不为空的行数" class="headerlink" title="4. 统计每列值不为空的行数"></a>4. 统计每列值不为空的行数</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="5-删除某列"><a href="#5-删除某列" class="headerlink" title="5. 删除某列"></a>5. 删除某列</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'column'</span><span class="token punctuation">)</span></code></pre><h4 id="6-获取某列的值为空的所有数据"><a href="#6-获取某列的值为空的所有数据" class="headerlink" title="6. 获取某列的值为空的所有数据"></a>6. 获取某列的值为空的所有数据</h4><pre class=" language-python"><code class="language-python">tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h4 id="7-获取某列的值等于指定值的所有数据"><a href="#7-获取某列的值等于指定值的所有数据" class="headerlink" title="7. 获取某列的值等于指定值的所有数据"></a>7. 获取某列的值等于指定值的所有数据</h4><pre class=" language-python"><code class="language-python">tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'value'</span><span class="token punctuation">]</span></code></pre><h4 id="8-获取空值行，即任意列包含空值的行"><a href="#8-获取空值行，即任意列包含空值的行" class="headerlink" title="8. 获取空值行，即任意列包含空值的行"></a>8. 获取空值行，即任意列包含空值的行</h4><pre class=" language-python"><code class="language-python">tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">.</span>any<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>或</p><pre class=" language-python"><code class="language-python">tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">]</span></code></pre><h4 id="9-获取指定列的空值行"><a href="#9-获取指定列的空值行" class="headerlink" title="9. 获取指定列的空值行"></a>9. 获取指定列的空值行</h4><pre class=" language-python"><code class="language-python">tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">]</span></code></pre><h4 id="10-为某列的空值填补数据"><a href="#10-为某列的空值填补数据" class="headerlink" title="10. 为某列的空值填补数据"></a>10. 为某列的空值填补数据</h4><pre class=" language-python"><code class="language-python">data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'column'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span></code></pre><h4 id="11-删除空值行"><a href="#11-删除空值行" class="headerlink" title="11. 删除空值行"></a>11. 删除空值行</h4><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《机器学习实战》读书笔记之一：k-近邻算法原理与代码实现详解</title>
      <link href="/posts/ml/mlp-1-knn.html"/>
      <url>/posts/ml/mlp-1-knn.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>本系列文章是学习《机器学习实战》一书的读书笔记，并非按原文照抄，而是在理解原书的基础上融入了本人个人理解。同时，原书代码是基于Python2实现的，而本系列文章所有代码是用Python3实现的，因此代码与原书也会稍有不同。如果你使用本系列文章的代码，请一定在Python3下运行，否则你会遇到意想不到的问题。 </p><p>此文是《机器学习实战》的读书笔记的第一篇，介绍该书中讲解的第一个机器学习算法：<code>k-近邻算法</code>，也称<code>kNN</code>（k-NearestNeighbor的缩写）算法。</p><h3 id="二、算法原理"><a href="#二、算法原理" class="headerlink" title="二、算法原理"></a>二、算法原理</h3><p>将输入数据的每个特征数据与训练样本集对应的特征数据进行比较，从而提取出样本集中特征最相似（即最邻近）的k个数据，将这k个数据中比例最高的分类标签作为输入数据的分类标签。 由于每个训练样本数据都是有标签的，所以<code>kNN</code>算法是监督学习的一种算法。</p><h4 id="1-举例说明"><a href="#1-举例说明" class="headerlink" title="1. 举例说明"></a>1. 举例说明</h4><p>假设有一组电影分类的样本数据集，根据电影中打斗镜头数和接吻镜头数的不同，被区分为动作片和爱情片。 </p><p>有如下7部电影样本数据，其中6部已知类型，1部未知类型。我们希望从这6部电影中找到某种规律，从而预测未知类型的“电影7”属于什么类型。</p><table><thead><tr><th>电影名称</th><th>打斗镜头数</th><th>接吻镜头数</th><th>电影类型</th></tr></thead><tbody><tr><td>电影1</td><td>3</td><td>104</td><td>爱情片</td></tr><tr><td>电影2</td><td>2</td><td>100</td><td>爱情片</td></tr><tr><td>电影3</td><td>1</td><td>81</td><td>爱情片</td></tr><tr><td>电影4</td><td>101</td><td>10</td><td>动作片</td></tr><tr><td>电影5</td><td>99</td><td>5</td><td>动作片</td></tr><tr><td>电影6</td><td>98</td><td>2</td><td>动作片</td></tr><tr><td>电影7</td><td>18</td><td>90</td><td>？</td></tr></tbody></table><p>将上面样本数据在图中表示出来： </p><p>完整代码在<a href="https://github.com/longyg/Machine-Learning-Practice/blob/master/kNN/showDataSet.py" target="_blank" rel="noopener">这里</a>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">)</span>colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token operator">=</span>colors<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'打斗镜头数'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"接吻镜头数"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FangSong'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a href="http://wx2.sinaimg.cn/mw690/bd7db87egy1fsvwj6chebj20hs0d50st.jpg" target="_blank" rel="noopener"><img src="http://wx2.sinaimg.cn/mw690/bd7db87egy1fsvwj6chebj20hs0d50st.jpg" alt></a> </p><p>图中6个黑色的点表示上面样本数据集中的6部已知类型的电影，其中3部爱情片，3部动作片。红色的点表示我们将要预测的未知类型的“电影7”。 </p><p>根据<code>kNN</code>算法原理，我们需要首先计算出图中红色点与所有黑色点的距离。大家都还记得计算两个点之间的距离公式吧。 如果点1记为（$x_1$，$y_1$），点2记为（$x_2$，$y_2$），那么点1与点2的距离为： </p><p>$$\sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^{2}}$$ </p><p>通过距离公式计算得到所有6个黑色点到红色点的距离如下表：</p><table><thead><tr><th>电影名称</th><th>与电影7的距离计算公式</th><th>与电影7的距离</th></tr></thead><tbody><tr><td>电影1</td><td>$\sqrt{(3-18)^{2} + (104-90)^{2}}$</td><td>20.5</td></tr><tr><td>电影2</td><td>$\sqrt{(2-18)^{2} + (100-90)^{2}}$</td><td>18.7</td></tr><tr><td>电影3</td><td>$\sqrt{(1-18)^{2} + (81-90)^{2}}$</td><td>19.2</td></tr><tr><td>电影4</td><td>$\sqrt{(101-18)^{2} + (10-90)^{2}}$</td><td>115.3</td></tr><tr><td>电影5</td><td>$\sqrt{(99-18)^{2} + (5-90)^{2}}$</td><td>117.4</td></tr><tr><td>电影6</td><td>$\sqrt{(98-18)^{2} + (2-90)^{2}}$</td><td>118.9</td></tr></tbody></table><p>按照距离递增排序，可以找到k个距离最近的电影。 假设<code>k=3</code>，那么距离最近的3部电影是<code>电影2</code>，<code>电影3</code>和<code>电影1</code>。从输入数据集中知道，这三部电影都是爱情片，因此我们判定<code>电影7</code>是爱情片。 注意，<code>kNN</code>算法是按照距离最近的<code>k</code>个数据的类型来决定未知数据类型的。如果<code>k</code>个距离最近的数据不是唯一类型，将把<code>k</code>个数据中比例最高的类型作为未知数据的类型。 例如，如果我们把k设为4，得到距离最近的4部电影分别是<code>电影2</code>，<code>电影3</code>，<code>电影1</code>和<code>电影4</code>。这4部电影中，其中有三部爱情片，比例是75%，只有一部是动作片，比例是25%。因此我们判定未知电影还是爱情片。</p><h3 id="三、算法实现"><a href="#三、算法实现" class="headerlink" title="三、算法实现"></a>三、算法实现</h3><p>根据前面的算法原理以及例子，我们将k-近邻算法用Python实现。实现代码中主要进行以下操作：</p><ol><li>计算已知类别数据集中每个点与未知点的距离</li><li>按照距离递增排序</li><li>选取与未知点距离最小的k个点</li><li>确定前k个点中所有类别的比例，</li><li>返回前k个点比例最高的类别，作为未知点的预测分类。</li></ol><h4 id="1-Python3代码实现"><a href="#1-Python3代码实现" class="headerlink" title="1. Python3代码实现"></a>1. Python3代码实现</h4><p>创建<code>knn.py</code>文件并输入如下代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> operator<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">classifier</span><span class="token punctuation">(</span>inX<span class="token punctuation">,</span> dataSet<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    dataSetSize <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    diffMat <span class="token operator">=</span> tile<span class="token punctuation">(</span>inX<span class="token punctuation">,</span> <span class="token punctuation">(</span>dataSetSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> dataSet    sqDiffMat <span class="token operator">=</span> diffMat <span class="token operator">**</span> <span class="token number">2</span>    sqDistances <span class="token operator">=</span> sqDiffMat<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    distances <span class="token operator">=</span> sqDistances <span class="token operator">**</span> <span class="token number">0.5</span>    sortedDistIndicies <span class="token operator">=</span> distances<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span>    classCount <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        voteIlabel <span class="token operator">=</span> labels<span class="token punctuation">[</span>sortedDistIndicies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        classCount<span class="token punctuation">[</span>voteIlabel<span class="token punctuation">]</span> <span class="token operator">=</span> classCount<span class="token punctuation">.</span>get<span class="token punctuation">(</span>voteIlabel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    sortedClassCount <span class="token operator">=</span> sorted<span class="token punctuation">(</span>classCount<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key <span class="token operator">=</span> operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sortedClassCount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">createDataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dataSet <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dataSet<span class="token punctuation">,</span> labels<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    dataSet<span class="token punctuation">,</span> labels <span class="token operator">=</span> createDataSet<span class="token punctuation">(</span><span class="token punctuation">)</span>    input <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    k <span class="token operator">=</span> <span class="token number">4</span>    output <span class="token operator">=</span> classifier<span class="token punctuation">(</span>input<span class="token punctuation">,</span> dataSet<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> k<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span></code></pre><h4 id="2-运行代码"><a href="#2-运行代码" class="headerlink" title="2. 运行代码"></a>2. 运行代码</h4><p>在命令行当前目录下执行上面python脚本，并将未知电影的打斗镜头数和接吻镜头数作为参数传递给脚本，结果将输出如下：</p><pre class=" language-bash"><code class="language-bash">C:\tmp<span class="token operator">></span> knn.py 18 90爱情片</code></pre><p>可见，上面的代码输出未知电影为“爱情片”，结果与我们之前推导的结果完全一致。 现在我们可以用这个程序来预测任意的输入数据了，例如：</p><pre class=" language-bash"><code class="language-bash">C:\tmp<span class="token operator">></span> knn.py 10 100爱情片C:\tmp<span class="token operator">></span> knn.py 90 10动作片</code></pre><p>从<a href="https://github.com/longyg/Machine-Learning-Practice/blob/master/kNN/knn.py" target="_blank" rel="noopener">这里下载</a><code>knn.py</code>的完整代码。</p><h4 id="3-代码解析"><a href="#3-代码解析" class="headerlink" title="3. 代码解析"></a>3. 代码解析</h4><p>程序首先导入依赖模块，本算法将用到最重要的<code>numpy</code>，以及<code>operator</code>和<code>sys</code>模块，因此将他们导入。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> operator<span class="token keyword">import</span> sys</code></pre><p>上面的核心代码在分类器函数<code>classifier()</code>中，有4个输入参数，分别为：</p><ul><li><code>inX</code>: 输入数据，将要预测的数据，用数组表示，如[18, 90]</li><li><code>dataSet</code>: 训练数据集，即已知类型的数据，用numpy的矩阵表示</li><li><code>labels</code>: 训练数据集的分类，用数组表示，数组中每一个值表示<code>dataSet</code>中对应的数据的分类。</li><li><code>k</code>：k-近邻算法的k值</li></ul><p><code>classifier()</code>函数第一行获取<code>dataSet</code>数据集的数据个数，使用了numpy数组的<code>shape</code>属性。<code>dataSet</code>是传入的参数，它是由<code>createDataSet()</code>函数创建的numpy数组（二维矩阵）:</p><pre class=" language-python"><code class="language-python">dataSet <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span>  3 104<span class="token punctuation">]</span> <span class="token punctuation">[</span>  2 100<span class="token punctuation">]</span> <span class="token punctuation">[</span>  1  81<span class="token punctuation">]</span> <span class="token punctuation">[</span>101  10<span class="token punctuation">]</span> <span class="token punctuation">[</span> 99   5<span class="token punctuation">]</span> <span class="token punctuation">[</span> 98   2<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>numpy的<code>array()</code>函数可以通过传入一个python标准的list来创建一个numpy数组，numpy数组可以是多维的，对于二维数组也可称为矩阵。而我们的输入数据集<code>dataSet</code>就是一个二维数组，即是一个6x2的矩阵，6表示总共有6个数据样本，2表示每个数据样本有2列，即2个特征（打斗镜头数和接吻镜头数）。所以我们的数据集<code>dataSet</code>是一个6行2列的矩阵。</p><p><code>dataSet.shape</code>是numpy提供的，可以获取numpy数组的维数，因为dataSet是一个6行2列的矩阵，因此dataSet.shape输出如下：</p><pre class=" language-python"><code class="language-python">dataSet<span class="token punctuation">.</span>shape</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>6, 2<span class="token punctuation">)</span></code></pre><p>而<code>classifier()</code>函数第一行调用<code>dataSet.shape[0]</code>，表示返回第一维的大小：</p><pre class=" language-python"><code class="language-python">dataSetSize <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dataSetSize<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">6</code></pre><p><code>classifier()</code>函数第二行使用了numpy的<code>tile()</code>函数，该函数原型为<code>numpy.tile(A,reps)</code>，接收两个参数，表示把A根据reps重复输出。请参见<a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.tile.html" target="_blank" rel="noopener">numpy.tile</a>对该函数的详细介绍。 </p><p><code>classifier()</code>函数中先按如下调用<code>tile()</code>函数：</p><pre class=" language-python"><code class="language-python">tile<span class="token punctuation">(</span>inX<span class="token punctuation">,</span> <span class="token punctuation">(</span>dataSetSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>第一个参数是由命令行输入的参数构成的Python标准list:</p><pre class=" language-python"><code class="language-python">input <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>假如输入18, 90，则input为：</p><pre class=" language-python"><code class="language-python">inX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>inX<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>18, 91<span class="token punctuation">]</span></code></pre><p>我们先看看<code>tile(inX, (dataSetSize, 1))</code>输出长什么样子：</p><pre class=" language-python"><code class="language-python">tmpMat <span class="token operator">=</span> tile<span class="token punctuation">(</span>inX<span class="token punctuation">,</span> <span class="token punctuation">(</span>dataSetSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tmpMat<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span>18 91<span class="token punctuation">]</span> <span class="token punctuation">[</span>18 91<span class="token punctuation">]</span> <span class="token punctuation">[</span>18 91<span class="token punctuation">]</span> <span class="token punctuation">[</span>18 91<span class="token punctuation">]</span> <span class="token punctuation">[</span>18 91<span class="token punctuation">]</span> <span class="token punctuation">[</span>18 91<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>可以看到，<code>tile()</code>函数将输入的list在行方向上重复了6次，列方向上1次，从而变成了一个6行2列的矩阵。 </p><p>接下来，用新构造的矩阵与数据集<code>dataSet</code>做减法。矩阵的减法大家都还记得吧，就是对应位置的数值做减法，因此得到相减之后的矩阵<code>diffMat</code>如下。</p><pre class=" language-python"><code class="language-python">diffMat <span class="token operator">=</span> tmpMat <span class="token operator">-</span> dataSet<span class="token keyword">print</span><span class="token punctuation">(</span>diffMat<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> 15 -13<span class="token punctuation">]</span> <span class="token punctuation">[</span> 16  -9<span class="token punctuation">]</span> <span class="token punctuation">[</span> 17  10<span class="token punctuation">]</span> <span class="token punctuation">[</span>-83  81<span class="token punctuation">]</span> <span class="token punctuation">[</span>-81  86<span class="token punctuation">]</span> <span class="token punctuation">[</span>-80  89<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>由于矩阵减法要求两个矩阵具有相同维数，因此我们也可以理解为什么需要先用<code>tile()</code>函数构造一个与<code>dataSet</code>相同维数的矩阵了吧。 接下来，对<code>diffMat</code>做平方运算，也就是对<code>diffMat</code>矩阵的每一个数做平方运算，得到<code>sqDiffMat</code>如下：</p><pre class=" language-python"><code class="language-python">sqDiffMat <span class="token operator">=</span> diffMat<span class="token operator">**</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>sqDiffMat<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> 225  169<span class="token punctuation">]</span> <span class="token punctuation">[</span> 256   81<span class="token punctuation">]</span> <span class="token punctuation">[</span> 289  100<span class="token punctuation">]</span> <span class="token punctuation">[</span>6889 6561<span class="token punctuation">]</span> <span class="token punctuation">[</span>6561 7396<span class="token punctuation">]</span> <span class="token punctuation">[</span>6400 7921<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>接下来，对<code>sqDiffMat</code>矩阵求和。这里使用了numpy的<code>sum()</code>函数，请参见<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html" target="_blank" rel="noopener">numpy.sum</a>对该函数的详细介绍。 </p><p><code>sum()</code>函数的<code>axis</code>参数指定对哪一维数据求和，如果不指定<code>axis</code>，将对整个矩阵所有数据求和。<code>axis=0</code>表示对矩阵的第一维数据求和，对于上面的二维矩阵，就是对每一列求和。<code>axis=1</code>表示将矩阵的第二维数据求和，对于上面的二维矩阵，也就是对每一行求和，比如第一行的两个数相加得到第一个值，225 + 169 = 394，以此类推对所有行求和，最后得到一个数组如下：</p><pre class=" language-python"><code class="language-python">sqDistances <span class="token operator">=</span> sqDiffMat<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sqDistances<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>  394   337   389 13450 13957 14321<span class="token punctuation">]</span></code></pre><p>接下来对求和后的数组<code>sqDistances</code>求平方根，得到所有点与未知点的距离：</p><pre class=" language-python"><code class="language-python">distances <span class="token operator">=</span> sqDistances<span class="token operator">**</span><span class="token number">0.5</span><span class="token keyword">print</span><span class="token punctuation">(</span>distances<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span> 19.84943324  18.35755975  19.72308292 115.97413505 118.13974776 119.67038063<span class="token punctuation">]</span></code></pre><p>至此，我们已经求出了数据集<code>dataSet</code>中所有数据与输入数据之间的距离，<code>distances</code>数组中的每一个数就是<code>dataSet</code>中每一组数据与输入数据的距离。 </p><p>可以看到，我们使用numpy的数组操作，代码非常简单，一次性可以求出所有数据到输入数据的距离，而不用通过遍历来求每个数据到输入数据的距离。 </p><p>接下来，对上面求出来的距离进行排序。首先使用numpy的<code>argsort()</code>函数对distances排序，这个函数返回数组数值从小到大的索引值：</p><pre class=" language-python"><code class="language-python">sortedDistIndicies <span class="token operator">=</span> distances<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sortedDistIndicies<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>1 2 0 3 4 5<span class="token punctuation">]</span></code></pre><p>从上面输出可以看出，索引为1（也就是数组的第2个，因为索引是从0开始的，）的数值最小，排在第一位，我们回头去看看distances数组，确实是数组的第2个数最小，为<code>18.35755975</code>。索引为2（数组的第3个数）的数值倒数第二小，排在第二位，数值为<code>19.72308292</code>。以此类推，可以得到上面相同的输出，从而也证明了<code>argsort()</code>函数的正确性。 </p><p>接下来，程序通过for循环来找出距离最近的前k个数的类别，并统计每种类别的个数。 </p><p>本程序中，k被设置为固定值4，所以程序只需要循环4次对前面已经排好序的数组进行统计。而labels是<code>createDataSet()</code>函数设置的，对应着dataSet中每组数组的类型。</p><pre class=" language-python"><code class="language-python">k <span class="token operator">=</span> <span class="token number">4</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'爱情片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">,</span> <span class="token string">'动作片'</span><span class="token punctuation">]</span></code></pre><p>程序定义了一个集合<code>classCount</code>用于存放统计结果。每次循环先获取当前的类型，再对这个类型进行累加，最后将统计结果保存到集合classCount中。</p><pre class=" language-python"><code class="language-python">classCount <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>    voteIlabel <span class="token operator">=</span> labels<span class="token punctuation">[</span>sortedDistIndicies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    classCount<span class="token punctuation">[</span>voteIlabel<span class="token punctuation">]</span> <span class="token operator">=</span> classCount<span class="token punctuation">.</span>get<span class="token punctuation">(</span>voteIlabel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>我们打印<code>classCount</code>将得到如下输出：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>classCount<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">'爱情片'</span><span class="token keyword">:</span> 3, <span class="token string">'动作片'</span><span class="token keyword">:</span> 1<span class="token punctuation">}</span></code></pre><p>从输出可以看出，经过统计后，前k（也就是4）个距离最近的数据中，类型为动作片的个数为1，类型为爱情片的个数为3。 </p><p>最后，程序对<code>classCount</code>集合进行排序，按照集合value值从高到低排序，得到一个排好序的tuple列表。这里用到了Python内置的<code>sorted</code>函数。请参见<a href="https://www.cnblogs.com/brad1994/p/6697196.html" target="_blank" rel="noopener">Python 内置函数sorted()在高级用法</a></p><pre class=" language-python"><code class="language-python">sortedClassCount <span class="token operator">=</span> sorted<span class="token punctuation">(</span>classCount<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>sortedClassCount<span class="token punctuation">)</span> </code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'爱情片'</span>, 3<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'动作片'</span>, 1<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>最后我们只需要返回排好序的tuple列表的第一个，则得到<code>tuple(&#39;爱情片&#39;,3)</code>，再返回这个tuple的第一个，则得到程序预测的结果类型。</p><pre class=" language-python"><code class="language-python">type <span class="token operator">=</span> sortedClassCount<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">爱情片</code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建solo个人博客网站</title>
      <link href="/posts/frontend/build-solo-blog.html"/>
      <url>/posts/frontend/build-solo-blog.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很久就想搭建一个自己的专属博客网站，用来记录与分享一些技术相关的文章，算做一个备忘录，以便把自己所学进行系统梳理，整理成文，方便以后回顾与巩固。本文记录了我从零搭建该博客网站，从购买服务器，到配置服务器，再到完成个人博客网站的搭建，总共两小时完成。 </p><p>要成功搭建一个网站，需要完成以下几个主要步骤： </p><ol><li><p>购买服务器 </p></li><li><p>购买域名及备案 </p></li><li><p>安装依赖软件 </p></li><li><p>安装博客程序 </p></li><li><p>登录博客后台设置网站信息 </p></li></ol><p>本文接下来将依次详细介绍每一个步骤。</p><h3 id="1-购买服务器"><a href="#1-购买服务器" class="headerlink" title="1. 购买服务器"></a>1. 购买服务器</h3><p>我购买的阿里云服务器ECS，操作系统镜像选择的Ubuntu系统。以前也没有使用过其他的服务器，没法比较优劣。想来阿里云不会差，毕竟是大厂的。 </p><p>点击<a href="https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=g89o8zwv" target="_blank" rel="noopener">这里</a>去阿里云官网上选择一款合适的服务器吧。购买后，登录阿里云管理控制台，进入<code>云服务器ECS</code>就可以看到你的服务器实例。实例会自动启动，几分钟就运行起来了。当你看到状态是运行中，表明已经启动成功了。你也可以看到这个实例的公网IP，你可以用远程SSH工具登录到这个IP进行服务器管理。 </p><p>另外，很重要很重要的是，你需要添加安全组规则，就是添加外部可以访问的端口。默认只开启了<code>22</code>端口。对于搭建网站，你必须要开通<code>80</code>端口，否则网站将无法访问。你可以开通其他端口，比如<code>MySQL</code>的端口，以便以后远程登录数据库查看数据。</p><h3 id="2-购买域名与备案"><a href="#2-购买域名与备案" class="headerlink" title="2. 购买域名与备案"></a>2. 购买域名与备案</h3><p>服务器购买好后，你需要选择一个域名。这个不用多说，去阿里云旗下<a href="https://wanwang.aliyun.com/?spm=5176.8142029.388261.293.5e1f6d3exjjxUP" target="_blank" rel="noopener">万网</a>购买一个。 </p><p>购买后，你需要进行备案。备案对于中国大陆的服务器是必须的，否则就算你域名解析成功了，也是会被和谐掉的，所以去<a href="https://beian.aliyun.com/?spm=5176.100251.0.0.72014f158KiBjf" target="_blank" rel="noopener">这里</a>备案吧！</p><h3 id="3-安装依赖软件"><a href="#3-安装依赖软件" class="headerlink" title="3. 安装依赖软件"></a>3. 安装依赖软件</h3><p>由于<code>Solo</code>是基于Java的开源博客系统，安装<code>Solo</code>之前，我们需要先安装如下依赖软件： </p><ol><li><p>Java </p></li><li><p>MySQL </p></li><li><p>Nginx</p></li></ol><h4 id="3-1-安装Java"><a href="#3-1-安装Java" class="headerlink" title="3.1 安装Java"></a>3.1 安装Java</h4><p>因为<code>Solo</code>是用Java开发的，我们要运行<code>Solo</code>必须的安装Java运行环境。在Oracle官网<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载页面</a>下载Linux版的JDK压缩包,然后上传到服务器。 </p><p>我在服务器上创建了一个新目录<code>/opt/java</code>，然后将压缩包拷贝到这个目录，然后解压：</p><pre class=" language-shell"><code class="language-shell">tar -zxvf jdk-8u171-linux-x64.tar.gz</code></pre><p>接下来设置环境变量，用vi编辑器打开<code>/etc/profile</code>文件：</p><pre class=" language-shell"><code class="language-shell">vi /etc/profile</code></pre><p>在文件开头添加如下内容：</p><pre class=" language-shell"><code class="language-shell">JAVA_HOME=/opt/java/jdk1.8.0_171 JRE_HOME=/opt/java/jdk1.8.0_171/jre PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib export JAVA_HOME JRE_HOME PATH CLASSPATH</code></pre><p>然后保存别执行以下命令使其生效：</p><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><p>最后在任意目录执行下面命令来测试Java是否安装成功：</p><pre class=" language-shell"><code class="language-shell">java -version</code></pre><p>如果你看到类似下面的输出，说明已经安装成功了：</p><pre class=" language-shell"><code class="language-shell">java version "1.8.0_171" Java(TM) SE Runtime Environment (build 1.8.0_171-b11) Java HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode)</code></pre><h4 id="3-2-安装MySQL"><a href="#3-2-安装MySQL" class="headerlink" title="3.2 安装MySQL"></a>3.2 安装MySQL</h4><p><code>Solo</code>默认使用的<code>H2</code>内存DB，我建议最好改用<code>MySQL</code>。</p><h5 id="3-2-1-安装MySQL"><a href="#3-2-1-安装MySQL" class="headerlink" title="3.2.1 安装MySQL"></a>3.2.1 安装MySQL</h5><p>首先分别执行下面三条命令：</p><pre class=" language-shell"><code class="language-shell">sudo apt-get install mysql-server sudo apt isntall mysql-client sudo apt install libmysqlclient-dev</code></pre><p>安装过程中，要求设置<code>root</code>用户的密码，请一定记住这个密码。 </p><p>安装成功后可以通过下面的命令测试是否安装成功：</p><pre class=" language-shell"><code class="language-shell">sudo netstat -tap | grep mysql</code></pre><p>输出类似如下：</p><pre class=" language-shell"><code class="language-shell">tcp6 0 0 localhost:mysql *:* LISTEN 19839/mysqld</code></pre><p>你也可以执行以下命令测试是否可以进入<code>MySQL</code>：</p><pre class=" language-shell"><code class="language-shell">mysql -uroot -p你的密码</code></pre><h5 id="3-2-2-开启MySQL远程访问"><a href="#3-2-2-开启MySQL远程访问" class="headerlink" title="3.2.2 开启MySQL远程访问"></a>3.2.2 开启MySQL远程访问</h5><p><code>MySQL</code>安装后默认是没有打开远程访问的，从上面的输出可以看出，它只允许<code>localhost</code>也就是本机访问。 </p><p>我们可以编辑<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>文件：</p><pre class=" language-shell"><code class="language-shell">vi /etc/mysql/mysql.conf.d/mysqld.cnf</code></pre><p>将<code>bind-address = 127.0.0.1</code>注释掉：</p><pre class=" language-shell"><code class="language-shell">#bind-address = 127.0.0.1</code></pre><p>保存退出，然后执行如下命令进入<code>MySQL</code>：</p><pre class=" language-shell"><code class="language-shell">mysql -uroot -p你的密码</code></pre><p>然后执行以下命令进行授权：</p><pre class=" language-shell"><code class="language-shell">grant all on *.* to root@'%' identified by '你的密码' with grant option; flush privileges;</code></pre><p>然后执行<code>quit</code>命令退出<code>MySQL</code>，执行以下命令重启<code>MySQL</code>服务：</p><pre class=" language-shell"><code class="language-shell">service mysql restart</code></pre><p>此时，再次运行<code>ps</code>命令：</p><pre class=" language-shell"><code class="language-shell">sudo netstat -tap | grep mysql</code></pre><p>输出如下，你会看到它已经不再只是监听<code>localhost</code>了：</p><pre class=" language-shell"><code class="language-shell">tcp6 0 0 [::]:mysql [::]:* LISTEN 19839/mysqld</code></pre><p>现在你可以使用<code>MySQL</code>客户端测试一下是否可以从你的电脑访问服务器上的<code>MySQL</code>服务了。</p><h4 id="3-3-安装Ngnix"><a href="#3-3-安装Ngnix" class="headerlink" title="3.3 安装Ngnix"></a>3.3 安装Ngnix</h4><p><code>Solo</code>会在自带的<code>Jetty</code>中运行，并默认监听<code>8080</code>端口，然而我们希望通过默认的<code>80</code>访问我们的网站，所以我们需要安装一个web server来做请求转发。 </p><p>Ubuntu系统中安装<code>Nginx</code>超简单，一条命令搞定：</p><pre class=" language-shell"><code class="language-shell">sudo apt-get install nginx</code></pre><p>安装好后<code>nginx</code>会自动启动，运行<code>ps</code>命令可以查看<code>nginx</code>进程:</p><pre class=" language-shell"><code class="language-shell">> ps -ef | grep nginx root     20435     1 0 Jun25 ? 00:00:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on; www-data 20436 20435 0 Jun25 ? 00:00:01 nginx: worker process</code></pre><p>接下来我们需要配置请求转发，打开<code>nginx</code>配置文件：</p><pre class=" language-shell"><code class="language-shell">vi /etc/nginx/nginx.conf</code></pre><p>在<code>http</code>节点内最后加上如下内容：</p><pre class=" language-shell"><code class="language-shell">server {        listen                  80;        server_name             www.yglong.com;        location / {                proxy_pass              http://127.0.0.1:8080;                proxy_redirect          off;                proxy_set_header        Host $host;                proxy_set_header        X-Real-IP $remote_addr;                proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;        }}</code></pre><p>保存退出，重启<code>nginx</code>服务:</p><pre class=" language-shell"><code class="language-shell">service nginx restart</code></pre><h3 id="4-安装博客程序"><a href="#4-安装博客程序" class="headerlink" title="4. 安装博客程序"></a>4. 安装博客程序</h3><p>接下来就是安装博客程序了。有很多的开源博客程序，目前最火的应该是<code>WordPress</code>，用PHP开发的开源博客系统。但是由于我不熟悉PHP，所以选择了一款Java开源博客系统：<a href="https://solo.b3log.org/" target="_blank" rel="noopener">Solo</a>。 </p><p>点击这个<a href="https://pan.baidu.com/s/1dzk7SU" target="_blank" rel="noopener">下载链接</a>，或者通过上面的官网再进入Github找到下载链接，下载到Solo的war包。然后通过FTP工具上传到服务器。 </p><p>上传Solo包后，创建一个新目录<code>/opt/solo</code>，将Solo war包拷贝到这个目录下，然后解压：</p><pre class=" language-shell"><code class="language-shell">jar -xvf solo-2.9.1.war</code></pre><p>解压后，进入<code>latke.properties</code>文件：</p><pre class=" language-shell"><code class="language-shell">vi /opt/solo/WEB-INF/classes/latke.properties</code></pre><p>修改<code>serverHost</code>和<code>serverPort</code>：</p><pre class=" language-shell"><code class="language-shell">#### Server ##### Browser visit protocolserverScheme=http# Browser visit domain nameserverHost=www.yglong.com# Browser visit port, 80 as usual, THIS IS NOT SERVER LISTEN PORT!serverPort=80</code></pre><p>保存并退出，进入<code>local.properties</code>文件：</p><pre class=" language-shell"><code class="language-shell">vi /opt/solo/WEB-INF/classes/local.properties</code></pre><p>注释掉H2 DB的配置，并配置MySQL：</p><pre class=" language-shell"><code class="language-shell">#### H2 runtime #####runtimeDatabase=H2#jdbc.username=root#jdbc.password=#jdbc.driver=org.h2.Driver#jdbc.URL=jdbc:h2:~/solo_h2/db#jdbc.pool=h2#### MySQL runtime ####runtimeDatabase=MYSQLjdbc.username=rootjdbc.password=你的MySQL密码jdbc.driver=com.mysql.jdbc.Driverjdbc.URL=jdbc:mysql://localhost:3306/solo?useUnicode=yes&amp;characterEncoding=utf8jdbc.pool=druid</code></pre><p>保存退出。 接下来创建数据库，首先执行下面命令进入<code>MySQL</code>：</p><pre class=" language-shell"><code class="language-shell">mysql -uroot -p你的密码</code></pre><p>然后执行下面命令创建数据库，数据库名字与<code>local.properties</code>里配置的名字要一样：</p><pre class=" language-shell"><code class="language-shell">CREATE DATABASE IF NOT EXISTS solo DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></pre><p>退出<code>MySQL</code>，最后执行下面命令启动<code>Solo</code>：</p><pre class=" language-shell"><code class="language-shell">nohup java -cp WEB-INF/lib/*:WEB-INF/classes org.b3log.solo.Starter &</code></pre><h3 id="5-登录博客后台设置网站信息"><a href="#5-登录博客后台设置网站信息" class="headerlink" title="5. 登录博客后台设置网站信息"></a>5. 登录博客后台设置网站信息</h3><p>现在可以输入你的域名访问你的网站了。首次访问时，需要初始化网站。你需要设置你的管理员帐号，然后开始初始化，<code>Solo</code>会自动在<code>MySQL</code>中建立数据库表。初始化成功后就自动进入你的网站了。 </p><p>进入<code>Solo</code>后台管理控制台，进入<code>工具</code>-&gt;<code>偏好设定</code>，你可以修改你的网站名称等其他基本网站信息。 </p><p>就这样，你的网站已经基本搭建完成了。 </p><p>最后剩下的，也是经营个人网站最重要的，就是你需要坚持不断的发布有质量的，原创的好文！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 个人博客网站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
